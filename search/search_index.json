{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Kurzussal kapcsolatos inform\u00e1ci\u00f3k T\u00e1rgyfelel\u0151s Dr. Galambos P\u00e9ter peter.galambos@irob.uni-obuda.hu Oktat\u00f3k Nagy Tam\u00e1s tamas.daniel.nagy@irob.uni-obuda.hu D\u00e9t\u00e1r Borsa detar.borsa@gmail.com \u00d3rarendi inform\u00e1ci\u00f3k Csoport Id\u0151pont Terem 1. csoport ea. \u00e9s lab. P\u00e9ntek 10:45-13:45 BA.1.10 2. csoport ea. \u00e9s lab. P\u00e9ntek 14:00-17:00 BA.1.10 F\u00e9l\u00e9ves \u00fctemez\u00e9s Okt. h\u00e9t D\u00e1tum T\u00e9mak\u00f6r Sz\u00e1monk\u00e9r\u00e9s 1. m\u00e1rc. 3 K\u00f6vetelm\u00e9nyek ismertet\u00e9se. ROS bevezet\u00e9s. Fejleszt\u0151k\u00f6rnyezet fel\u00e1ll\u00edt\u00e1sa. - 2. m\u00e1rc. 10 Fejleszt\u0151k\u00f6rnyezet fel\u00e1ll\u00edt\u00e1sa. Linux alapok. ROS 1 \u00e9s ROS 2. Egyszer\u0171 pr\u00f3bak\u00f3dok futtat\u00e1sa. ROS package. Az alapvet\u0151 ROS kommunik\u00e1ci\u00f3, publisher \u00e9s subscriber implement\u00e1l\u00e1sa. - 3. m\u00e1rc. 17 Python alapok. ROS kommunik\u00e1ci\u00f3 implement\u00e1ci\u00f3j\u00e1nak gyakorl\u00e1sa, p\u00e9ldafeladatok megold\u00e1sa. - 4. m\u00e1rc. 24 Robotikai alapfogalmak, da Vinci seb\u00e9szrobot programoz\u00e1sa szimul\u00e1lt k\u00f6rnyezetben I. - 5. m\u00e1rc. 31 Verzi\u00f3k\u00f6vet\u00e9s, Git. Projekt labor I. - 7. \u00e1pr. 14 Roslaunch, ROS param\u00e9ter szerver. Rosbag. - 8. \u00e1pr. 21 Saj\u00e1t \u00fczenetek defini\u00e1l\u00e1sa. ROS service, ROS action fogalma, felhaszn\u00e1l\u00e1sa. ZH1 9. \u00e1pr. 28 Kinematika, inverz kinematika, szimul\u00e1lt robotkar programoz\u00e1sa csukl\u00f3-, \u00e9s munkat\u00e9rben I. - 10. m\u00e1j. 5 URDF, webes fel\u00fcletek illeszt\u00e9se: RosBridge \u00e9s RoslibJS. - 11. m\u00e1j. 12 K\u00e1lm\u00e1n-sz\u0171r\u0151. Szenzoros adatok gy\u0171jt\u00e9se \u00e9s feldolgoz\u00e1sa ROS k\u00f6rnyezetben. - 12. m\u00e1j. 19 Szenzorf\u00fazi\u00f3 K\u00e1lm\u00e1n-sz\u0171r\u0151vel. Odometria-IMU szenzorf\u00fazi\u00f3 implement\u00e1ci\u00f3ja mobil robot platformra. - 13. m\u00e1j. 26 Projekt labor II. ZH2 14. j\u00fan. 2 K\u00f6telez\u0151 programok bemutat\u00e1sa. P\u00f3t ZH 14+1. j\u00fan. 9 - Al\u00e1\u00edr\u00e1sp\u00f3tl\u00f3: csak k\u00f6tprog Warning A f\u00e9l\u00e9v sor\u00e1n az \u00fctemez\u00e9s v\u00e1ltozhat! K\u00f6vetelm\u00e9nyek K\u00f6telez\u0151 program Bizony\u00edtottan saj\u00e1t munka \u00c9rt\u00e9kelhet\u0151 eredm\u00e9nyeket produk\u00e1ljon Pontoz\u00e1s: a megold\u00e1s teljess\u00e9ge, megfelel\u0151 ROS kommunik\u00e1ci\u00f3 alkalmaz\u00e1sa, program c\u00e9lszer\u0171 szerkezete, az implement\u00e1ci\u00f3 min\u0151s\u00e9ge, a k\u00f3d dokument\u00e1l\u00e1sa \u00c9vk\u00f6zi jegy A jelenl\u00e9t az \u00f3r\u00e1kon k\u00f6telez\u0151 (min 70%). A f\u00e9l\u00e9v elfogad\u00e1s\u00e1nak felt\u00e9tele, hogy mind a k\u00e9t ZH, mind a k\u00f6telez\u0151 program \u00e9rt\u00e9kel\u00e9se legal\u00e1bb el\u00e9gs\u00e9ges. A k\u00e9t ZH k\u00f6z\u00fcl az egyik az al\u00e1\u00edr\u00e1sp\u00f3tl\u00f3 vizsga alkalm\u00e1val p\u00f3tolhat\u00f3 . F\u00e9l\u00e9v v\u00e9gi jegy \\(Jegy = (ZH1 + ZH2 + 2 \\times K\u00f6tProg) / 4\\) Bejczy Antal Intelligens Robottechnikai K\u00f6zpont (BARK) https://irob.uni-obuda.hu irob-saf (iRob Surgical Automation Framework) https://github.com/ABC-iRobotics/irob-saf PlatypOUs https://github.com/ABC-iRobotics/PlatypOUs-Mobile-Robot-Platform","title":"Kezd\u0151lap"},{"location":"#kurzussal-kapcsolatos-informaciok","text":"","title":"Kurzussal kapcsolatos inform\u00e1ci\u00f3k"},{"location":"#targyfelelos","text":"Dr. Galambos P\u00e9ter peter.galambos@irob.uni-obuda.hu","title":"T\u00e1rgyfelel\u0151s"},{"location":"#oktatok","text":"Nagy Tam\u00e1s tamas.daniel.nagy@irob.uni-obuda.hu D\u00e9t\u00e1r Borsa detar.borsa@gmail.com","title":"Oktat\u00f3k"},{"location":"#orarendi-informaciok","text":"Csoport Id\u0151pont Terem 1. csoport ea. \u00e9s lab. P\u00e9ntek 10:45-13:45 BA.1.10 2. csoport ea. \u00e9s lab. P\u00e9ntek 14:00-17:00 BA.1.10","title":"\u00d3rarendi inform\u00e1ci\u00f3k"},{"location":"#feleves-utemezes","text":"Okt. h\u00e9t D\u00e1tum T\u00e9mak\u00f6r Sz\u00e1monk\u00e9r\u00e9s 1. m\u00e1rc. 3 K\u00f6vetelm\u00e9nyek ismertet\u00e9se. ROS bevezet\u00e9s. Fejleszt\u0151k\u00f6rnyezet fel\u00e1ll\u00edt\u00e1sa. - 2. m\u00e1rc. 10 Fejleszt\u0151k\u00f6rnyezet fel\u00e1ll\u00edt\u00e1sa. Linux alapok. ROS 1 \u00e9s ROS 2. Egyszer\u0171 pr\u00f3bak\u00f3dok futtat\u00e1sa. ROS package. Az alapvet\u0151 ROS kommunik\u00e1ci\u00f3, publisher \u00e9s subscriber implement\u00e1l\u00e1sa. - 3. m\u00e1rc. 17 Python alapok. ROS kommunik\u00e1ci\u00f3 implement\u00e1ci\u00f3j\u00e1nak gyakorl\u00e1sa, p\u00e9ldafeladatok megold\u00e1sa. - 4. m\u00e1rc. 24 Robotikai alapfogalmak, da Vinci seb\u00e9szrobot programoz\u00e1sa szimul\u00e1lt k\u00f6rnyezetben I. - 5. m\u00e1rc. 31 Verzi\u00f3k\u00f6vet\u00e9s, Git. Projekt labor I. - 7. \u00e1pr. 14 Roslaunch, ROS param\u00e9ter szerver. Rosbag. - 8. \u00e1pr. 21 Saj\u00e1t \u00fczenetek defini\u00e1l\u00e1sa. ROS service, ROS action fogalma, felhaszn\u00e1l\u00e1sa. ZH1 9. \u00e1pr. 28 Kinematika, inverz kinematika, szimul\u00e1lt robotkar programoz\u00e1sa csukl\u00f3-, \u00e9s munkat\u00e9rben I. - 10. m\u00e1j. 5 URDF, webes fel\u00fcletek illeszt\u00e9se: RosBridge \u00e9s RoslibJS. - 11. m\u00e1j. 12 K\u00e1lm\u00e1n-sz\u0171r\u0151. Szenzoros adatok gy\u0171jt\u00e9se \u00e9s feldolgoz\u00e1sa ROS k\u00f6rnyezetben. - 12. m\u00e1j. 19 Szenzorf\u00fazi\u00f3 K\u00e1lm\u00e1n-sz\u0171r\u0151vel. Odometria-IMU szenzorf\u00fazi\u00f3 implement\u00e1ci\u00f3ja mobil robot platformra. - 13. m\u00e1j. 26 Projekt labor II. ZH2 14. j\u00fan. 2 K\u00f6telez\u0151 programok bemutat\u00e1sa. P\u00f3t ZH 14+1. j\u00fan. 9 - Al\u00e1\u00edr\u00e1sp\u00f3tl\u00f3: csak k\u00f6tprog Warning A f\u00e9l\u00e9v sor\u00e1n az \u00fctemez\u00e9s v\u00e1ltozhat!","title":"F\u00e9l\u00e9ves \u00fctemez\u00e9s"},{"location":"#kovetelmenyek","text":"","title":"K\u00f6vetelm\u00e9nyek"},{"location":"#kotelezo-program","text":"Bizony\u00edtottan saj\u00e1t munka \u00c9rt\u00e9kelhet\u0151 eredm\u00e9nyeket produk\u00e1ljon Pontoz\u00e1s: a megold\u00e1s teljess\u00e9ge, megfelel\u0151 ROS kommunik\u00e1ci\u00f3 alkalmaz\u00e1sa, program c\u00e9lszer\u0171 szerkezete, az implement\u00e1ci\u00f3 min\u0151s\u00e9ge, a k\u00f3d dokument\u00e1l\u00e1sa","title":"K\u00f6telez\u0151 program"},{"location":"#evkozi-jegy","text":"A jelenl\u00e9t az \u00f3r\u00e1kon k\u00f6telez\u0151 (min 70%). A f\u00e9l\u00e9v elfogad\u00e1s\u00e1nak felt\u00e9tele, hogy mind a k\u00e9t ZH, mind a k\u00f6telez\u0151 program \u00e9rt\u00e9kel\u00e9se legal\u00e1bb el\u00e9gs\u00e9ges. A k\u00e9t ZH k\u00f6z\u00fcl az egyik az al\u00e1\u00edr\u00e1sp\u00f3tl\u00f3 vizsga alkalm\u00e1val p\u00f3tolhat\u00f3 . F\u00e9l\u00e9v v\u00e9gi jegy \\(Jegy = (ZH1 + ZH2 + 2 \\times K\u00f6tProg) / 4\\)","title":"\u00c9vk\u00f6zi jegy"},{"location":"#bejczy-antal-intelligens-robottechnikai-kozpont-bark","text":"https://irob.uni-obuda.hu","title":"Bejczy Antal Intelligens Robottechnikai K\u00f6zpont (BARK)"},{"location":"#irob-saf","text":"(iRob Surgical Automation Framework) https://github.com/ABC-iRobotics/irob-saf","title":"irob-saf"},{"location":"#platypous","text":"https://github.com/ABC-iRobotics/PlatypOUs-Mobile-Robot-Platform","title":"PlatypOUs"},{"location":"01_system_setup/","text":"01. Bevezet\u00e9s Robot Operating System (ROS) bevezet\u00e9s A robot fogalma Joseph Engelberger, pioneer in industrial robotics: \"I can't define a robot, but I know one when I see one.\" Wikipedia: \"A robot is a machine\u2014especially one programmable by a computer\u2014 capable of carrying out a complex series of actions automatically. Robots can be guided by an external control device or the control may be embedded within. Robots may be constructed on the lines of human form, but most robots are machines designed to perform a task with no regard to their aesthetics.\" ISO 8373:2012 Robots and robotic devices \u2013 Vocabulary, FDIS 2012: \"A robot is an actuated mechanism programmable in two or more axes with a degree of autonomy, moving within its environment, to perform intended tasks.\" Rodney Brooks, Founder and CTO, Rethink Robotics: \"A robot is some sort of device, wich has sensors those sensors the world, does some sort of computation, decides on an action, and then does that action based on the sensory input, which makes some change out in the world, outside its body. Comment: the part \"make some change outside its body\" discriminates a washing machine from e.g. a Roomba.\" Tam\u00e1s Haidegger, Encyclopedia of Robotics : \"A robot is a complex mechatronic system enabled with electronics, sensors, actuators and software, executing tasks with a certain degree of autonomy. It may be pre-programmed, teleoperated or carrying out computations to make decisions.\" Mi a ROS? Open-source, robotikai c\u00e9l\u00fa middleware Modularit\u00e1s, \u00fajra-felhaszn\u00e1lhat\u00f3s\u00e1g (driverek, algoritmusok, library-k, ...) Hardware absztrakci\u00f3, ROS API C++ \u00e9s Python t\u00e1mogat\u00e1s Ubuntu Linux (kiv\u00e9ve ROS 2) N\u00e9pes k\u00f6z\u00f6ss\u00e9g T\u00f6rt\u00e9net 2000-es \u00e9vek k\u00f6zepe, Stanford: robotikai c\u00e9l\u00fa rugalmas, dinamikus szoftverrendszer protot\u00edpusok fejleszt\u00e9se 2007, Willow Garage: inkub\u00e1ci\u00f3, kialakult a ROS alapja BSD open-source licensz alatt Robotikai kutat\u00e1sok ter\u00fclet\u00e9n egyre ink\u00e1bb elterjedt, PR2 2012: Ipari robotika, ROS-Industrial 2017: ROS 2 Fejleszt\u0151k\u00f6rnyezet fel\u00e1ll\u00edt\u00e1sa - H\u00e1zi feladat Aj\u00e1nlott k\u00f6rnyezet: Ubuntu 20.04 ROS1 Noetic ROS2 Foxy IDE: QtCreator/CLion/VSCode ROS 1 Noetic ROS Noetic telep\u00edt\u00e9se sudo sh -c 'echo \"deb http://packages.ros.org/ros/ubuntu $(lsb_release -sc) main\" > /etc/apt/sources.list.d/ros-latest.list' sudo apt install curl curl -s https://raw.githubusercontent.com/ros/rosdistro/master/ros.asc | sudo apt-key add - sudo apt update sudo apt install ros-noetic-desktop-full source /opt/ros/noetic/setup.bash ROS 1 dependencies sudo apt install python3-rosdep python3-rosinstall python3-rosinstall-generator python3-wstool build-essential sudo rosdep init rosdep update Ha ezzel megvagyunk, a k\u00f6vetkez\u0151 parancssal tesztelhetj\u00fck a ROS 1 telep\u00edt\u00e9s\u00fcnket: source /opt/ros/noetic/setup.bash roscore ROS 2 Foxy Locale be\u00e1ll\u00edt\u00e1sa. locale # check for UTF-8 sudo apt update && sudo apt install locales sudo locale-gen en_US en_US.UTF-8 sudo update-locale LC_ALL = en_US.UTF-8 LANG = en_US.UTF-8 export LANG = en_US.UTF-8 locale # verify settings ROS 2 Foxy telep\u00edt\u00e9se sudo apt install software-properties-common sudo add-apt-repository universe sudo apt update && sudo apt install curl sudo curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key -o /usr/share/keyrings/ros-archive-keyring.gpg echo \"deb [arch= $( dpkg --print-architecture ) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu $( . /etc/os-release && echo $UBUNTU_CODENAME ) main\" | sudo tee /etc/apt/sources.list.d/ros2.list > /dev/null sudo apt update sudo apt upgrade sudo apt install ros-foxy-desktop python3-argcomplete ros-dev-tools ros-foxy-moveit* ros-foxy-control* Ha ezzel megvagyunk, a k\u00f6vetkez\u0151 parancssal tesztelhetj\u00fck a ROS 2 telep\u00edt\u00e9s\u00fcnket: source /opt/ros/foxy/setup.bash ros2 run demo_nodes_py talker A source parancs a k\u00f6rnyezeti v\u00e1ltoz\u00f3k be\u00e1ll\u00edt\u00e1s\u00e1\u00e9rt felel\u0151s, ezt minden \u00faj termin\u00e1lablak megnyit\u00e1sakor meg kell(ene) adni. Ez a parancs beilleszthet\u0151 a ~/.bashrc f\u00e1jl v\u00e9g\u00e9re, amely minden termin\u00e1lablak megnyit\u00e1sakor lefut, \u00edgy nem kell mindig be\u00edrnunk (ROS 2 lesz az alap\u00e9rtelmezett): echo \"source /opt/ros/foxy/setup.bash\" >> ~/.bashrc Tov\u00e1bbi csomagok Az al\u00e1bbi csomagokra is sz\u00fcks\u00e9g lesz a f\u00e9l\u00e9v sor\u00e1n, \u00edgy ezeket is \u00e9rdemes feltelep\u00edteni: sudo apt install libxml2-dev libraw1394-dev libncurses5-dev qtcreator swig sox espeak cmake-curses-gui cmake-qt-gui git subversion gfortran libcppunit-dev libqt5xmlpatterns5-dev python3-catkin-tools python3-osrf-pycommon libasound2-dev libgl1-mesa-dev xorg-dev ros-foxy-turtlebot3* IDE QtCreator ROS csomagok fejleszt\u00e9s\u00e9hez jelenleg az egyik legink\u00e1bb haszn\u00e1lhat\u00f3 IDE a QtCreator, melyhez ROS plugin is k\u00e9sz\u00fclt. Az installer az al\u00e1bbi linken el\u00e9rhet\u0151. A \"18.04 offline installer\"-t \u00e9rdemes haszn\u00e1lni, ez m\u0171k\u00f6dik Ubunutu 20.04-en is. https://ros-qtc-plugin.readthedocs.io/en/latest/_source/How-to-Install-Users.html Ha let\u00f6lt\u00f6tt\u00fck, az IDE az al\u00e1bbi paranccsal telep\u00edthet\u0151 (fontos, hogy cd zz\u00fcnk be a let\u00f6lt\u00e9s hely\u00e9re): chmod +x qtcreator-ros-bionic-latest-offline-installer.run sudo ./qtcreator-ros-bionic-latest-offline-installer.run Amikor a telep\u00edt\u0151 k\u00e9rdezi, hova telep\u00edtse, m\u00f3dos\u00edtsuk pl. /home/<USER>/QtCreator mapp\u00e1ra. Ha a root-ba tel\u00e9ep\u00edtj\u00fck, nem fogjuk tudni futtatni. A telep\u00edt\u00e9s ut\u00e1n \"Qt Creator (4.9.2)\" n\u00e9ven keress\u00fck. CLion A CLion magasfok\u00fa ROS integr\u00e1ci\u00f3val rendelkezik, a kurzus sor\u00e1n ennek a haszn\u00e1lata a legink\u00e1bb aj\u00e1nlott. Ingyenes hallgat\u00f3i licensz az al\u00e1bbi linken ig\u00e9nyelhet\u0151: https://www.jetbrains.com/community/education/#students Telep\u00edt\u00e9s ut\u00e1n keress\u00fck meg a /var/lib/snapd/desktop/applications/clion_clion.desktop f\u00e1jlt. A megfelel\u0151 sort \u00edrjuk \u00e1t erre, \u00edgy a termin\u00e1l \u00e1ltal be\u00e1ll\u00edtott k\u00f6rnyezetet fogja haszn\u00e1lni az IDE: Exec = bash -i -c \"/snap/bin/clion\" %f Visual Studio A Microsoft Visual Studio szint\u00e9n t\u00e1mogatja a ROS-hoz k\u00e9sz\u00fclt forr\u00e1sk\u00f3dokat, ez az IDE is haszn\u00e1lhat\u00f3 a f\u00e9l\u00e9v sor\u00e1n. Suggestion Install Terminator terminal emulator: sudo apt update sudo apt install terminator Hasznos linkek https://www.ros.org/ ROS 1 Noetic installation ROS 2 Foxy installation ROS Distributions http://wiki.ros.org/ROS/Tutorials CLion hallgat\u00f3i licensz QtCreator + ROS plugin IROB virtual tour","title":"1. Bevezet\u00e9s, Fejleszt\u0151k\u00f6rnyezet"},{"location":"01_system_setup/#01-bevezetes","text":"","title":"01. Bevezet\u00e9s"},{"location":"01_system_setup/#robot-operating-system-ros-bevezetes","text":"","title":"Robot Operating System (ROS) bevezet\u00e9s"},{"location":"01_system_setup/#a-robot-fogalma","text":"Joseph Engelberger, pioneer in industrial robotics: \"I can't define a robot, but I know one when I see one.\" Wikipedia: \"A robot is a machine\u2014especially one programmable by a computer\u2014 capable of carrying out a complex series of actions automatically. Robots can be guided by an external control device or the control may be embedded within. Robots may be constructed on the lines of human form, but most robots are machines designed to perform a task with no regard to their aesthetics.\" ISO 8373:2012 Robots and robotic devices \u2013 Vocabulary, FDIS 2012: \"A robot is an actuated mechanism programmable in two or more axes with a degree of autonomy, moving within its environment, to perform intended tasks.\" Rodney Brooks, Founder and CTO, Rethink Robotics: \"A robot is some sort of device, wich has sensors those sensors the world, does some sort of computation, decides on an action, and then does that action based on the sensory input, which makes some change out in the world, outside its body. Comment: the part \"make some change outside its body\" discriminates a washing machine from e.g. a Roomba.\" Tam\u00e1s Haidegger, Encyclopedia of Robotics : \"A robot is a complex mechatronic system enabled with electronics, sensors, actuators and software, executing tasks with a certain degree of autonomy. It may be pre-programmed, teleoperated or carrying out computations to make decisions.\"","title":"A robot fogalma"},{"location":"01_system_setup/#mi-a-ros","text":"Open-source, robotikai c\u00e9l\u00fa middleware Modularit\u00e1s, \u00fajra-felhaszn\u00e1lhat\u00f3s\u00e1g (driverek, algoritmusok, library-k, ...) Hardware absztrakci\u00f3, ROS API C++ \u00e9s Python t\u00e1mogat\u00e1s Ubuntu Linux (kiv\u00e9ve ROS 2) N\u00e9pes k\u00f6z\u00f6ss\u00e9g","title":"Mi a ROS?"},{"location":"01_system_setup/#tortenet","text":"2000-es \u00e9vek k\u00f6zepe, Stanford: robotikai c\u00e9l\u00fa rugalmas, dinamikus szoftverrendszer protot\u00edpusok fejleszt\u00e9se 2007, Willow Garage: inkub\u00e1ci\u00f3, kialakult a ROS alapja BSD open-source licensz alatt Robotikai kutat\u00e1sok ter\u00fclet\u00e9n egyre ink\u00e1bb elterjedt, PR2 2012: Ipari robotika, ROS-Industrial 2017: ROS 2","title":"T\u00f6rt\u00e9net"},{"location":"01_system_setup/#fejlesztokornyezet-felallitasa-hazi-feladat","text":"Aj\u00e1nlott k\u00f6rnyezet: Ubuntu 20.04 ROS1 Noetic ROS2 Foxy IDE: QtCreator/CLion/VSCode","title":"Fejleszt\u0151k\u00f6rnyezet fel\u00e1ll\u00edt\u00e1sa - H\u00e1zi feladat"},{"location":"01_system_setup/#ros-1-noetic","text":"ROS Noetic telep\u00edt\u00e9se sudo sh -c 'echo \"deb http://packages.ros.org/ros/ubuntu $(lsb_release -sc) main\" > /etc/apt/sources.list.d/ros-latest.list' sudo apt install curl curl -s https://raw.githubusercontent.com/ros/rosdistro/master/ros.asc | sudo apt-key add - sudo apt update sudo apt install ros-noetic-desktop-full source /opt/ros/noetic/setup.bash ROS 1 dependencies sudo apt install python3-rosdep python3-rosinstall python3-rosinstall-generator python3-wstool build-essential sudo rosdep init rosdep update Ha ezzel megvagyunk, a k\u00f6vetkez\u0151 parancssal tesztelhetj\u00fck a ROS 1 telep\u00edt\u00e9s\u00fcnket: source /opt/ros/noetic/setup.bash roscore","title":"ROS 1 Noetic"},{"location":"01_system_setup/#ros-2-foxy","text":"Locale be\u00e1ll\u00edt\u00e1sa. locale # check for UTF-8 sudo apt update && sudo apt install locales sudo locale-gen en_US en_US.UTF-8 sudo update-locale LC_ALL = en_US.UTF-8 LANG = en_US.UTF-8 export LANG = en_US.UTF-8 locale # verify settings ROS 2 Foxy telep\u00edt\u00e9se sudo apt install software-properties-common sudo add-apt-repository universe sudo apt update && sudo apt install curl sudo curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key -o /usr/share/keyrings/ros-archive-keyring.gpg echo \"deb [arch= $( dpkg --print-architecture ) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu $( . /etc/os-release && echo $UBUNTU_CODENAME ) main\" | sudo tee /etc/apt/sources.list.d/ros2.list > /dev/null sudo apt update sudo apt upgrade sudo apt install ros-foxy-desktop python3-argcomplete ros-dev-tools ros-foxy-moveit* ros-foxy-control* Ha ezzel megvagyunk, a k\u00f6vetkez\u0151 parancssal tesztelhetj\u00fck a ROS 2 telep\u00edt\u00e9s\u00fcnket: source /opt/ros/foxy/setup.bash ros2 run demo_nodes_py talker A source parancs a k\u00f6rnyezeti v\u00e1ltoz\u00f3k be\u00e1ll\u00edt\u00e1s\u00e1\u00e9rt felel\u0151s, ezt minden \u00faj termin\u00e1lablak megnyit\u00e1sakor meg kell(ene) adni. Ez a parancs beilleszthet\u0151 a ~/.bashrc f\u00e1jl v\u00e9g\u00e9re, amely minden termin\u00e1lablak megnyit\u00e1sakor lefut, \u00edgy nem kell mindig be\u00edrnunk (ROS 2 lesz az alap\u00e9rtelmezett): echo \"source /opt/ros/foxy/setup.bash\" >> ~/.bashrc","title":"ROS 2 Foxy"},{"location":"01_system_setup/#tovabbi-csomagok","text":"Az al\u00e1bbi csomagokra is sz\u00fcks\u00e9g lesz a f\u00e9l\u00e9v sor\u00e1n, \u00edgy ezeket is \u00e9rdemes feltelep\u00edteni: sudo apt install libxml2-dev libraw1394-dev libncurses5-dev qtcreator swig sox espeak cmake-curses-gui cmake-qt-gui git subversion gfortran libcppunit-dev libqt5xmlpatterns5-dev python3-catkin-tools python3-osrf-pycommon libasound2-dev libgl1-mesa-dev xorg-dev ros-foxy-turtlebot3*","title":"Tov\u00e1bbi csomagok"},{"location":"01_system_setup/#ide","text":"QtCreator ROS csomagok fejleszt\u00e9s\u00e9hez jelenleg az egyik legink\u00e1bb haszn\u00e1lhat\u00f3 IDE a QtCreator, melyhez ROS plugin is k\u00e9sz\u00fclt. Az installer az al\u00e1bbi linken el\u00e9rhet\u0151. A \"18.04 offline installer\"-t \u00e9rdemes haszn\u00e1lni, ez m\u0171k\u00f6dik Ubunutu 20.04-en is. https://ros-qtc-plugin.readthedocs.io/en/latest/_source/How-to-Install-Users.html Ha let\u00f6lt\u00f6tt\u00fck, az IDE az al\u00e1bbi paranccsal telep\u00edthet\u0151 (fontos, hogy cd zz\u00fcnk be a let\u00f6lt\u00e9s hely\u00e9re): chmod +x qtcreator-ros-bionic-latest-offline-installer.run sudo ./qtcreator-ros-bionic-latest-offline-installer.run Amikor a telep\u00edt\u0151 k\u00e9rdezi, hova telep\u00edtse, m\u00f3dos\u00edtsuk pl. /home/<USER>/QtCreator mapp\u00e1ra. Ha a root-ba tel\u00e9ep\u00edtj\u00fck, nem fogjuk tudni futtatni. A telep\u00edt\u00e9s ut\u00e1n \"Qt Creator (4.9.2)\" n\u00e9ven keress\u00fck. CLion A CLion magasfok\u00fa ROS integr\u00e1ci\u00f3val rendelkezik, a kurzus sor\u00e1n ennek a haszn\u00e1lata a legink\u00e1bb aj\u00e1nlott. Ingyenes hallgat\u00f3i licensz az al\u00e1bbi linken ig\u00e9nyelhet\u0151: https://www.jetbrains.com/community/education/#students Telep\u00edt\u00e9s ut\u00e1n keress\u00fck meg a /var/lib/snapd/desktop/applications/clion_clion.desktop f\u00e1jlt. A megfelel\u0151 sort \u00edrjuk \u00e1t erre, \u00edgy a termin\u00e1l \u00e1ltal be\u00e1ll\u00edtott k\u00f6rnyezetet fogja haszn\u00e1lni az IDE: Exec = bash -i -c \"/snap/bin/clion\" %f Visual Studio A Microsoft Visual Studio szint\u00e9n t\u00e1mogatja a ROS-hoz k\u00e9sz\u00fclt forr\u00e1sk\u00f3dokat, ez az IDE is haszn\u00e1lhat\u00f3 a f\u00e9l\u00e9v sor\u00e1n. Suggestion Install Terminator terminal emulator: sudo apt update sudo apt install terminator","title":"IDE"},{"location":"01_system_setup/#hasznos-linkek","text":"https://www.ros.org/ ROS 1 Noetic installation ROS 2 Foxy installation ROS Distributions http://wiki.ros.org/ROS/Tutorials CLion hallgat\u00f3i licensz QtCreator + ROS plugin IROB virtual tour","title":"Hasznos linkek"},{"location":"02_linux_ros_principles/","text":"02. Linux, ROS alapismeretek Elm\u00e9let Linux principles (Was) the only OS supported by ROS Security Efficieny Open-source Community support User freedom Distributions: Ubuntu , Linux Mint, Debian, etc. Terminal usage more dominant Suggestion Install Terminator terminal emulator: sudo apt update sudo apt install terminator Linux commands See some basic commands below: Run as administrator with sudo Manual of command man , e.g. man cp Package management apt , e.g. apt update , apt install Navigation cd List directory contents ls Create file touch Copy file cp Move file mv Remove file rm Make directory mkdir Remove directory rmdir Make a file executable chmod +x <filename> Safe restart: Crtl + Alt + PrtScr + REISUB If not sure, just google the command ROS 1 \u2192 ROS 2 ROS 2 was rewritten from scratch More modular architecture Improved support for real-time systems Support for multiple communication protocols Better interoperability with other robotic systems Focus on standardization and industry collaboration No ROS Master No Devel space Different build system Platforms: Windows, OS X, Linux ROS principles ROS workspace Colcon workspace A folder where packages are modified, built, and installed. Source space: Source code of colcon packages Space where you can extract/checkout/clone source code for the packages you want to build Build space Colcon is invoked here to build packages Colcon and CMake keep intermediate files here Install space: Each package will be installed here; by default each package will be installed into a separate subdirectory Log space: Contains various logging information about each colcon invocation ROS package principle Enough functionality to be useful, but not too much that the package is heavyweight and difficult to use from other software. ROS dependencies After cloning a new package, use the following command to install depenencies: rosdep install --from-paths src --ignore-src -r -y ROS package Main unit to organize software in ROS Buildable and redistributable unit of ROS code Consists of (in the case of Python packages): package.xml file containing meta information about the package name version description dependencies etc. setup.py containing instructions for how to install the package setup.cfg is required when a package has executables, so ros2 run can find them /<package_name> - a directory with the same name as your package, used by ROS 2 tools to find your package, contains __init__.py Anything else ros2 run turtlesim turtlesim_node CMake For CMake packages (C++), the package contents will be different. ROS node Executable part of ROS: python scripts compiled C++ code A process that performs computation Inter-node communication: ROS topics (streams) ROS parameter server Remote Procedure Calls (RPC) ROS services ROS actions Meant to operate at a fine-grained scale Typically, a robot control system consists of many nodes, like: Trajectory planning Localization Read sensory data Process sensory data Motor control User interface etc. ROS build system---Colcon System for building software packages in ROS Environmental setup file setup.bash generated during init process of a new workspace extends shell environment ROS can find any resources that have been installed or built to that location source ~/catkin_ws/devel/setup.bash Gyakorlat 1: Turtlesim Ind\u00edtsuk el a turtlesim_node -ot \u00e9s a turtle_teleop_key node-ot az al\u00e1bbi parancsokkal, k\u00fcl\u00f6-k\u00fcl\u00f6n termin\u00e1l ablakokban: Tip Terminator -ban Ctrl-Shift-O , Ctrl-Shift-E billenty\u0171 kombin\u00e1ci\u00f3kkal oszthatjuk tov\u00e1bb az adott ablakot. Ctrl-Shift-W bez\u00e1rja az akt\u00edv ablakot. ros2 run turtlesim turtlesim_node ros2 run turtlesim turtle_teleop_key Futtat\u00e1s megszak\u00edt\u00e1sa Ctrl-C Az al\u00e1bbi ROS parancsok futtat\u00e1sa hasznos inform\u00e1ci\u00f3kkal szolg\u00e1lhat: ros2 wtf ros2 node list ros2 node info /turtlesim ros2 topic list ros2 topic info /turtle1/cmd_vel ros2 interface show geometry_msgs/msg/Twist ros2 topic echo /turtle1/cmd_vel Az al\u00e1bbi paranccsal ind\u00edtsuk el az rqt_gui -t: ros2 run rqt_gui rqt_gui Jelen\u00edts\u00fck meg a fut\u00f3 node-okat \u00e9s topic-okat rqt_gui -ban: Plugins \u2192 Introspection \u2192 Node Graph. Publik\u00e1ljunk a /turtle1/cmd_vel topic-ba szint\u00e9n az rqt_gui felhaszn\u00e1l\u00e1s\u00e1val: Plugins \u2192 Topics \u2192 Message Publisher. 2: ROS 2 workspace l\u00e9trehoz\u00e1sa Hozzunk l\u00e9tre \u00faj ROS2 workspace-t ros2_ws n\u00e9vvel. mkdir -p ~/ros2_ws/src 3: ROS 2 package l\u00e9trehoz\u00e1sa Hozzunk l\u00e9tre \u00faj ROS2 package-et ros2_course n\u00e9vvel \u00e9s egy Hello World-del. cd ~/ros2_ws/src ros2 pkg create --build-type ament_python --node-name hello ros2_course Szintaxis ros2 pkg create --build-type ament_python <package_name> Build-elj\u00fck a workspace-t. cd ~/ros2_ws colcon build --symlink-install Symlink A --symlink-install opci\u00f3 az Install space-be belinkeli a forr\u00e1s script-eket, \u00edgy m\u00f3dos\u00edt\u00e1s ut\u00e1n nem kell \u00fajra build-eln\u00fcnk. A ~/.bashrc f\u00e1jl v\u00e9g\u00e9re illessz\u00fck be az al\u00e1bbi sort: source ~/ros2_ws/install/setup.bash Import\u00e1l\u00e1s QtCreator-ba New file or project \u2192 Other project \u2192 ROS Workspace. V\u00e1lasszuk ki a Colcon-t, mint Build System, \u00e9s a ros2_ws -t, mint Worksapce path. Import\u00e1l\u00e1s CLion-ba \u00c1ll\u00edtsuk be a Python interpretert Python 3.8-ra, /usr/bin/python3 . Adjuk hozz\u00e1 ak\u00f6vetkez\u0151 el\u00e9r\u00e9si utat: /opt/ros/foxy/lib/python3.8/site-packages . Hozzuk l\u00e9tre a compile_commands.json f\u00e1jlt a ~/ros2_ws/build k\u00f6nyvt\u00e1rban az al\u00e1bbi tartalommal: [ ] Tesztelj\u00fck a Hello World m\u0171k\u00f6d\u00e9s\u00e9t: ros2 run ros2_course hello 4: Publisher implement\u00e1l\u00e1sa Python-ban Navig\u00e1ljunk a ros2_ws/src/ros2_course/ros2_course mapp\u00e1ba \u00e9s hozzuk l\u00e9tre a talker.py f\u00e1jlt az al\u00e1bbi tartalommal. import rclpy from rclpy.node import Node from std_msgs.msg import String class MinimalPublisher ( Node ): def __init__ ( self ): super () . __init__ ( 'minimal_publisher' ) self . publisher_ = self . create_publisher ( String , 'chatter' , 10 ) timer_period = 0.5 # seconds self . timer = self . create_timer ( timer_period , self . timer_callback ) self . i = 0 def timer_callback ( self ): msg = String () msg . data = 'Hello World: %d ' % self . i self . publisher_ . publish ( msg ) self . get_logger () . info ( 'Publishing: \" %s \"' % msg . data ) self . i += 1 def main ( args = None ): rclpy . init ( args = args ) minimal_publisher = MinimalPublisher () rclpy . spin ( minimal_publisher ) # Destroy the node explicitly # (optional - otherwise it will be done automatically # when the garbage collector destroys the node object) minimal_publisher . destroy_node () rclpy . shutdown () if __name__ == '__main__' : main () A setup.py f\u00e1jlban adjunk meg egy \u00faj entry point-on: 'talker = ros3_course.talker:main' , Build-elj\u00fck \u00e9s futtassuk a node-ot: cd ~/ros2_ws colcon build --symlink-install ros2 run ros2_course talker Ellen\u0151rizz\u00fck le a node kimenet\u00e9t a ros2 topic echo parancs vagy az rqt_gui haszn\u00e1lat\u00e1val. 5: Subscriber implement\u00e1l\u00e1sa Python-ban Navig\u00e1ljunk a ros2_ws/src/ros2_course/ros2_course mapp\u00e1ba \u00e9s hozzuk l\u00e9tre a listener.py f\u00e1jlt az al\u00e1bbi tartalommal. import rclpy from rclpy.node import Node from std_msgs.msg import String class MinimalSubscriber ( Node ): def __init__ ( self ): super () . __init__ ( 'minimal_subscriber' ) self . subscription = self . create_subscription ( String , 'chatter' , self . listener_callback , 10 ) self . subscription # prevent unused variable warning def listener_callback ( self , msg ): self . get_logger () . info ( 'I heard msg: \" %s \"' % msg . data ) def main ( args = None ): rclpy . init ( args = args ) minimal_subscriber = MinimalSubscriber () rclpy . spin ( minimal_subscriber ) # Destroy the node explicitly # (optional - otherwise it will be done automatically # when the garbage collector destroys the node object) minimal_subscriber . destroy_node () rclpy . shutdown () if __name__ == '__main__' : main () A setup.py f\u00e1jlban adjunk meg egy \u00faj entry point-on: 'listener = ros3_course.listener:main' , Build-elj\u00fck \u00e9s futtassuk mind a 2 node-ot: cd ~/ros2_ws colcon build --symlink-install ros2 run ros2_course talker ros2 run ros2_course listener Az rqt_gui haszn\u00e1lat\u00e1val jelen\u00edttess\u00fck meg a fut\u00f3 rendszer node-jait \u00e9s topic-jait: ros2 run rqt_gui rqt_gui Hasznos linkek ROS 2 Tutorials What is a ROS 2 package?","title":"2. Linux, ROS alapismeretek"},{"location":"02_linux_ros_principles/#02-linux-ros-alapismeretek","text":"","title":"02. Linux, ROS alapismeretek"},{"location":"02_linux_ros_principles/#elmelet","text":"","title":"Elm\u00e9let"},{"location":"02_linux_ros_principles/#linux-principles","text":"(Was) the only OS supported by ROS Security Efficieny Open-source Community support User freedom Distributions: Ubuntu , Linux Mint, Debian, etc. Terminal usage more dominant Suggestion Install Terminator terminal emulator: sudo apt update sudo apt install terminator","title":"Linux principles"},{"location":"02_linux_ros_principles/#linux-commands","text":"See some basic commands below: Run as administrator with sudo Manual of command man , e.g. man cp Package management apt , e.g. apt update , apt install Navigation cd List directory contents ls Create file touch Copy file cp Move file mv Remove file rm Make directory mkdir Remove directory rmdir Make a file executable chmod +x <filename> Safe restart: Crtl + Alt + PrtScr + REISUB If not sure, just google the command","title":"Linux commands"},{"location":"02_linux_ros_principles/#ros-1-ros-2","text":"ROS 2 was rewritten from scratch More modular architecture Improved support for real-time systems Support for multiple communication protocols Better interoperability with other robotic systems Focus on standardization and industry collaboration No ROS Master No Devel space Different build system Platforms: Windows, OS X, Linux","title":"ROS 1 &rarr; ROS 2"},{"location":"02_linux_ros_principles/#ros-principles","text":"","title":"ROS principles"},{"location":"02_linux_ros_principles/#ros-workspace","text":"Colcon workspace A folder where packages are modified, built, and installed. Source space: Source code of colcon packages Space where you can extract/checkout/clone source code for the packages you want to build Build space Colcon is invoked here to build packages Colcon and CMake keep intermediate files here Install space: Each package will be installed here; by default each package will be installed into a separate subdirectory Log space: Contains various logging information about each colcon invocation ROS package principle Enough functionality to be useful, but not too much that the package is heavyweight and difficult to use from other software. ROS dependencies After cloning a new package, use the following command to install depenencies: rosdep install --from-paths src --ignore-src -r -y","title":"ROS workspace"},{"location":"02_linux_ros_principles/#ros-package","text":"Main unit to organize software in ROS Buildable and redistributable unit of ROS code Consists of (in the case of Python packages): package.xml file containing meta information about the package name version description dependencies etc. setup.py containing instructions for how to install the package setup.cfg is required when a package has executables, so ros2 run can find them /<package_name> - a directory with the same name as your package, used by ROS 2 tools to find your package, contains __init__.py Anything else ros2 run turtlesim turtlesim_node CMake For CMake packages (C++), the package contents will be different.","title":"ROS package"},{"location":"02_linux_ros_principles/#ros-node","text":"Executable part of ROS: python scripts compiled C++ code A process that performs computation Inter-node communication: ROS topics (streams) ROS parameter server Remote Procedure Calls (RPC) ROS services ROS actions Meant to operate at a fine-grained scale Typically, a robot control system consists of many nodes, like: Trajectory planning Localization Read sensory data Process sensory data Motor control User interface etc.","title":"ROS node"},{"location":"02_linux_ros_principles/#ros-build-system-colcon","text":"System for building software packages in ROS","title":"ROS build system---Colcon"},{"location":"02_linux_ros_principles/#environmental-setup-file","text":"setup.bash generated during init process of a new workspace extends shell environment ROS can find any resources that have been installed or built to that location source ~/catkin_ws/devel/setup.bash","title":"Environmental setup file"},{"location":"02_linux_ros_principles/#gyakorlat","text":"","title":"Gyakorlat"},{"location":"02_linux_ros_principles/#1-turtlesim","text":"Ind\u00edtsuk el a turtlesim_node -ot \u00e9s a turtle_teleop_key node-ot az al\u00e1bbi parancsokkal, k\u00fcl\u00f6-k\u00fcl\u00f6n termin\u00e1l ablakokban: Tip Terminator -ban Ctrl-Shift-O , Ctrl-Shift-E billenty\u0171 kombin\u00e1ci\u00f3kkal oszthatjuk tov\u00e1bb az adott ablakot. Ctrl-Shift-W bez\u00e1rja az akt\u00edv ablakot. ros2 run turtlesim turtlesim_node ros2 run turtlesim turtle_teleop_key Futtat\u00e1s megszak\u00edt\u00e1sa Ctrl-C Az al\u00e1bbi ROS parancsok futtat\u00e1sa hasznos inform\u00e1ci\u00f3kkal szolg\u00e1lhat: ros2 wtf ros2 node list ros2 node info /turtlesim ros2 topic list ros2 topic info /turtle1/cmd_vel ros2 interface show geometry_msgs/msg/Twist ros2 topic echo /turtle1/cmd_vel Az al\u00e1bbi paranccsal ind\u00edtsuk el az rqt_gui -t: ros2 run rqt_gui rqt_gui Jelen\u00edts\u00fck meg a fut\u00f3 node-okat \u00e9s topic-okat rqt_gui -ban: Plugins \u2192 Introspection \u2192 Node Graph. Publik\u00e1ljunk a /turtle1/cmd_vel topic-ba szint\u00e9n az rqt_gui felhaszn\u00e1l\u00e1s\u00e1val: Plugins \u2192 Topics \u2192 Message Publisher.","title":"1: Turtlesim"},{"location":"02_linux_ros_principles/#2-ros-2-workspace-letrehozasa","text":"Hozzunk l\u00e9tre \u00faj ROS2 workspace-t ros2_ws n\u00e9vvel. mkdir -p ~/ros2_ws/src","title":"2: ROS 2 workspace l\u00e9trehoz\u00e1sa"},{"location":"02_linux_ros_principles/#3-ros-2-package-letrehozasa","text":"Hozzunk l\u00e9tre \u00faj ROS2 package-et ros2_course n\u00e9vvel \u00e9s egy Hello World-del. cd ~/ros2_ws/src ros2 pkg create --build-type ament_python --node-name hello ros2_course Szintaxis ros2 pkg create --build-type ament_python <package_name> Build-elj\u00fck a workspace-t. cd ~/ros2_ws colcon build --symlink-install Symlink A --symlink-install opci\u00f3 az Install space-be belinkeli a forr\u00e1s script-eket, \u00edgy m\u00f3dos\u00edt\u00e1s ut\u00e1n nem kell \u00fajra build-eln\u00fcnk. A ~/.bashrc f\u00e1jl v\u00e9g\u00e9re illessz\u00fck be az al\u00e1bbi sort: source ~/ros2_ws/install/setup.bash Import\u00e1l\u00e1s QtCreator-ba New file or project \u2192 Other project \u2192 ROS Workspace. V\u00e1lasszuk ki a Colcon-t, mint Build System, \u00e9s a ros2_ws -t, mint Worksapce path. Import\u00e1l\u00e1s CLion-ba \u00c1ll\u00edtsuk be a Python interpretert Python 3.8-ra, /usr/bin/python3 . Adjuk hozz\u00e1 ak\u00f6vetkez\u0151 el\u00e9r\u00e9si utat: /opt/ros/foxy/lib/python3.8/site-packages . Hozzuk l\u00e9tre a compile_commands.json f\u00e1jlt a ~/ros2_ws/build k\u00f6nyvt\u00e1rban az al\u00e1bbi tartalommal: [ ] Tesztelj\u00fck a Hello World m\u0171k\u00f6d\u00e9s\u00e9t: ros2 run ros2_course hello","title":"3: ROS 2 package l\u00e9trehoz\u00e1sa"},{"location":"02_linux_ros_principles/#4-publisher-implementalasa-python-ban","text":"Navig\u00e1ljunk a ros2_ws/src/ros2_course/ros2_course mapp\u00e1ba \u00e9s hozzuk l\u00e9tre a talker.py f\u00e1jlt az al\u00e1bbi tartalommal. import rclpy from rclpy.node import Node from std_msgs.msg import String class MinimalPublisher ( Node ): def __init__ ( self ): super () . __init__ ( 'minimal_publisher' ) self . publisher_ = self . create_publisher ( String , 'chatter' , 10 ) timer_period = 0.5 # seconds self . timer = self . create_timer ( timer_period , self . timer_callback ) self . i = 0 def timer_callback ( self ): msg = String () msg . data = 'Hello World: %d ' % self . i self . publisher_ . publish ( msg ) self . get_logger () . info ( 'Publishing: \" %s \"' % msg . data ) self . i += 1 def main ( args = None ): rclpy . init ( args = args ) minimal_publisher = MinimalPublisher () rclpy . spin ( minimal_publisher ) # Destroy the node explicitly # (optional - otherwise it will be done automatically # when the garbage collector destroys the node object) minimal_publisher . destroy_node () rclpy . shutdown () if __name__ == '__main__' : main () A setup.py f\u00e1jlban adjunk meg egy \u00faj entry point-on: 'talker = ros3_course.talker:main' , Build-elj\u00fck \u00e9s futtassuk a node-ot: cd ~/ros2_ws colcon build --symlink-install ros2 run ros2_course talker Ellen\u0151rizz\u00fck le a node kimenet\u00e9t a ros2 topic echo parancs vagy az rqt_gui haszn\u00e1lat\u00e1val.","title":"4: Publisher implement\u00e1l\u00e1sa Python-ban"},{"location":"02_linux_ros_principles/#5-subscriber-implementalasa-python-ban","text":"Navig\u00e1ljunk a ros2_ws/src/ros2_course/ros2_course mapp\u00e1ba \u00e9s hozzuk l\u00e9tre a listener.py f\u00e1jlt az al\u00e1bbi tartalommal. import rclpy from rclpy.node import Node from std_msgs.msg import String class MinimalSubscriber ( Node ): def __init__ ( self ): super () . __init__ ( 'minimal_subscriber' ) self . subscription = self . create_subscription ( String , 'chatter' , self . listener_callback , 10 ) self . subscription # prevent unused variable warning def listener_callback ( self , msg ): self . get_logger () . info ( 'I heard msg: \" %s \"' % msg . data ) def main ( args = None ): rclpy . init ( args = args ) minimal_subscriber = MinimalSubscriber () rclpy . spin ( minimal_subscriber ) # Destroy the node explicitly # (optional - otherwise it will be done automatically # when the garbage collector destroys the node object) minimal_subscriber . destroy_node () rclpy . shutdown () if __name__ == '__main__' : main () A setup.py f\u00e1jlban adjunk meg egy \u00faj entry point-on: 'listener = ros3_course.listener:main' , Build-elj\u00fck \u00e9s futtassuk mind a 2 node-ot: cd ~/ros2_ws colcon build --symlink-install ros2 run ros2_course talker ros2 run ros2_course listener Az rqt_gui haszn\u00e1lat\u00e1val jelen\u00edttess\u00fck meg a fut\u00f3 rendszer node-jait \u00e9s topic-jait: ros2 run rqt_gui rqt_gui","title":"5: Subscriber implement\u00e1l\u00e1sa Python-ban"},{"location":"02_linux_ros_principles/#hasznos-linkek","text":"ROS 2 Tutorials What is a ROS 2 package?","title":"Hasznos linkek"},{"location":"03_python_principles/","text":"03. Python alapismeretek, ROS Publisher, ROS Subscriber Elm\u00e9let Python principles Interpreted, high-level programming language Name tribute to the comedy group Monty Python Powerful, still easy to learn, easy to use Readability Whitespace indentation Dynamically-typed Garbage colector and reference counting Object oriented programming Used in: AI, web applications, scientific computing, and many other areas python3 Python syntax import numpy as np import math class A : def __init__ ( self , name ): self . name = name def do_something ( self ): # will do something print ( self . name + \" is doing something.\" ) def count_to ( self , n ): # count to n, tell if the number is odd or even for i in range ( n ): if i % 2 == 0 : print ( i + \", it's even.\" ) else : print ( i + \", it's odd.\" ) if __name__ == \"__main__\" : a = A ( \"John\" ) a . do_something () a . count_to ( 10 ) Gyakorlat 1: Hello, World! Nyissunk meg egy termin\u00e1lt. Huzzuk l\u00e9tre a ~/catkin_ws/src/ros_course/scripts/ k\u00f6nyvt\u00e1runkban a hello.py f\u00e1jlt: cd catkin_ws/src/ros_course/scripts touch hello.py Nyissuk meg a hello.py f\u00e1jlt QtCreatorban, \u00edrjuk be a k\u00f6vetkez\u0151 sort a hello.py f\u00e1jlba: print ( \"Hello, World!\" ) Tip Aki gedit-et haszn\u00e1l: Preferences :arrow_forward: Editor :arrow_forward: Insert spaces instead of tabs. Futtassuk a f\u00e1jlt, termin\u00e1l: python3 hello.py Tip Ha hib\u00e1t kapunk, hogy a f\u00e1jl nem futtathat\u00f3, \u00e1ll\u00edtsuk be a futtat\u00e1si jogosults\u00e1got: chmod +x hello.py M\u00f3dos\u00edtsuk a programot \u00fagy, hogy a \"World\" sz\u00f3t a parancssori argumentumk\u00e9nt megadott sz\u00f3val helyettes\u00edtse: import sys msg = sys . argv [ 1 ] print ( \"Hello,\" , msg , \"!\" ) Futtassuk a f\u00e1jlt, termin\u00e1l: python3 hello.py John 2: Tekn\u0151c mozgat\u00e1sa egyenes ment\u00e9n \u00cdrjunk ROS node-ot, amely el\u0151re, egyenes ment\u00e9n megadott t\u00e1vols\u00e1gra mozgatja a tekn\u0151c\u00f6t. Nyissunk meg egy termin\u00e1lt. Huzzuk l\u00e9tre a ~/catkin_ws/src/ros_course/scripts k\u00f6nyvt\u00e1runkban a turtlesim_controller.py f\u00e1jlt: cd catkin_ws/src/ros_course/scripts touch turtlesim_controller.py A CMakeLists.txt -hez adjuk hozz\u00e1 a turtlesim_controller.py -t: catkin_install_python ( PROGRAMS scripts/talker.py scripts/listener.py scripts/turtlesim_controller.py DESTINATION ${ CATKIN_PACKAGE_BIN_DESTINATION } ) M\u00e1soljuk be a turtlesim_controller.py -ba a program v\u00e1z\u00e1t: import rospy import math class TurtlesimController : def __init__ ( self ): # Call init node only once rospy . init_node ( 'turtlesim_controller' , anonymous = True ) # Define publisher here def go_straight ( self , speed , distance , forward ): # Implement straght motion here if __name__ == '__main__' : # Init tc = TurtlesimController () # Send turtle on a straight line tc . go_straight ( 1 , 4 , True ) Ind\u00edtsunk egy egy turtlesim_node -ot, majd vizsg\u00e1ljuk meg a topic-ot, amellyel ir\u00e1ny\u00edthatjuk. H\u00e1rom k\u00fcl\u00f6n termin\u00e1lablakban: roscore rosrun turtlesim turtlesim_node rostopic list rostopic info /turtle1/cmd_vel rosmsg show geometry_msgs/Twist Import\u00e1ljuk a geometry_msgs/Twist \u00fczenett\u00edpust \u00e9s hozzuk l\u00e9tre a publishert a turtlesim_controller.py -ban: from geometry_msgs.msg import Twist #... self . twist_pub = rospy . Publisher ( '/turtle1/cmd_vel' , Twist , queue_size = 10 ) Implement\u00e1ljuk a go_straight met\u00f3dust. Sz\u00e1m\u00edtsuk ki, mennyi ideig tart, hogy a megadott t\u00e1vols\u00e1got a megadott sebess\u00e9ggel megtegye a tekn\u0151c. Publik\u00e1ljunk \u00fczenetet, amivel be\u00e1ll\u00edtjuk a sebess\u00e9get, majd v\u00e1rjunk a kisz\u00e1m\u00edtott ideig, ezut\u00e1n k\u00fcldj\u00fcnk \u00fajabb \u00fczenetet, amellyel null\u00e1zzuk a sebess\u00e9get. Egy kis seg\u00edts\u00e9g az API haszn\u00e1lat\u00e1hoz: # Create and publish msg vel_msg = Twist () if forward : vel_msg . linear . x = speed else : vel_msg . linear . x = - speed vel_msg . linear . y = 0 vel_msg . linear . z = 0 vel_msg . angular . x = 0 vel_msg . angular . y = 0 vel_msg . angular . z = 0 # Set loop rate rate = rospy . Rate ( 100 ) # Hz # Publish first msg and note time self . twist_pub . publish ( vel_msg ) t0 = rospy . Time . now () . to_sec () # Publish msg while the calculated time is up while ( some condition ... ) and not ( rospy . is_shutdown ()): self . twist_pub . publish ( vel_msg ) # ...and stuff rate . sleep () # loop rate # Set velocity to 0 vel_msg . linear . x = 0 self . twist_pub . publish ( vel_msg ) Futtassuk a node-ot: rosrun ros_course turtlesim_controller.py 3: Alakzatok rajol\u00e1sa Implement\u00e1ljunk adott sz\u00f6ggel t\u00f6rt\u00e9n\u0151 elfordul\u00e1st megval\u00f3s\u00edt\u00f3 met\u00f3dust a turtlesim_controller.py -ban, az egyenes mozg\u00e1sshoz hasonl\u00f3 m\u00f3don. def turn ( self , omega , angle , forward ): # Implement rotation here Implement\u00e1ljunk a tekn\u0151ccel n\u00e9gyzetet rajzoltat\u00f3 met\u00f3dust az egyenes mozg\u00e1st \u00e9s a fordul\u00e1st v\u00e9grehajt\u00f3 met\u00f3dusok felhaszn\u00e1l\u00e1s\u00e1val. def draw_square ( self , speed , omega , a ): Implement\u00e1ljunk a tekn\u0151ccel tetsz\u0151leges szab\u00e1lyos alakzatot rajzoltat\u00f3 met\u00f3dust az egyenes mozg\u00e1st \u00e9s a fordul\u00e1st v\u00e9grehajt\u00f3 met\u00f3dusok felhaszn\u00e1l\u00e1s\u00e1val. def draw_poly ( self , speed , omega , N , a ): 4: Go to funkci\u00f3 implement\u00e1l\u00e1sa Vizsg\u00e1ljuk meg a topic-ot, amelyen a turtlesim_node a pillanatnyi poz\u00edci\u00f3j\u00e1t publik\u00e1lja. rostopic list rostopic info /turtle1/pose rosmsg show turtlesim/Pose Defini\u00e1ljunk subscriber-t a topichoz \u00e9s \u00edrjuk meg a callback f\u00fcggv\u00e9nyt, majd implement\u00e1ljuk a go to funkci\u00f3t. # Imports from turtlesim.msg import Pose # Constructor self . pose_subscriber = rospy . Subscriber ( '/turtle1/pose' , Pose , self . cb_pose ) # New method for TurtlesimController def cb_pose ( self , msg ): self . pose = msg Implement\u00e1ljuk a go_to met\u00f3dust. Tesztelj\u00fck, h\u00edvjuk meg a main-b\u0151l. # ... # Go to method def go_to ( self , speed , omega , x , y ): # Stuff # Main if __name__ == '__main__' : # Init tc = TurtlesimController () # 1 sec sleep so subscriber can get msgs rospy . sleep ( 1 ) tc . go_to ( 1 , 2 , 2 , 8 ) tc . go_to ( 1 , 2 , 2 , 2 ) tc . go_to ( 1 , 2 , 3 , 4 ) tc . go_to ( 1 , 2 , 6 , 2 ) B\u00f3nusz: Advanced go to \u00cdrjunk ar\u00e1nyos szab\u00e1lyoz\u00f3t haszn\u00e1l\u00f3 go to funcki\u00f3t. Useful links For loops in python Some python functions Turtlesim documentation atan2","title":"3. Python alapismeretek,  ROS Publisher, ROS Subscriber"},{"location":"03_python_principles/#03-python-alapismeretek-ros-publisher-ros-subscriber","text":"","title":"03. Python alapismeretek, ROS Publisher, ROS Subscriber"},{"location":"03_python_principles/#elmelet","text":"","title":"Elm\u00e9let"},{"location":"03_python_principles/#python-principles","text":"Interpreted, high-level programming language Name tribute to the comedy group Monty Python Powerful, still easy to learn, easy to use Readability Whitespace indentation Dynamically-typed Garbage colector and reference counting Object oriented programming Used in: AI, web applications, scientific computing, and many other areas python3","title":"Python principles"},{"location":"03_python_principles/#python-syntax","text":"import numpy as np import math class A : def __init__ ( self , name ): self . name = name def do_something ( self ): # will do something print ( self . name + \" is doing something.\" ) def count_to ( self , n ): # count to n, tell if the number is odd or even for i in range ( n ): if i % 2 == 0 : print ( i + \", it's even.\" ) else : print ( i + \", it's odd.\" ) if __name__ == \"__main__\" : a = A ( \"John\" ) a . do_something () a . count_to ( 10 )","title":"Python syntax"},{"location":"03_python_principles/#gyakorlat","text":"","title":"Gyakorlat"},{"location":"03_python_principles/#1-hello-world","text":"Nyissunk meg egy termin\u00e1lt. Huzzuk l\u00e9tre a ~/catkin_ws/src/ros_course/scripts/ k\u00f6nyvt\u00e1runkban a hello.py f\u00e1jlt: cd catkin_ws/src/ros_course/scripts touch hello.py Nyissuk meg a hello.py f\u00e1jlt QtCreatorban, \u00edrjuk be a k\u00f6vetkez\u0151 sort a hello.py f\u00e1jlba: print ( \"Hello, World!\" ) Tip Aki gedit-et haszn\u00e1l: Preferences :arrow_forward: Editor :arrow_forward: Insert spaces instead of tabs. Futtassuk a f\u00e1jlt, termin\u00e1l: python3 hello.py Tip Ha hib\u00e1t kapunk, hogy a f\u00e1jl nem futtathat\u00f3, \u00e1ll\u00edtsuk be a futtat\u00e1si jogosults\u00e1got: chmod +x hello.py M\u00f3dos\u00edtsuk a programot \u00fagy, hogy a \"World\" sz\u00f3t a parancssori argumentumk\u00e9nt megadott sz\u00f3val helyettes\u00edtse: import sys msg = sys . argv [ 1 ] print ( \"Hello,\" , msg , \"!\" ) Futtassuk a f\u00e1jlt, termin\u00e1l: python3 hello.py John","title":"1: Hello, World!"},{"location":"03_python_principles/#2-teknoc-mozgatasa-egyenes-menten","text":"\u00cdrjunk ROS node-ot, amely el\u0151re, egyenes ment\u00e9n megadott t\u00e1vols\u00e1gra mozgatja a tekn\u0151c\u00f6t. Nyissunk meg egy termin\u00e1lt. Huzzuk l\u00e9tre a ~/catkin_ws/src/ros_course/scripts k\u00f6nyvt\u00e1runkban a turtlesim_controller.py f\u00e1jlt: cd catkin_ws/src/ros_course/scripts touch turtlesim_controller.py A CMakeLists.txt -hez adjuk hozz\u00e1 a turtlesim_controller.py -t: catkin_install_python ( PROGRAMS scripts/talker.py scripts/listener.py scripts/turtlesim_controller.py DESTINATION ${ CATKIN_PACKAGE_BIN_DESTINATION } ) M\u00e1soljuk be a turtlesim_controller.py -ba a program v\u00e1z\u00e1t: import rospy import math class TurtlesimController : def __init__ ( self ): # Call init node only once rospy . init_node ( 'turtlesim_controller' , anonymous = True ) # Define publisher here def go_straight ( self , speed , distance , forward ): # Implement straght motion here if __name__ == '__main__' : # Init tc = TurtlesimController () # Send turtle on a straight line tc . go_straight ( 1 , 4 , True ) Ind\u00edtsunk egy egy turtlesim_node -ot, majd vizsg\u00e1ljuk meg a topic-ot, amellyel ir\u00e1ny\u00edthatjuk. H\u00e1rom k\u00fcl\u00f6n termin\u00e1lablakban: roscore rosrun turtlesim turtlesim_node rostopic list rostopic info /turtle1/cmd_vel rosmsg show geometry_msgs/Twist Import\u00e1ljuk a geometry_msgs/Twist \u00fczenett\u00edpust \u00e9s hozzuk l\u00e9tre a publishert a turtlesim_controller.py -ban: from geometry_msgs.msg import Twist #... self . twist_pub = rospy . Publisher ( '/turtle1/cmd_vel' , Twist , queue_size = 10 ) Implement\u00e1ljuk a go_straight met\u00f3dust. Sz\u00e1m\u00edtsuk ki, mennyi ideig tart, hogy a megadott t\u00e1vols\u00e1got a megadott sebess\u00e9ggel megtegye a tekn\u0151c. Publik\u00e1ljunk \u00fczenetet, amivel be\u00e1ll\u00edtjuk a sebess\u00e9get, majd v\u00e1rjunk a kisz\u00e1m\u00edtott ideig, ezut\u00e1n k\u00fcldj\u00fcnk \u00fajabb \u00fczenetet, amellyel null\u00e1zzuk a sebess\u00e9get. Egy kis seg\u00edts\u00e9g az API haszn\u00e1lat\u00e1hoz: # Create and publish msg vel_msg = Twist () if forward : vel_msg . linear . x = speed else : vel_msg . linear . x = - speed vel_msg . linear . y = 0 vel_msg . linear . z = 0 vel_msg . angular . x = 0 vel_msg . angular . y = 0 vel_msg . angular . z = 0 # Set loop rate rate = rospy . Rate ( 100 ) # Hz # Publish first msg and note time self . twist_pub . publish ( vel_msg ) t0 = rospy . Time . now () . to_sec () # Publish msg while the calculated time is up while ( some condition ... ) and not ( rospy . is_shutdown ()): self . twist_pub . publish ( vel_msg ) # ...and stuff rate . sleep () # loop rate # Set velocity to 0 vel_msg . linear . x = 0 self . twist_pub . publish ( vel_msg ) Futtassuk a node-ot: rosrun ros_course turtlesim_controller.py","title":"2: Tekn\u0151c mozgat\u00e1sa egyenes ment\u00e9n"},{"location":"03_python_principles/#3-alakzatok-rajolasa","text":"Implement\u00e1ljunk adott sz\u00f6ggel t\u00f6rt\u00e9n\u0151 elfordul\u00e1st megval\u00f3s\u00edt\u00f3 met\u00f3dust a turtlesim_controller.py -ban, az egyenes mozg\u00e1sshoz hasonl\u00f3 m\u00f3don. def turn ( self , omega , angle , forward ): # Implement rotation here Implement\u00e1ljunk a tekn\u0151ccel n\u00e9gyzetet rajzoltat\u00f3 met\u00f3dust az egyenes mozg\u00e1st \u00e9s a fordul\u00e1st v\u00e9grehajt\u00f3 met\u00f3dusok felhaszn\u00e1l\u00e1s\u00e1val. def draw_square ( self , speed , omega , a ): Implement\u00e1ljunk a tekn\u0151ccel tetsz\u0151leges szab\u00e1lyos alakzatot rajzoltat\u00f3 met\u00f3dust az egyenes mozg\u00e1st \u00e9s a fordul\u00e1st v\u00e9grehajt\u00f3 met\u00f3dusok felhaszn\u00e1l\u00e1s\u00e1val. def draw_poly ( self , speed , omega , N , a ):","title":"3: Alakzatok rajol\u00e1sa"},{"location":"03_python_principles/#4-go-to-funkcio-implementalasa","text":"Vizsg\u00e1ljuk meg a topic-ot, amelyen a turtlesim_node a pillanatnyi poz\u00edci\u00f3j\u00e1t publik\u00e1lja. rostopic list rostopic info /turtle1/pose rosmsg show turtlesim/Pose Defini\u00e1ljunk subscriber-t a topichoz \u00e9s \u00edrjuk meg a callback f\u00fcggv\u00e9nyt, majd implement\u00e1ljuk a go to funkci\u00f3t. # Imports from turtlesim.msg import Pose # Constructor self . pose_subscriber = rospy . Subscriber ( '/turtle1/pose' , Pose , self . cb_pose ) # New method for TurtlesimController def cb_pose ( self , msg ): self . pose = msg Implement\u00e1ljuk a go_to met\u00f3dust. Tesztelj\u00fck, h\u00edvjuk meg a main-b\u0151l. # ... # Go to method def go_to ( self , speed , omega , x , y ): # Stuff # Main if __name__ == '__main__' : # Init tc = TurtlesimController () # 1 sec sleep so subscriber can get msgs rospy . sleep ( 1 ) tc . go_to ( 1 , 2 , 2 , 8 ) tc . go_to ( 1 , 2 , 2 , 2 ) tc . go_to ( 1 , 2 , 3 , 4 ) tc . go_to ( 1 , 2 , 6 , 2 )","title":"4: Go to funkci\u00f3 implement\u00e1l\u00e1sa"},{"location":"03_python_principles/#bonusz-advanced-go-to","text":"\u00cdrjunk ar\u00e1nyos szab\u00e1lyoz\u00f3t haszn\u00e1l\u00f3 go to funcki\u00f3t.","title":"B\u00f3nusz: Advanced go to"},{"location":"03_python_principles/#useful-links","text":"For loops in python Some python functions Turtlesim documentation atan2","title":"Useful links"},{"location":"04_git/","text":"04. Verzi\u00f3k\u00f6vet\u00e9s, Git Elm\u00e9let Version control, Git Track changes in a set of files Coordinating work among developers Who made what changes and when Revert back at any time Local and remote repos Take snapshots of files by making a commit Install sudo apt install git Basic commands git init # Initialize local git repo git add <file> # Add file/files to staging area git status # Check status of working tree and staging area git commit -m \"What I've done\" # Commit changes in index git push # Push to remote repository git pull # Pull latest changes from remote repo git branch <new_branch_name> git checkout <branch_name> git merge <branch_name> # Merge the branch into the current branch git config --global user.name \"Istvan Szabo\" git config --global user.email \"istvan.szabo@gmail.com\" Tip Personal token megjegyz\u00e9se: git config --global credential.helper store Tip Windows \u00e9s Linux \u00f3ra probl\u00e9ma megold\u00e1sa: timedatectl set-local-rtc 1 --adjust-system-clock GitHub git remote git clone <link> # Copy repo into a new directory # Add remote to repository: git remote add origin <link> git push -u origin master Some alternatives to GitHub GitLab, BitBucket, Launchpad, Phabricator Markdown Markup language, easy to read Text file \u2192 Formatted document Widespread usag, e.g., blogs, forums, documentations, readme files, GitHub Markdown Cheatsheet Gyakorlat 0: GitHub repo l\u00e9trehoz\u00e1sa Inicializ\u00e1ljunk egy lok\u00e1lis git repo-t a ros-course package-ben. Regisztr\u00e1ljunk GitHub-ra, majd hozzunk l\u00e9tre egy private repo-t a ros_course package sz\u00e1m\u00e1ra. \u00c1ll\u00edtsuk be a local repo-ban a remote-ot, majd push-oljuk a package tartalm\u00e1t.","title":"4. Verzi\u00f3k\u00f6vet\u00e9s, Git"},{"location":"04_git/#04-verziokovetes-git","text":"","title":"04. Verzi\u00f3k\u00f6vet\u00e9s, Git"},{"location":"04_git/#elmelet","text":"","title":"Elm\u00e9let"},{"location":"04_git/#version-control-git","text":"Track changes in a set of files Coordinating work among developers Who made what changes and when Revert back at any time Local and remote repos Take snapshots of files by making a commit","title":"Version control, Git"},{"location":"04_git/#install","text":"sudo apt install git","title":"Install"},{"location":"04_git/#basic-commands","text":"git init # Initialize local git repo git add <file> # Add file/files to staging area git status # Check status of working tree and staging area git commit -m \"What I've done\" # Commit changes in index git push # Push to remote repository git pull # Pull latest changes from remote repo git branch <new_branch_name> git checkout <branch_name> git merge <branch_name> # Merge the branch into the current branch git config --global user.name \"Istvan Szabo\" git config --global user.email \"istvan.szabo@gmail.com\" Tip Personal token megjegyz\u00e9se: git config --global credential.helper store Tip Windows \u00e9s Linux \u00f3ra probl\u00e9ma megold\u00e1sa: timedatectl set-local-rtc 1 --adjust-system-clock","title":"Basic commands"},{"location":"04_git/#github","text":"git remote git clone <link> # Copy repo into a new directory # Add remote to repository: git remote add origin <link> git push -u origin master Some alternatives to GitHub GitLab, BitBucket, Launchpad, Phabricator","title":"GitHub"},{"location":"04_git/#markdown","text":"Markup language, easy to read Text file \u2192 Formatted document Widespread usag, e.g., blogs, forums, documentations, readme files, GitHub Markdown Cheatsheet","title":"Markdown"},{"location":"04_git/#gyakorlat","text":"","title":"Gyakorlat"},{"location":"04_git/#0-github-repo-letrehozasa","text":"Inicializ\u00e1ljunk egy lok\u00e1lis git repo-t a ros-course package-ben. Regisztr\u00e1ljunk GitHub-ra, majd hozzunk l\u00e9tre egy private repo-t a ros_course package sz\u00e1m\u00e1ra. \u00c1ll\u00edtsuk be a local repo-ban a remote-ot, majd push-oljuk a package tartalm\u00e1t.","title":"0: GitHub repo l\u00e9trehoz\u00e1sa"},{"location":"05_da_vinci/","text":"05. Robotikai alapfogalmak, da Vinci seb\u00e9szrobot programoz\u00e1sa szimul\u00e1lt k\u00f6rnyezetben, ROS1-ROS2 bridge Elm\u00e9let Warning ZH1 (ROS alapok, publisher, subscriber. Python alapok. Robotikai alapfogalmak.) okt\u00f3ber 11. Merev test mozg\u00e1sa Def. Merev test Merevnek tekinthet\u0151 az a test, mely pontjainak t\u00e1vols\u00e1ga mozg\u00e1s sor\u00e1n nem v\u00e1ltozik, vagyis b\u00e1rmely k\u00e9t pontj\u00e1nak t\u00e1vols\u00e1ga id\u0151ben \u00e1lland\u00f3. Merev test alakja, t\u00e9rfogata szint\u00e9n \u00e1lland\u00f3. Merev test t\u00e9rbeli helyzete megadhat\u00f3 b\u00e1rmely 3 nem egy egyenesbe es\u0151 pontj\u00e1nak helyzet\u00e9vel. A test helyzet\u00e9t szeml\u00e9letesebben megadhatjuk egy tetsz\u0151leges pontj\u00e1nak 3 koordin\u00e1t\u00e1j\u00e1val (poz\u00edci\u00f3) \u00e9s a test orient\u00e1ci\u00f3j\u00e1val. Merev testek mozg\u00e1sai k\u00e9t elemi mozg\u00e1sfajt\u00e1b\u00f3l tev\u0151dnek \u00f6ssze: halad\u00f3 mozg\u00e1s (transzl\u00e1ci\u00f3) \u00e9s tengely k\u00f6r\u00fcli forg\u00e1s (rot\u00e1ci\u00f3) Transzl\u00e1ci\u00f3s mozg\u00e1s sor\u00e1n a test minden pontja egym\u00e1ssal p\u00e1rhuzamos, egybev\u00e1g\u00f3 p\u00e1ly\u00e1t \u00edr le, a test orient\u00e1ci\u00f3ja pedig nem v\u00e1ltozik. Rot\u00e1ci\u00f3 sor\u00e1n a forg\u00e1stengelyen l\u00e9v\u0151 pontok poz\u00edci\u00f3ja nem v\u00e1ltozik, a test t\u00f6bbi pontja pedig a forg\u00e1stengelyre mer\u0151leges s\u00edkokban k\u00f6rp\u00e1ly\u00e1n mozog. A merev test szabad mozg\u00e1sa is le\u00edrhat\u00f3 mint egyidej\u0171leg egy bizonyos tengely k\u00f6r\u00fcli forg\u00e1s \u00e9s egy halad\u00f3 mozg\u00e1s . 3D transzform\u00e1ci\u00f3k Poz\u00edci\u00f3: 3 elem\u0171 offszet vektor Orient\u00e1ci\u00f3: 3 x 3 rot\u00e1ci\u00f3s matrix tov\u00e1bbi orient\u00e1ci\u00f3 reprezent\u00e1ci\u00f3k: Euler-sz\u00f6gek, RPY, angle axis, quaternion Helyzet (pose): 4 \u00d7 4 transzform\u00e1ci\u00f3s m\u00e1rtrix Koordin\u00e1ta rendszer (frame): null pont, 3 tengely, 3 b\u00e1zis vektor, jobbk\u00e9z-szab\u00e1ly Homog\u00e9n transzform\u00e1ci\u00f3k: rot\u00e1ci\u00f3 \u00e9s transzl\u00e1ci\u00f3 egy\u00fctt pl. \\(\\mathbf{R}\\) rot\u00e1ci\u00f3 \u00e9s \\(\\mathbf{v}\\) transzl\u00e1ci\u00f3 eset\u00e9n: \\[ \\mathbf{T} = \\left[\\matrix{\\mathbf{R} & \\mathbf{v}\\\\\\mathbf{0} & 1 }\\right] = \\left[\\matrix{r_{1,1} & r_{1,2} & r_{1,3} & v_x\\\\r_{2,1} & r_{2,2} & r_{2,3} & v_y\\\\r_{3,1} & r_{3,2} & r_{3,3} & v_z\\\\\\ 0 & 0 & 0 & 1 }\\right] \\] Homog\u00e9n koordin\u00e1t\u00e1k: Vektor: 0-val eg\u00e9sz\u00edtj\u00fck ki, \\(\\mathbf{a_H}=\\left[\\matrix{\\mathbf{a} \\\\ 0}\\right]=\\left[\\matrix{a_x \\\\ a_y \\\\ a_z \\\\ 0}\\right]\\) Pont: 1-gyel eg\u00e9sz\u00edtj\u00fck ki, \\(\\mathbf{p_H}=\\left[\\matrix{\\mathbf{p} \\\\ 1}\\right]=\\left[\\matrix{p_x \\\\ p_y \\\\ p_z \\\\ 1}\\right]\\) Transzform\u00e1ci\u00f3k alkalmaz\u00e1sa egyszer\u0171bb: \\[ \\mathbf{q} = \\mathbf{R}\\mathbf{p} + \\mathbf{v} \\to \\left[\\matrix{\\mathbf{q} \\\\ 1}\\right] = \\left[\\matrix{\\mathbf{R} & \\mathbf{v}\\\\\\mathbf{0} & 1 }\\right]\\left[\\matrix{\\mathbf{p} \\\\ 1}\\right] \\] Szabads\u00e1gi fok (DoF): egym\u00e1st\u00f3l f\u00fcggetlen mennyis\u00e9gek sz\u00e1ma. Robotikai alapok Robotok fel\u00e9p\u00edt\u00e9se: szegmensek (segment, link) \u00e9s csukl\u00f3k (joints) Munkat\u00e9r (task space, cartesian space): H\u00e1romdimenzi\u00f3s t\u00e9r, ahol a feladat, trajekt\u00f3ri\u00e1k, akad\u00e1lyok, stb. defini\u00e1l\u00e1sra ker\u00fclnek. TCP (Tool Center Point): az end effektorhoz r\u00f6gz\u00edtett koordin\u00e1ta rendszer (frame) Base/world frame Csukl\u00f3t\u00e9r (joint space): A robot csukl\u00f3ihoz rendelt mennyis\u00e9gek, melyeket a robot alacsony szint\u0171 ir\u00e1ny\u00edt\u00f3 rendszere \u00e9rtelmezni k\u00e9pes. csukl\u00f3 koordin\u00e1t\u00e1k, sebess\u00e9gek, gyorsul\u00e1sok, nyomat\u00e9kok... Python libraries Numpy Python library High dimension arrays and matrices Mathematical functions import numpy as np # Creating ndarrays a = np . zeros ( 3 ) a . shape a . shape = ( 3 , 1 ) a = np . ones ( 5 ) a = np . empty ( 10 ) l = np . linspace ( 5 , 10 , 6 ) r = np . array ([ 1 , 2 ]) # ndarray from python list r = np . array ([[ 1 , 2 ],[ 3 , 4 ]]) type ( r ) # Indexing l [ 0 ] l [ 0 : 2 ] l [ - 1 ] r [:, 0 ] # Operations on ndarrays r_sin = np . sin ( r ) np . max ( r ) np . min ( r ) np . sum ( r ) np . mean ( r ) np . std ( r ) l < 7 l [ l < 7 ] np . where ( l < 7 ) p = np . linspace ( 1 , 5 , 6 ) q = np . linspace ( 10 , 14 , 6 ) s = p + q s = p * q s = p * 10 s = p + 10 s = p @ q # dot product s = r . T If not installed: pip3 install numpy Matplotlib Visualization in python Syntax similar to Matlab import numpy as np from matplotlib import pyplot as plt X = np . linspace ( - np . pi , np . pi , 256 ) C , S = np . cos ( X ), np . sin ( X ) plt . plot ( X , C ) plt . plot ( X , S ) plt . show () If not installed: pip3 install matplotlib Gyakorlat 1: Catkin workspace Telep\u00edts\u00fck a catkin build tools csomagot: sudo apt update sudo apt-get install python3-catkin-tools python3-osrf-pycommon Hozzuk l\u00e9tre a workspace-t: mkdir -p ~/catkin_ws/src cd ~/catkin_ws catkin init 2. dVRK install Ubuntu 20.04-en az al\u00e1bbi csomagokra lesz s\u00fcks\u00e9g: sudo apt install libxml2-dev libraw1394-dev libncurses5-dev qtcreator swig sox espeak cmake-curses-gui cmake-qt-gui git subversion gfortran libcppunit-dev libqt5xmlpatterns5-dev python3-wstool python3-catkin-tools python3-osrf-pycommon ros-noetic-rviz T\u00f6lts\u00fck le \u00e9s telep\u00edts\u00fck a dVRK-t (da Vinci Reserach Kit): cd ~/catkin_ws # go in the workspace wstool init src # we're going to use wstool to pull all the code from github catkin config --cmake-args -DCMAKE_BUILD_TYPE = Release # all code should be compiled in release mode cd src # go in source directory to pull code wstool merge https://raw.githubusercontent.com/jhu-dvrk/dvrk-ros/master/dvrk_ros.rosinstall # or replace master by devel wstool up # now wstool knows which repositories to pull, let's get the code cd ~/catkin_ws catkin build --summary # ... and finally compile everything Danger Soha ne haszn\u00e1ljuk a catkin build \u00e9s a catkin_make parancsokat ugyanabban a workspace-ben! Ind\u00edtsuk el a PSM1 (Patient Side Manipulator) RViz szimul\u00e1ci\u00f3j\u00e1t: source ~/catkin_ws/devel/setup.bash roslaunch dvrk_robot dvrk_arm_rviz.launch arm: = PSM1 config: = /home/ $( whoami ) /catkin_ws/src/cisst-saw/sawIntuitiveResearchKit/share/console/console-PSM1_KIN_SIMULATED.json --- 3. ROS1-ROS2 bridge build \u00e9s install ```bash chmod +x ros_setup.sh ``` Adjuk hozz\u00e1 az al\u00e1bbi sort a `~/.bashrc` f\u00e1jlhoz: ```bash export ROS_MASTER_URI=http://localhost:11311 ``` Szint\u00e9n a `~/.bashrc` f\u00e1jlban: kommentelj\u00fck ki a ROS2 source-ol\u00e1s\u00e1ra haszn\u00e1lt sorokat. ```bash # ROS 2 source /opt/ros/foxy/setup.bash source ~/ros2_ws/install/setup.bash source ~/doosan2_ws/install/setup.bash ``` ```bash sudo sh -c 'echo \"deb http://packages.ros.org/ros/ubuntu $(lsb_release -sc) main\" > /etc/apt/sources.list.d/ros-latest.list' sudo apt-key adv --keyserver 'hkp://keyserver.ubuntu.com:80' --recv-key C1CF6E31E6BADE8868B172B4F42ED6FBAB17C654 sudo apt update sudo apt install ros-foxy-ros1-bridge ``` Launch ```bash source ros_setup.sh -v 1 roslaunch dvrk_robot dvrk_arm_rviz.launch arm:=PSM1 config:=/home/$(whoami)/catkin_ws/src/cisst-saw/sawIntuitiveResearchKit/share/console/console-PSM1_KIN_SIMULATED.json ``` ```bash source ros_setup.sh -v b ros2 run ros1_bridge dynamic_bridge --bridge-all-topics ``` ```bash source ros_setup.sh -v 2 ros2 topic list ros2 topic echo /PSM1/measured_cp ``` 2. PSM subscriber implement\u00e1l\u00e1sa Nyissuk meg a workspace-t QtCreatorban, mint \u00faj ROS workspace. Hozzunk l\u00e9tre \u00faj python forr\u00e1sf\u00e1jlt psm_grasp.py n\u00e9vvel a ~/catkin_ws/src/ros_course/scripts mapp\u00e1ban. Adjuk meg a f\u00e1jl nev\u00e9t a CMakeLists.txt -ben a megszokott m\u00f3don. Vizsg\u00e1ljuk a szimul\u00e1tor m\u0171k\u00f6d\u00e9s\u00e9t a tanult prancsok ( rostopic list , rosrun rqt_graph rqt_graph , stb.) haszn\u00e1lat\u00e1val. A PSM a lenti topic-okban publik\u00e1lja a TCP-t (Tool Center Point) \u00e9s a csipesz pof\u00e1i \u00e1ltal bez\u00e1rt sz\u00f6get. Iratkozzunk fel ezekre a topic-okra, \u00edrassuk ki \u00e9s t\u00e1roljuk el a pillanatnyi \u00e1llapotot egy-egy v\u00e1ltoz\u00f3ban. /PSM1/measured_cp /PSM1/jaw/measured_js Build-elj\u00fcnk \u00e9s futtassuk a node-ot: cd ~/catkin_ws catkin build ros_course rosrun ros_course psm_grasp.py 3. PSM TCP mozgat\u00e1sa line\u00e1ris trajekt\u00f3ria ment\u00e9n A PSM a lenti topicok-ban v\u00e1rja a k\u00edv\u00e1nt TCP poz\u00edci\u00f3t \u00e9s a csipesz pof\u00e1i \u00e1ltal bez\u00e1rt sz\u00f6get. Hozzunk l\u00e9tre publishereket a psm_grasp.py f\u00e1jlban ezekhez a topicokhoz. /PSM1/servo_cp /PSM1/jaw/servo_jp \u00cdrjunk f\u00fcggv\u00e9nyt, amely line\u00e1ris trajekt\u00f3ria ment\u00e9n a k\u00edv\u00e1nt poz\u00edci\u00f3ba mozgatja a TCP-t. K\u00fcldj\u00fck az csipeszt a (0.0, 0.05, -0.12) poz\u00edci\u00f3ba, az orient\u00e1ci\u00f3t hagyjuk v\u00e1ltozatlanul. 0.01s legyen a mintav\u00e9teli id\u0151. def move_tcp_to ( self , target , v , dt ): \u00cdrjunk f\u00fcggv\u00e9nyt, amellyel a csipeszt tudjuk nyitni-z\u00e1rni, szint\u00e9n line\u00e1ris trajekt\u00f3ria haszn\u00e1lat\u00e1val. def move_jaw_to ( self , target , omega , dt ): 4. Dummy marker l\u00e9trehoz\u00e1sa Hozzunk l\u00e9tre \u00faj python forr\u00e1sf\u00e1jlt dummy_marker.py n\u00e9vvel a ~/catkin_ws/src/ros_course/scripts mapp\u00e1ban. Adjuk meg a f\u00e1jl nev\u00e9t a CMakeLists.txt -ben a megszokott m\u00f3don. Implement\u00e1junk python programot, amely markert publik\u00e1l (-0.05, 0.08, -0.12) poz\u00edci\u00f3val dummy_target_marker nev\u0171 topic-ban. A frame_id addattag \u00e9rt\u00e9ke legyen PSM1_psm_base_link . M\u00e1soljuk az al\u00e1bbi k\u00f3dot a dummy_marker.py f\u00e1jlba: import rospy from visualization_msgs.msg import Marker def marker ( position ): rospy . init_node ( 'dummy_target_publisher' , anonymous = True ) pub = rospy . Publisher ( 'dummy_target_marker' , Marker , queue_size = 10 ) rate = rospy . Rate ( 10 ) # 10hz i = 0 while not rospy . is_shutdown (): marker = Marker () marker . header . frame_id = 'PSM1_psm_base_link' marker . header . stamp = rospy . Time () marker . ns = \"dvrk_viz\" marker . id = i marker . type = Marker . SPHERE marker . action = Marker . MODIFY marker . pose . position . x = position [ 0 ] marker . pose . position . y = position [ 1 ] marker . pose . position . z = position [ 2 ] marker . pose . orientation . x = 0.0 marker . pose . orientation . y = 0.0 marker . pose . orientation . z = 0.0 marker . pose . orientation . w = 1.0 marker . scale . x = 0.008 marker . scale . y = 0.008 marker . scale . z = 0.008 marker . color . a = 1.0 # Don't forget to set the alpha! marker . color . r = 0.0 marker . color . g = 1.0 marker . color . b = 0.0 ; #rospy.loginfo(marker) pub . publish ( marker ) i = i + 1 rate . sleep () if __name__ == '__main__' : try : marker ([ - 0.05 , 0.08 , - 0.12 ]) except rospy . ROSInterruptException : pass Futtassuk a node-ot \u00e9s jelen\u00edts\u00fck meg a markert RViz-ben. 5. Marker megfog\u00e1sa Iratkozzunk fel a marker poz\u00edci\u00f3j\u00e1t k\u00fcld\u0151 topic-ra a psm_grasp.py -ban. M\u00f3dos\u00edtsuk a psm_grasp.py programot \u00fagy, hogy a csipesszel fogjuk meg a gener\u00e1lt markert. Note A haszn\u00e1lt szimul\u00e1tor hajlamos r\u00e1, hogy bizonyos \u00e9rt\u00e9kek \"beragadjanak\", ez\u00e9rt a program elej\u00e9n \u00e9rdemes az al\u00e1bbi sorok haszn\u00e1lat\u00e1val resetelni a kart: #Reset the arm psm . move_tcp_to ([ 0.0 , 0.0 , - 0.12 ], 0.01 , 0.01 ) psm . move_jaw_to ( 0.0 , 0.1 , 0.01 ) Hasznos linkek Download and compile dVRK Marker examples Numpy vector magnitude Numpy linspace https://industrial-training-master.readthedocs.io/en/melodic/_source/session7/ROS1-ROS2-bridge.html","title":"5. Robotikai alapismeretek, Seb\u00e9szrobot programoz\u00e1sa"},{"location":"05_da_vinci/#05-robotikai-alapfogalmak-da-vinci-sebeszrobot-programozasa-szimulalt-kornyezetben-ros1-ros2-bridge","text":"","title":"05. Robotikai alapfogalmak, da Vinci seb\u00e9szrobot programoz\u00e1sa szimul\u00e1lt k\u00f6rnyezetben, ROS1-ROS2 bridge"},{"location":"05_da_vinci/#elmelet","text":"Warning ZH1 (ROS alapok, publisher, subscriber. Python alapok. Robotikai alapfogalmak.) okt\u00f3ber 11.","title":"Elm\u00e9let"},{"location":"05_da_vinci/#merev-test-mozgasa","text":"Def. Merev test Merevnek tekinthet\u0151 az a test, mely pontjainak t\u00e1vols\u00e1ga mozg\u00e1s sor\u00e1n nem v\u00e1ltozik, vagyis b\u00e1rmely k\u00e9t pontj\u00e1nak t\u00e1vols\u00e1ga id\u0151ben \u00e1lland\u00f3. Merev test alakja, t\u00e9rfogata szint\u00e9n \u00e1lland\u00f3. Merev test t\u00e9rbeli helyzete megadhat\u00f3 b\u00e1rmely 3 nem egy egyenesbe es\u0151 pontj\u00e1nak helyzet\u00e9vel. A test helyzet\u00e9t szeml\u00e9letesebben megadhatjuk egy tetsz\u0151leges pontj\u00e1nak 3 koordin\u00e1t\u00e1j\u00e1val (poz\u00edci\u00f3) \u00e9s a test orient\u00e1ci\u00f3j\u00e1val. Merev testek mozg\u00e1sai k\u00e9t elemi mozg\u00e1sfajt\u00e1b\u00f3l tev\u0151dnek \u00f6ssze: halad\u00f3 mozg\u00e1s (transzl\u00e1ci\u00f3) \u00e9s tengely k\u00f6r\u00fcli forg\u00e1s (rot\u00e1ci\u00f3) Transzl\u00e1ci\u00f3s mozg\u00e1s sor\u00e1n a test minden pontja egym\u00e1ssal p\u00e1rhuzamos, egybev\u00e1g\u00f3 p\u00e1ly\u00e1t \u00edr le, a test orient\u00e1ci\u00f3ja pedig nem v\u00e1ltozik. Rot\u00e1ci\u00f3 sor\u00e1n a forg\u00e1stengelyen l\u00e9v\u0151 pontok poz\u00edci\u00f3ja nem v\u00e1ltozik, a test t\u00f6bbi pontja pedig a forg\u00e1stengelyre mer\u0151leges s\u00edkokban k\u00f6rp\u00e1ly\u00e1n mozog. A merev test szabad mozg\u00e1sa is le\u00edrhat\u00f3 mint egyidej\u0171leg egy bizonyos tengely k\u00f6r\u00fcli forg\u00e1s \u00e9s egy halad\u00f3 mozg\u00e1s .","title":"Merev test mozg\u00e1sa"},{"location":"05_da_vinci/#3d-transzformaciok","text":"Poz\u00edci\u00f3: 3 elem\u0171 offszet vektor Orient\u00e1ci\u00f3: 3 x 3 rot\u00e1ci\u00f3s matrix tov\u00e1bbi orient\u00e1ci\u00f3 reprezent\u00e1ci\u00f3k: Euler-sz\u00f6gek, RPY, angle axis, quaternion Helyzet (pose): 4 \u00d7 4 transzform\u00e1ci\u00f3s m\u00e1rtrix Koordin\u00e1ta rendszer (frame): null pont, 3 tengely, 3 b\u00e1zis vektor, jobbk\u00e9z-szab\u00e1ly Homog\u00e9n transzform\u00e1ci\u00f3k: rot\u00e1ci\u00f3 \u00e9s transzl\u00e1ci\u00f3 egy\u00fctt pl. \\(\\mathbf{R}\\) rot\u00e1ci\u00f3 \u00e9s \\(\\mathbf{v}\\) transzl\u00e1ci\u00f3 eset\u00e9n: \\[ \\mathbf{T} = \\left[\\matrix{\\mathbf{R} & \\mathbf{v}\\\\\\mathbf{0} & 1 }\\right] = \\left[\\matrix{r_{1,1} & r_{1,2} & r_{1,3} & v_x\\\\r_{2,1} & r_{2,2} & r_{2,3} & v_y\\\\r_{3,1} & r_{3,2} & r_{3,3} & v_z\\\\\\ 0 & 0 & 0 & 1 }\\right] \\] Homog\u00e9n koordin\u00e1t\u00e1k: Vektor: 0-val eg\u00e9sz\u00edtj\u00fck ki, \\(\\mathbf{a_H}=\\left[\\matrix{\\mathbf{a} \\\\ 0}\\right]=\\left[\\matrix{a_x \\\\ a_y \\\\ a_z \\\\ 0}\\right]\\) Pont: 1-gyel eg\u00e9sz\u00edtj\u00fck ki, \\(\\mathbf{p_H}=\\left[\\matrix{\\mathbf{p} \\\\ 1}\\right]=\\left[\\matrix{p_x \\\\ p_y \\\\ p_z \\\\ 1}\\right]\\) Transzform\u00e1ci\u00f3k alkalmaz\u00e1sa egyszer\u0171bb: \\[ \\mathbf{q} = \\mathbf{R}\\mathbf{p} + \\mathbf{v} \\to \\left[\\matrix{\\mathbf{q} \\\\ 1}\\right] = \\left[\\matrix{\\mathbf{R} & \\mathbf{v}\\\\\\mathbf{0} & 1 }\\right]\\left[\\matrix{\\mathbf{p} \\\\ 1}\\right] \\] Szabads\u00e1gi fok (DoF): egym\u00e1st\u00f3l f\u00fcggetlen mennyis\u00e9gek sz\u00e1ma.","title":"3D transzform\u00e1ci\u00f3k"},{"location":"05_da_vinci/#robotikai-alapok","text":"Robotok fel\u00e9p\u00edt\u00e9se: szegmensek (segment, link) \u00e9s csukl\u00f3k (joints) Munkat\u00e9r (task space, cartesian space): H\u00e1romdimenzi\u00f3s t\u00e9r, ahol a feladat, trajekt\u00f3ri\u00e1k, akad\u00e1lyok, stb. defini\u00e1l\u00e1sra ker\u00fclnek. TCP (Tool Center Point): az end effektorhoz r\u00f6gz\u00edtett koordin\u00e1ta rendszer (frame) Base/world frame Csukl\u00f3t\u00e9r (joint space): A robot csukl\u00f3ihoz rendelt mennyis\u00e9gek, melyeket a robot alacsony szint\u0171 ir\u00e1ny\u00edt\u00f3 rendszere \u00e9rtelmezni k\u00e9pes. csukl\u00f3 koordin\u00e1t\u00e1k, sebess\u00e9gek, gyorsul\u00e1sok, nyomat\u00e9kok...","title":"Robotikai alapok"},{"location":"05_da_vinci/#python-libraries","text":"","title":"Python libraries"},{"location":"05_da_vinci/#numpy","text":"Python library High dimension arrays and matrices Mathematical functions import numpy as np # Creating ndarrays a = np . zeros ( 3 ) a . shape a . shape = ( 3 , 1 ) a = np . ones ( 5 ) a = np . empty ( 10 ) l = np . linspace ( 5 , 10 , 6 ) r = np . array ([ 1 , 2 ]) # ndarray from python list r = np . array ([[ 1 , 2 ],[ 3 , 4 ]]) type ( r ) # Indexing l [ 0 ] l [ 0 : 2 ] l [ - 1 ] r [:, 0 ] # Operations on ndarrays r_sin = np . sin ( r ) np . max ( r ) np . min ( r ) np . sum ( r ) np . mean ( r ) np . std ( r ) l < 7 l [ l < 7 ] np . where ( l < 7 ) p = np . linspace ( 1 , 5 , 6 ) q = np . linspace ( 10 , 14 , 6 ) s = p + q s = p * q s = p * 10 s = p + 10 s = p @ q # dot product s = r . T If not installed: pip3 install numpy","title":"Numpy"},{"location":"05_da_vinci/#matplotlib","text":"Visualization in python Syntax similar to Matlab import numpy as np from matplotlib import pyplot as plt X = np . linspace ( - np . pi , np . pi , 256 ) C , S = np . cos ( X ), np . sin ( X ) plt . plot ( X , C ) plt . plot ( X , S ) plt . show () If not installed: pip3 install matplotlib","title":"Matplotlib"},{"location":"05_da_vinci/#gyakorlat","text":"","title":"Gyakorlat"},{"location":"05_da_vinci/#1-catkin-workspace","text":"Telep\u00edts\u00fck a catkin build tools csomagot: sudo apt update sudo apt-get install python3-catkin-tools python3-osrf-pycommon Hozzuk l\u00e9tre a workspace-t: mkdir -p ~/catkin_ws/src cd ~/catkin_ws catkin init","title":"1: Catkin workspace"},{"location":"05_da_vinci/#2-dvrk-install","text":"Ubuntu 20.04-en az al\u00e1bbi csomagokra lesz s\u00fcks\u00e9g: sudo apt install libxml2-dev libraw1394-dev libncurses5-dev qtcreator swig sox espeak cmake-curses-gui cmake-qt-gui git subversion gfortran libcppunit-dev libqt5xmlpatterns5-dev python3-wstool python3-catkin-tools python3-osrf-pycommon ros-noetic-rviz T\u00f6lts\u00fck le \u00e9s telep\u00edts\u00fck a dVRK-t (da Vinci Reserach Kit): cd ~/catkin_ws # go in the workspace wstool init src # we're going to use wstool to pull all the code from github catkin config --cmake-args -DCMAKE_BUILD_TYPE = Release # all code should be compiled in release mode cd src # go in source directory to pull code wstool merge https://raw.githubusercontent.com/jhu-dvrk/dvrk-ros/master/dvrk_ros.rosinstall # or replace master by devel wstool up # now wstool knows which repositories to pull, let's get the code cd ~/catkin_ws catkin build --summary # ... and finally compile everything Danger Soha ne haszn\u00e1ljuk a catkin build \u00e9s a catkin_make parancsokat ugyanabban a workspace-ben! Ind\u00edtsuk el a PSM1 (Patient Side Manipulator) RViz szimul\u00e1ci\u00f3j\u00e1t: source ~/catkin_ws/devel/setup.bash roslaunch dvrk_robot dvrk_arm_rviz.launch arm: = PSM1 config: = /home/ $( whoami ) /catkin_ws/src/cisst-saw/sawIntuitiveResearchKit/share/console/console-PSM1_KIN_SIMULATED.json ---","title":"2. dVRK install"},{"location":"05_da_vinci/#3-ros1-ros2-bridge-build-es-install","text":"```bash chmod +x ros_setup.sh ``` Adjuk hozz\u00e1 az al\u00e1bbi sort a `~/.bashrc` f\u00e1jlhoz: ```bash export ROS_MASTER_URI=http://localhost:11311 ``` Szint\u00e9n a `~/.bashrc` f\u00e1jlban: kommentelj\u00fck ki a ROS2 source-ol\u00e1s\u00e1ra haszn\u00e1lt sorokat. ```bash # ROS 2 source /opt/ros/foxy/setup.bash source ~/ros2_ws/install/setup.bash source ~/doosan2_ws/install/setup.bash ``` ```bash sudo sh -c 'echo \"deb http://packages.ros.org/ros/ubuntu $(lsb_release -sc) main\" > /etc/apt/sources.list.d/ros-latest.list' sudo apt-key adv --keyserver 'hkp://keyserver.ubuntu.com:80' --recv-key C1CF6E31E6BADE8868B172B4F42ED6FBAB17C654 sudo apt update sudo apt install ros-foxy-ros1-bridge ``` Launch ```bash source ros_setup.sh -v 1 roslaunch dvrk_robot dvrk_arm_rviz.launch arm:=PSM1 config:=/home/$(whoami)/catkin_ws/src/cisst-saw/sawIntuitiveResearchKit/share/console/console-PSM1_KIN_SIMULATED.json ``` ```bash source ros_setup.sh -v b ros2 run ros1_bridge dynamic_bridge --bridge-all-topics ``` ```bash source ros_setup.sh -v 2 ros2 topic list ros2 topic echo /PSM1/measured_cp ```","title":"3. ROS1-ROS2 bridge build \u00e9s install"},{"location":"05_da_vinci/#2-psm-subscriber-implementalasa","text":"Nyissuk meg a workspace-t QtCreatorban, mint \u00faj ROS workspace. Hozzunk l\u00e9tre \u00faj python forr\u00e1sf\u00e1jlt psm_grasp.py n\u00e9vvel a ~/catkin_ws/src/ros_course/scripts mapp\u00e1ban. Adjuk meg a f\u00e1jl nev\u00e9t a CMakeLists.txt -ben a megszokott m\u00f3don. Vizsg\u00e1ljuk a szimul\u00e1tor m\u0171k\u00f6d\u00e9s\u00e9t a tanult prancsok ( rostopic list , rosrun rqt_graph rqt_graph , stb.) haszn\u00e1lat\u00e1val. A PSM a lenti topic-okban publik\u00e1lja a TCP-t (Tool Center Point) \u00e9s a csipesz pof\u00e1i \u00e1ltal bez\u00e1rt sz\u00f6get. Iratkozzunk fel ezekre a topic-okra, \u00edrassuk ki \u00e9s t\u00e1roljuk el a pillanatnyi \u00e1llapotot egy-egy v\u00e1ltoz\u00f3ban. /PSM1/measured_cp /PSM1/jaw/measured_js Build-elj\u00fcnk \u00e9s futtassuk a node-ot: cd ~/catkin_ws catkin build ros_course rosrun ros_course psm_grasp.py","title":"2. PSM subscriber implement\u00e1l\u00e1sa"},{"location":"05_da_vinci/#3-psm-tcp-mozgatasa-linearis-trajektoria-menten","text":"A PSM a lenti topicok-ban v\u00e1rja a k\u00edv\u00e1nt TCP poz\u00edci\u00f3t \u00e9s a csipesz pof\u00e1i \u00e1ltal bez\u00e1rt sz\u00f6get. Hozzunk l\u00e9tre publishereket a psm_grasp.py f\u00e1jlban ezekhez a topicokhoz. /PSM1/servo_cp /PSM1/jaw/servo_jp \u00cdrjunk f\u00fcggv\u00e9nyt, amely line\u00e1ris trajekt\u00f3ria ment\u00e9n a k\u00edv\u00e1nt poz\u00edci\u00f3ba mozgatja a TCP-t. K\u00fcldj\u00fck az csipeszt a (0.0, 0.05, -0.12) poz\u00edci\u00f3ba, az orient\u00e1ci\u00f3t hagyjuk v\u00e1ltozatlanul. 0.01s legyen a mintav\u00e9teli id\u0151. def move_tcp_to ( self , target , v , dt ): \u00cdrjunk f\u00fcggv\u00e9nyt, amellyel a csipeszt tudjuk nyitni-z\u00e1rni, szint\u00e9n line\u00e1ris trajekt\u00f3ria haszn\u00e1lat\u00e1val. def move_jaw_to ( self , target , omega , dt ):","title":"3. PSM TCP mozgat\u00e1sa line\u00e1ris trajekt\u00f3ria ment\u00e9n"},{"location":"05_da_vinci/#4-dummy-marker-letrehozasa","text":"Hozzunk l\u00e9tre \u00faj python forr\u00e1sf\u00e1jlt dummy_marker.py n\u00e9vvel a ~/catkin_ws/src/ros_course/scripts mapp\u00e1ban. Adjuk meg a f\u00e1jl nev\u00e9t a CMakeLists.txt -ben a megszokott m\u00f3don. Implement\u00e1junk python programot, amely markert publik\u00e1l (-0.05, 0.08, -0.12) poz\u00edci\u00f3val dummy_target_marker nev\u0171 topic-ban. A frame_id addattag \u00e9rt\u00e9ke legyen PSM1_psm_base_link . M\u00e1soljuk az al\u00e1bbi k\u00f3dot a dummy_marker.py f\u00e1jlba: import rospy from visualization_msgs.msg import Marker def marker ( position ): rospy . init_node ( 'dummy_target_publisher' , anonymous = True ) pub = rospy . Publisher ( 'dummy_target_marker' , Marker , queue_size = 10 ) rate = rospy . Rate ( 10 ) # 10hz i = 0 while not rospy . is_shutdown (): marker = Marker () marker . header . frame_id = 'PSM1_psm_base_link' marker . header . stamp = rospy . Time () marker . ns = \"dvrk_viz\" marker . id = i marker . type = Marker . SPHERE marker . action = Marker . MODIFY marker . pose . position . x = position [ 0 ] marker . pose . position . y = position [ 1 ] marker . pose . position . z = position [ 2 ] marker . pose . orientation . x = 0.0 marker . pose . orientation . y = 0.0 marker . pose . orientation . z = 0.0 marker . pose . orientation . w = 1.0 marker . scale . x = 0.008 marker . scale . y = 0.008 marker . scale . z = 0.008 marker . color . a = 1.0 # Don't forget to set the alpha! marker . color . r = 0.0 marker . color . g = 1.0 marker . color . b = 0.0 ; #rospy.loginfo(marker) pub . publish ( marker ) i = i + 1 rate . sleep () if __name__ == '__main__' : try : marker ([ - 0.05 , 0.08 , - 0.12 ]) except rospy . ROSInterruptException : pass Futtassuk a node-ot \u00e9s jelen\u00edts\u00fck meg a markert RViz-ben.","title":"4. Dummy marker l\u00e9trehoz\u00e1sa"},{"location":"05_da_vinci/#5-marker-megfogasa","text":"Iratkozzunk fel a marker poz\u00edci\u00f3j\u00e1t k\u00fcld\u0151 topic-ra a psm_grasp.py -ban. M\u00f3dos\u00edtsuk a psm_grasp.py programot \u00fagy, hogy a csipesszel fogjuk meg a gener\u00e1lt markert. Note A haszn\u00e1lt szimul\u00e1tor hajlamos r\u00e1, hogy bizonyos \u00e9rt\u00e9kek \"beragadjanak\", ez\u00e9rt a program elej\u00e9n \u00e9rdemes az al\u00e1bbi sorok haszn\u00e1lat\u00e1val resetelni a kart: #Reset the arm psm . move_tcp_to ([ 0.0 , 0.0 , - 0.12 ], 0.01 , 0.01 ) psm . move_jaw_to ( 0.0 , 0.1 , 0.01 )","title":"5. Marker megfog\u00e1sa"},{"location":"05_da_vinci/#hasznos-linkek","text":"Download and compile dVRK Marker examples Numpy vector magnitude Numpy linspace https://industrial-training-master.readthedocs.io/en/melodic/_source/session7/ROS1-ROS2-bridge.html","title":"Hasznos linkek"},{"location":"06_roslaunch/","text":"06. Roslaunch, ROS param\u00e9ter szerver, Rosbag Elm\u00e9let Roslaunch Launch multiple nodes Also launches ROS master if not running Set parameters XML file format, .launch extension Example launch file <!-- dvrk_server.launch --> <!-- Launch the irob dVRK high-level robot controller. After start, it will wait for irob_msgs/Robot actions --> <launch> <group ns= \"saf\" > <arg name= \"arm_typ\" default= \"PSM2\" /> <arg name= \"arm_name\" default= \"arm_1\" /> <arg name= \"camera_registration_file\" default= \"registration_psm1.yaml\" /> <arg name= \"instrument_info_file\" default= \"prograsp_forceps.yaml\" /> <include file= \"$(find irob_robot)/config/dvrk_topic_names.xml\" /> <node name= \"robot_server_$(arg arm_typ)\" pkg= \"irob_robot\" type= \"robot_server_dvrk\" output= \"screen\" > <param name= \"arm_typ\" type= \"string\" value= \"$(arg arm_typ)\" /> <param name= \"arm_name\" type= \"string\" value= \"$(arg arm_name)\" /> <param name= \"home_joint_angles\" type= \"yaml\" value= \"[0.0, 0.0, 0.0, 0.0, 0.0, 0.0]\" /> <rosparam command= \"load\" file= \"$(find irob_robot)/config/$(arg camera_registration_file)\" /> <rosparam command= \"load\" file= \"$(find irob_robot)/config/$(arg instrument_info_file)\" /> </node> </group> </launch> Usage roslaunch package_name file.launch roslaunch irob_robot dvrk_server.launch arm_typ: = PSM1 ROS Parameter Server Nodes can store and retrieve parameters at runtime Shared dictionary Best use for configuration ROS naming convention Private parameters (~) Available data types: 32-bit integers booleans strings doubles iso8601 dates lists base64-encoded binary data Useful command: rosparam Python API # Call AFTER rospy.init_node() # Getting parameters global_name = rospy . get_param ( \"/global_name\" ) relative_name = rospy . get_param ( \"relative_name\" ) private_param = rospy . get_param ( '~private_name' ) default_param = rospy . get_param ( 'default_param' , 'default_value' ) # fetch a group (dictionary) of parameters gains = rospy . get_param ( 'gains' ) p , i , d = gains [ 'p' ], gains [ 'i' ], gains [ 'd' ] # Setting parameters # Using rospy and raw python objects rospy . set_param ( 'a_string' , 'baz' ) rospy . set_param ( '~private_int' , 2 ) rospy . set_param ( 'list_of_floats' , [ 1. , 2. , 3. , 4. ]) rospy . set_param ( 'bool_True' , True ) rospy . set_param ( 'gains' , { 'p' : 1 , 'i' : 2 , 'd' : 3 }) # Using rosparam and yaml strings rosparam . set_param ( 'a_string' , 'baz' ) rosparam . set_param ( '~private_int' , '2' ) rosparam . set_param ( 'list_of_floats' , \"[1., 2., 3., 4.]\" ) rosparam . set_param ( 'bool_True' , \"true\" ) rosparam . set_param ( 'gains' , \"{'p': 1, 'i': 2, 'd': 3}\" ) rospy . get_param ( 'gains/p' ) #should return 1 Roslaunch API <param name= \"arm_typ\" type= \"string\" value= \"ECM\" /> <param name= \"publish_frequency\" type= \"double\" value= \"10.0\" /> <rosparam command= \"load\" file= \"FILENAME\" /> YAML \u201cA human friendly data serialization standard for all programming languages\u201d # registration_identity.yaml t : [ 0.0 , 0.0 , 0.0 ] R : [ 1.0 , 0.0 , 0.0 , 0.0 , 1.0 , 0.0 , 0.0 , 0.0 , 1.0 ] Rosbag Record and playback ROS topics Command line tool API for C++ and Python rosbag record <topic_name> rosbag record --all rosbag play <filename.bag> Gyakorlat Figyelem! Az \u00f3ra v\u00e9g\u00e9n a forr\u00e1sk\u00f3dokat mindenkinek fel kell t\u00f6lteni Moodle-re egy zip arch\u00edvumba csomagolva! 1: Marker: K\u00f6rlap Hozzuk l\u00e9tre a szok\u00e1sos helyen a dummy_cylinder.py f\u00e1jlt. Publik\u00e1ljunk egy lapos, henger alak\u00fa markert (0.05, 0.05, -0.15) poz\u00edci\u00f3val \u00e9s 0.1 m sug\u00e1rral. 2: Launchfile \u00e9s param\u00e9terek a markerekhez Hozzunk l\u00e9tre f\u00e1jlt dummy_markers.launch n\u00e9vvel a ~catkin_ws/src/ros_course/launch mapp\u00e1ban. \u00cdrjunk launchf\u00e1jlt, amely mind a k\u00e9t dummy marker publisher-t elind\u00edtja. M\u00f3dos\u00edtsuk a launchf\u00e1jlt \u00e9s a Python szkripteket \u00fagy, hogy a dummy marker publisher-ek a marker poz\u00edci\u00f3j\u00e1t ROS param\u00e9terk\u00e9nt kapj\u00e1k meg, mely a roslaunch parancssori argumentumak\u00e9nt is m\u00f3dos\u00edthat\u00f3. A markerek poz\u00edci\u00f3j\u00e1nak legyen default \u00e9rt\u00e9ke is, g\u00f6mb: (-0.05, 0.1, -0.12), k\u00f6rlap: (0.05, 0.05, -0.15). Hozzunk l\u00e9tre YAML f\u00e1jlt, amelyb\u0151l a k\u00f6rlap marker m\u00e9rete \u00e9s sz\u00edne ker\u00fcl beolvas\u00e1sra. 3: Navig\u00e1ci\u00f3 a k\u00f6rlap pereme ment\u00e9n Hozzunk l\u00e9tre launchf\u00e1jlt psm_grasp.launch n\u00e9vvel a psm_grasp.py szkripthez. A dt, sebess\u00e9g \u00e9s a pof\u00e1k sz\u00f6gsebess\u00e9ge ROS param\u00e9terk\u00e9nt legyen \u00e1ll\u00edthat\u00f3. Futtassuk a psm_grasp.launch -ot k\u00fcl\u00f6nb\u00f6z\u0151 marker poz\u00edci\u00f3k mellett. M\u00f3dos\u00edtsuk a node-ot \u00fagy, hogy a g\u00f6mb marker megragad\u00e1sa el\u0151tt navig\u00e1ljon k\u00f6rbe a korong alak\u00fa marker perem\u00e9n. 4: Ment\u00e9s rosbag-be Az el\u0151z\u0151 feladatban implement\u00e1lt program fut\u00e1sa k\u00f6zben r\u00f6gz\u00edts\u00fck a topic-ok tartalm\u00e1t egy rosbag f\u00e1jlba. rosbag record --all Telep\u00edts\u00fck az rqt csomagot. sudo apt-get update sudo apt-get install ros-noetic-rqt sudo apt-get install ros-noetic-rqt-common-plugins J\u00e1tsszuk vissza a rosbag f\u00e1jlt \u00e9s jelen\u00edts\u00fck meg a PSM v\u00e9gpontj\u00e1nak koordin\u00e1t\u00e1it rqt_plot seg\u00edts\u00e9g\u00e9vel. rosbag play <filename.bag> rostopic echo /PSM1/measured_cp Hasznos linkek Roslaunch ROS Parameter Server Python API for the ROS Parameter Server tag in roslaunch Rosparam YAML Rosbag rqt_plot","title":"6. Roslaunch, saj\u00e1t \u00fczenetek, action, service"},{"location":"06_roslaunch/#06-roslaunch-ros-parameter-szerver-rosbag","text":"","title":"06. Roslaunch, ROS param\u00e9ter szerver, Rosbag"},{"location":"06_roslaunch/#elmelet","text":"","title":"Elm\u00e9let"},{"location":"06_roslaunch/#roslaunch","text":"Launch multiple nodes Also launches ROS master if not running Set parameters XML file format, .launch extension","title":"Roslaunch"},{"location":"06_roslaunch/#example-launch-file","text":"<!-- dvrk_server.launch --> <!-- Launch the irob dVRK high-level robot controller. After start, it will wait for irob_msgs/Robot actions --> <launch> <group ns= \"saf\" > <arg name= \"arm_typ\" default= \"PSM2\" /> <arg name= \"arm_name\" default= \"arm_1\" /> <arg name= \"camera_registration_file\" default= \"registration_psm1.yaml\" /> <arg name= \"instrument_info_file\" default= \"prograsp_forceps.yaml\" /> <include file= \"$(find irob_robot)/config/dvrk_topic_names.xml\" /> <node name= \"robot_server_$(arg arm_typ)\" pkg= \"irob_robot\" type= \"robot_server_dvrk\" output= \"screen\" > <param name= \"arm_typ\" type= \"string\" value= \"$(arg arm_typ)\" /> <param name= \"arm_name\" type= \"string\" value= \"$(arg arm_name)\" /> <param name= \"home_joint_angles\" type= \"yaml\" value= \"[0.0, 0.0, 0.0, 0.0, 0.0, 0.0]\" /> <rosparam command= \"load\" file= \"$(find irob_robot)/config/$(arg camera_registration_file)\" /> <rosparam command= \"load\" file= \"$(find irob_robot)/config/$(arg instrument_info_file)\" /> </node> </group> </launch>","title":"Example launch file"},{"location":"06_roslaunch/#usage","text":"roslaunch package_name file.launch roslaunch irob_robot dvrk_server.launch arm_typ: = PSM1","title":"Usage"},{"location":"06_roslaunch/#ros-parameter-server","text":"Nodes can store and retrieve parameters at runtime Shared dictionary Best use for configuration ROS naming convention Private parameters (~) Available data types: 32-bit integers booleans strings doubles iso8601 dates lists base64-encoded binary data Useful command: rosparam","title":"ROS Parameter Server"},{"location":"06_roslaunch/#python-api","text":"# Call AFTER rospy.init_node() # Getting parameters global_name = rospy . get_param ( \"/global_name\" ) relative_name = rospy . get_param ( \"relative_name\" ) private_param = rospy . get_param ( '~private_name' ) default_param = rospy . get_param ( 'default_param' , 'default_value' ) # fetch a group (dictionary) of parameters gains = rospy . get_param ( 'gains' ) p , i , d = gains [ 'p' ], gains [ 'i' ], gains [ 'd' ] # Setting parameters # Using rospy and raw python objects rospy . set_param ( 'a_string' , 'baz' ) rospy . set_param ( '~private_int' , 2 ) rospy . set_param ( 'list_of_floats' , [ 1. , 2. , 3. , 4. ]) rospy . set_param ( 'bool_True' , True ) rospy . set_param ( 'gains' , { 'p' : 1 , 'i' : 2 , 'd' : 3 }) # Using rosparam and yaml strings rosparam . set_param ( 'a_string' , 'baz' ) rosparam . set_param ( '~private_int' , '2' ) rosparam . set_param ( 'list_of_floats' , \"[1., 2., 3., 4.]\" ) rosparam . set_param ( 'bool_True' , \"true\" ) rosparam . set_param ( 'gains' , \"{'p': 1, 'i': 2, 'd': 3}\" ) rospy . get_param ( 'gains/p' ) #should return 1","title":"Python API"},{"location":"06_roslaunch/#roslaunch-api","text":"<param name= \"arm_typ\" type= \"string\" value= \"ECM\" /> <param name= \"publish_frequency\" type= \"double\" value= \"10.0\" /> <rosparam command= \"load\" file= \"FILENAME\" />","title":"Roslaunch API"},{"location":"06_roslaunch/#yaml","text":"\u201cA human friendly data serialization standard for all programming languages\u201d # registration_identity.yaml t : [ 0.0 , 0.0 , 0.0 ] R : [ 1.0 , 0.0 , 0.0 , 0.0 , 1.0 , 0.0 , 0.0 , 0.0 , 1.0 ]","title":"YAML"},{"location":"06_roslaunch/#rosbag","text":"Record and playback ROS topics Command line tool API for C++ and Python rosbag record <topic_name> rosbag record --all rosbag play <filename.bag>","title":"Rosbag"},{"location":"06_roslaunch/#gyakorlat","text":"Figyelem! Az \u00f3ra v\u00e9g\u00e9n a forr\u00e1sk\u00f3dokat mindenkinek fel kell t\u00f6lteni Moodle-re egy zip arch\u00edvumba csomagolva!","title":"Gyakorlat"},{"location":"06_roslaunch/#1-marker-korlap","text":"Hozzuk l\u00e9tre a szok\u00e1sos helyen a dummy_cylinder.py f\u00e1jlt. Publik\u00e1ljunk egy lapos, henger alak\u00fa markert (0.05, 0.05, -0.15) poz\u00edci\u00f3val \u00e9s 0.1 m sug\u00e1rral.","title":"1: Marker: K\u00f6rlap"},{"location":"06_roslaunch/#2-launchfile-es-parameterek-a-markerekhez","text":"Hozzunk l\u00e9tre f\u00e1jlt dummy_markers.launch n\u00e9vvel a ~catkin_ws/src/ros_course/launch mapp\u00e1ban. \u00cdrjunk launchf\u00e1jlt, amely mind a k\u00e9t dummy marker publisher-t elind\u00edtja. M\u00f3dos\u00edtsuk a launchf\u00e1jlt \u00e9s a Python szkripteket \u00fagy, hogy a dummy marker publisher-ek a marker poz\u00edci\u00f3j\u00e1t ROS param\u00e9terk\u00e9nt kapj\u00e1k meg, mely a roslaunch parancssori argumentumak\u00e9nt is m\u00f3dos\u00edthat\u00f3. A markerek poz\u00edci\u00f3j\u00e1nak legyen default \u00e9rt\u00e9ke is, g\u00f6mb: (-0.05, 0.1, -0.12), k\u00f6rlap: (0.05, 0.05, -0.15). Hozzunk l\u00e9tre YAML f\u00e1jlt, amelyb\u0151l a k\u00f6rlap marker m\u00e9rete \u00e9s sz\u00edne ker\u00fcl beolvas\u00e1sra.","title":"2: Launchfile \u00e9s param\u00e9terek a markerekhez"},{"location":"06_roslaunch/#3-navigacio-a-korlap-pereme-menten","text":"Hozzunk l\u00e9tre launchf\u00e1jlt psm_grasp.launch n\u00e9vvel a psm_grasp.py szkripthez. A dt, sebess\u00e9g \u00e9s a pof\u00e1k sz\u00f6gsebess\u00e9ge ROS param\u00e9terk\u00e9nt legyen \u00e1ll\u00edthat\u00f3. Futtassuk a psm_grasp.launch -ot k\u00fcl\u00f6nb\u00f6z\u0151 marker poz\u00edci\u00f3k mellett. M\u00f3dos\u00edtsuk a node-ot \u00fagy, hogy a g\u00f6mb marker megragad\u00e1sa el\u0151tt navig\u00e1ljon k\u00f6rbe a korong alak\u00fa marker perem\u00e9n.","title":"3: Navig\u00e1ci\u00f3 a k\u00f6rlap pereme ment\u00e9n"},{"location":"06_roslaunch/#4-mentes-rosbag-be","text":"Az el\u0151z\u0151 feladatban implement\u00e1lt program fut\u00e1sa k\u00f6zben r\u00f6gz\u00edts\u00fck a topic-ok tartalm\u00e1t egy rosbag f\u00e1jlba. rosbag record --all Telep\u00edts\u00fck az rqt csomagot. sudo apt-get update sudo apt-get install ros-noetic-rqt sudo apt-get install ros-noetic-rqt-common-plugins J\u00e1tsszuk vissza a rosbag f\u00e1jlt \u00e9s jelen\u00edts\u00fck meg a PSM v\u00e9gpontj\u00e1nak koordin\u00e1t\u00e1it rqt_plot seg\u00edts\u00e9g\u00e9vel. rosbag play <filename.bag> rostopic echo /PSM1/measured_cp","title":"4: Ment\u00e9s rosbag-be"},{"location":"06_roslaunch/#hasznos-linkek","text":"Roslaunch ROS Parameter Server Python API for the ROS Parameter Server tag in roslaunch Rosparam YAML Rosbag rqt_plot","title":"Hasznos linkek"},{"location":"07_robotics_principles/","text":"07. Kinematika, inverz kienamtika, Szimul\u00e1lt robotkar programoz\u00e1sa csukl\u00f3-, \u00e9s munkat\u00e9rben Warning ZH2 (Roslaunch, ROS param\u00e9ter szerver. Kinematika, inverz kinematika.) \u00e9s a K\u00f6telez\u0151 program bemutat\u00e1s december 6. Ism\u00e9tl\u00e9s 3D transzform\u00e1ci\u00f3k Poz\u00edci\u00f3: 3 elem\u0171 offszet vektor Orient\u00e1ci\u00f3: 3 x 3 rot\u00e1ci\u00f3s matrix tov\u00e1bbi orient\u00e1ci\u00f3 reprezent\u00e1ci\u00f3k: Euler-sz\u00f6gek, RPY, angle axis, quaternion Helyzet (pose): 4 \u00d7 4 transzform\u00e1ci\u00f3s m\u00e1rtrix Koordin\u00e1ta rendszer (frame): null pont, 3 tengely, 3 b\u00e1zis vektor, jobbk\u00e9z-szab\u00e1ly Homog\u00e9n transzform\u00e1ci\u00f3k: rot\u00e1ci\u00f3 \u00e9s transzl\u00e1ci\u00f3 egy\u00fctt pl. \\(\\mathbf{R}\\) rot\u00e1ci\u00f3 \u00e9s \\(\\mathbf{v}\\) transzl\u00e1ci\u00f3 eset\u00e9n: \\[ \\mathbf{T} = \\left[\\matrix{\\mathbf{R} & \\mathbf{v}\\\\\\mathbf{0} & 1 }\\right] = \\left[\\matrix{r_{1,1} & r_{1,2} & r_{1,3} & v_x\\\\r_{2,1} & r_{2,2} & r_{2,3} & v_y\\\\r_{3,1} & r_{3,2} & r_{3,3} & v_z\\\\\\ 0 & 0 & 0 & 1 }\\right] \\] Homog\u00e9n koordin\u00e1t\u00e1k: Vektor: 0-val eg\u00e9sz\u00edtj\u00fck ki, \\(\\mathbf{a_H}=\\left[\\matrix{\\mathbf{a} \\\\ 0}\\right]=\\left[\\matrix{a_x \\\\ a_y \\\\ a_z \\\\ 0}\\right]\\) Pont: 1-gyel eg\u00e9sz\u00edtj\u00fck ki, \\(\\mathbf{p_H}=\\left[\\matrix{\\mathbf{p} \\\\ 1}\\right]=\\left[\\matrix{p_x \\\\ p_y \\\\ p_z \\\\ 1}\\right]\\) Transzform\u00e1ci\u00f3k alkalmaz\u00e1sa egyszer\u0171bb: \\[ \\mathbf{q} = \\mathbf{R}\\mathbf{p} + \\mathbf{v} \\to \\left[\\matrix{\\mathbf{q} \\\\ 1}\\right] = \\left[\\matrix{\\mathbf{R} & \\mathbf{v}\\\\\\mathbf{0} & 1 }\\right]\\left[\\matrix{\\mathbf{p} \\\\ 1}\\right] \\] Szabads\u00e1gi fok (DoF): egym\u00e1st\u00f3l f\u00fcggetlen mennyis\u00e9gek sz\u00e1ma. Robotikai alapok Robotok fel\u00e9p\u00edt\u00e9se: szegmensek (segment, link) \u00e9s csukl\u00f3k (joints) Munkat\u00e9r (task space, cartesian space): H\u00e1romdimenzi\u00f3s t\u00e9r, ahol a feladat, trajekt\u00f3ri\u00e1k, akad\u00e1lyok, stb. defini\u00e1l\u00e1sra ker\u00fclnek. TCP (Tool Center Point): az end effektorhoz r\u00f6gz\u00edtett koordin\u00e1ta rendszer (frame) Base/world frame Csukl\u00f3t\u00e9r (joint space): A robot csukl\u00f3ihoz rendelt mennyis\u00e9gek, melyeket a robot alacsony szint\u0171 ir\u00e1ny\u00edt\u00f3 rendszere \u00e9rtelmezni k\u00e9pes. csukl\u00f3 koordin\u00e1t\u00e1k, sebess\u00e9gek, gyorsul\u00e1sok, nyomat\u00e9kok... Elm\u00e9let Kinematika, inverz kinematika Def. Kinematika A TCP (vagy b\u00e1rmi m\u00e1s) helyzet\u00e9nek kisz\u00e1m\u00edt\u00e1sa a csukl\u00f3 koordin\u00e1t\u00e1kb\u00f3l. Kinematikai modell Denavit--Hartenberg (HD) konvenci\u00f3 URDF (Unified Robotics Description Format, XML-alap\u00fa) Ha a segmensekhez rendelt koordin\u00e1ta rendszerek rendre \\(base, 1, 2, 3, ..., TCP\\) , a szomsz\u00e9dos \\(i\\) and \\(i+1\\) szegmensek k\u00f6z\u00f6tti transzfomr\u00e1ci\u00f3k \\(T_{i+1,i}(q_{i+1})\\) (mely a k\u00f6zbez\u00e1rt csukl\u00f3 sz\u00f6g\u00e9nek f\u00fcggv\u00e9nye), a transzfomr\u00e1ci\u00f3 a base frame \u00e9s a TCP k\u00f6z\u00f6tt fel\u00edrhat\u00f3 ( \\(n\\) csukl\u00f3s robotra): \\[ T_{TCP,base}(q_1, \\cdots, q_n) = T_{TCP,n-1}(q_{n}) \\cdot T_{n-1,n-2}(q_{n-1}) \\cdots T_{2,1}(q_2) \\cdot T_{1,base}(q_1) \\cdot base \\] Def. Inverz kinematika Csukl\u00f3 koordin\u00e1t\u00e1k kisz\u00e1m\u00edt\u00e1sa a (k\u00edv\u00e1nt) TCP (vagy b\u00e1rmi m\u00e1s) pose el\u00e9r\u00e9s\u00e9hez. Differenci\u00e1lis inverz kinematika Def. Differenci\u00e1lis inverz kinematika A csukl\u00f3 koordin\u00e1t\u00e1k mely v\u00e1ltoztat\u00e1sa \u00e9ri el a k\u00edv\u00e1nt, kis m\u00e9rt\u00e9k\u0171 v\u00e1ltoz\u00e1st a TCP helyzet\u00e9ben (rot\u00e1ci\u00f3 \u00e9s transzl\u00e1ci\u00f3). Jacobi-m\u00e1trix (Jacobian): egy vektor\u00e9rt\u00e9k\u0171 f\u00fcggv\u00e9ny els\u0151rend\u0171 parci\u00e1lis deriv\u00e1ltjait tartalmaz\u00f3 m\u00e1trix. \\[ \\mathbf{J} = \\left[\\matrix{\\frac{\\partial x_1}{\\partial q_1} & \\frac{\\partial x_1}{\\partial q_2} &\\frac{\\partial x_1}{\\partial q_3} & \\dots &\\frac{\\partial x_1}{\\partial q_n} \\\\ \\frac{\\partial x_2}{\\partial q_1} & \\frac{\\partial x_2}{\\partial q_2} &\\frac{\\partial x_2} {\\partial q_3} & \\dots &\\frac{\\partial x_2}{\\partial q_n} \\\\ \\frac{\\partial x_3}{\\partial q_1} & \\frac{\\partial x_3}{\\partial q_2} &\\frac{\\partial x_3}{\\partial q_3} & \\dots &\\frac{\\partial x_3}{\\partial q_n} \\\\ \\vdots &\\vdots &\\vdots &\\ddots &\\vdots \\\\ \\frac{\\partial x_m}{\\partial q_1} & \\frac{\\partial x_m}{\\partial q_2} &\\frac{\\partial x_m}{\\partial q_3} & \\dots &\\frac{\\partial x_m}{\\partial q_n} \\\\}\\right] \\] Jacobi-m\u00e1trix jelent\u0151s\u00e9ge robotik\u00e1ban : megadja az \u00f6sszef\u00fcgg\u00e9st a csukl\u00f3sebess\u00e9gek \u00e9s a TCP sebess\u00e9ge k\u00f6z\u00f6tt. \\[ \\left[\\matrix{\\mathbf{v} \\\\ \\mathbf{\\omega}}\\right] =\\mathbf{J}(\\mathbf{q})\\cdot \\mathbf{\\dot{q}} \\] Inverz kinematika Jacobi inverz felhaszn\u00e1l\u00e1s\u00e1val Sz\u00e1m\u00edtsuk ki a k\u00edv\u00e1nt \u00e9s az aktu\u00e1lis poz\u00edci\u00f3 k\u00fcl\u00f6nbs\u00e9g\u00e9t: \\(\\Delta\\mathbf{r} = \\mathbf{r}_{desired} - \\mathbf{r}_0\\) Sz\u00e1m\u00edtsuk ki a rot\u00e1ci\u00f3k k\u00fcl\u00f6nbs\u00e9g\u00e9t: \\(\\Delta\\mathbf{R} = \\mathbf{R}_{desired}\\mathbf{R}_{0}^{T}\\) , majd konvert\u00e1ljuk \u00e1t axis angle reprezent\u00e1ci\u00f3ba \\((\\mathbf{t},\\phi)\\) Sz\u00e1m\u00edtsuk ki \\(\\Delta\\mathbf{ q}=\\mathbf{J}^{-1}(\\mathbf{q_0})\\cdot \\left[\\matrix{k_1 \\cdot \\Delta\\mathbf{r} \\\\ k_2 \\cdot \\phi \\cdot \\mathbf{t}}\\right]\\) , ahol az inverz lehet pszeudo-inverz, vagy transzpon\u00e1lt \\(\\mathbf{q}_{better} = \\mathbf{q}_{0} + \\Delta\\mathbf{q}\\) Gyakorlat 1: Install rrr-arm Telep\u00edts\u00fck a dependency-ket. sudo apt update sudo apt-get install libpoco-dev sudo apt-get install ros-foxy-control-msgs ros-foxy-realtime-tools ros-foxy-xacro ros-foxy-joint-state-publisher-gui pip3 install kinpy Tip A kinpy csomag forr\u00e1s\u00e1t is t\u00f6lts\u00fck le, hasznos lehet az API meg\u00e9rt\u00e9se szempontj\u00e1b\u00f3l: https://pypi.org/project/kinpy/ Clone-ozzuk \u00e9s build-elj\u00fck a repo-t. mkdir -p ~/doosan2_ws/src cd ~/doosan2_ws/src git clone https://github.com/TamasDNagy/doosan-robot2.git git clone https://github.com/ros-controls/ros2_control.git git clone https://github.com/ros-controls/ros2_controllers.git git clone https://github.com/ros-simulation/gazebo_ros2_control.git cd ros2_control && git reset --hard 3dc62e28e3bc8cf636275825526c11d13b554bb6 && cd .. cd ros2_controllers && git reset --hard 83c494f460f1c8675f4fdd6fb8707b87e81cb197 && cd .. cd gazebo_ros2_control && git reset --hard 3dfe04d412d5be4540752e9c1165ccf25d7c51fb && cd .. git clone -b ros2 --single-branch https://github.com/ros-planning/moveit_msgs cd ~/doosan2_ws rosdep update rosdep install --from-paths src --ignore-src --rosdistro foxy -r -y colcon build --cmake-args -DCMAKE_EXPORT_COMPILE_COMMANDS = ON . install/setup.bash rosdep update Adjuk hozz\u00e1 az al\u00e1bbi sort a ~/.bashrc f\u00e1jlhoz: source ~/doosan2_ws/install/setup.bash Tesztelj\u00fck a szimul\u00e1tort, \u00faj temin\u00e1l ablakokban: #ros2 launch dsr_launcher2 single_robot_rviz.launch.py model:=a0912 color:=blue ros2 launch dsr_launcher2 single_robot_rviz_topic.launch.py model: = a0912 color: = blue \u00c1ll\u00edtsuk el\u0151 a robotot le\u00edr\u00f3 urdf f\u00e1jlt: TODO cd ~/catkin_ws/src/rrr-arm/urdf rosrun xacro xacro rrr_arm.xacro > rrr_arm.xacro.urdf 2: Robot mozgat\u00e1sa csukl\u00f3t\u00e9rben Iratkozzunk fel a robot csukl\u00f3sz\u00f6geit (konfigur\u00e1ci\u00f3j\u00e1t) publik\u00e1l\u00f3 topicra. Hozzunk l\u00e9tre publisher-eket a csukl\u00f3k sz\u00f6geinek be\u00e1ll\u00edt\u00e1s\u00e1ra haszn\u00e1lhat\u00f3 topic-okhoz. Warning A Kinpy \u00e9s a ROS nem mindig azonos sorrendben kezeli a csukl\u00f3sz\u00f6geket. Az al\u00e1bbi k\u00e9t sorrend fordul el\u0151: 1. [gripper_joint_1, gripper_joint_2, joint_1, joint_2, joint_3, joint_4] - /rrr_arm/joint_states topic - kp.jacobian.calc_jacobian(...) f\u00fcggv\u00e9ny 2. [joint_1, joint_2, joint_3, joint_4, gripper_joint_1, gripper_joint_2] - chain.forward_kinematics(...) f\u00fcggv\u00e9ny - chain.inverse_kinematics(...) f\u00fcggv\u00e9ny Mozgassuk a robotot [1.0, 1.0, 1.5, 1.5] konfigur\u00e1ci\u00f3ba. 3. Kinematika Import\u00e1ljuk a kinpy csomagot \u00e9s olvassuk be a robotot le\u00edr\u00f3 urdf f\u00e1jlt: import kinpy as kp chain = kp . build_serial_chain_from_urdf ( open ( \"/home/<USERNAME>/catkin_ws/src/rrr-arm/urdf/rrr_arm.xacro.urdf\" ) . read (), \"gripper_frame_cp\" ) print ( chain ) print ( chain . get_joint_parameter_names ()) Sz\u00e1m\u00edtsuk ki, majd irassuk ki a TCP poz\u00edci\u00f3j\u00e1t az adott konfigur\u00e1ci\u00f3ban a kinpy csomag seg\u00edts\u00e9g\u00e9vel. A https://pypi.org/project/kinpy/ oldalon l\u00e9v\u0151 p\u00e9lda hib\u00e1s, \u00e9rdemes az al\u00e1bbi p\u00e9lda k\u00f3db\u00f3l kiindulni: th1 = np . random . rand ( 2 ) tg = chain . forward_kinematics ( th1 ) th2 = chain . inverse_kinematics ( tg ) self . assertTrue ( np . allclose ( th1 , th2 , atol = 1.0e-6 )) 4: Inverz kinematika Jacobi inverz m\u00f3dszerrel \u00cdrjunk met\u00f3dust, amely az el\u0151ad\u00e1sban bemutatott Jakobi inverz m\u00f3dszerrel val\u00f3s\u00edtja meg az inverz kinematikai feladatot a roboton. Az orient\u00e1ci\u00f3t hagyjuk figyelmen k\u00edv\u00fcl. Mozgassuk a TCP-t a (0.59840159, -0.21191189, 0.42244937) poz\u00edci\u00f3ba. \u00cdrjunk egy ciklust, melynek meg\u00e1ll\u00e1si felt\u00e9tele a delta_r megfelel\u0151 nagys\u00e1ga, vagy rospy.is_shutdown() . Sz\u00e1m\u00edtsuk ki a k\u00edv\u00e1nt \u00e9s a pillanatnyi TCP poz\u00edci\u00f3k k\u00fcl\u00f6nbs\u00e9g\u00e9t ( delta_r ). Sk\u00e1l\u00e1zzuk k_1 konstanssal. phi_dot_t legyen [0.0, 0.0, 0.0] (ignor\u00e1ljuk az orient\u00e1ci\u00f3t). Konkaten\u00e1ljuk delta_r \u00e9s phi_dot_t -t. Sz\u00e1m\u00edtsuk ki a Jacobi m\u00e1trixot az adott konfigur\u00e1ci\u00f3ban a kp.jacobian.calc_jacobian(...) f\u00fcggv\u00e9ny seg\u00edts\u00e9g\u00e9vel. Sz\u00e1m\u00edtsuk ki Jacobi m\u00e1trix pszeudo-inverz\u00e9t np.linalg.pinv(...) . A fenti k\u00e9plet seg\u00edts\u00e9g\u00e9vel sz\u00e1m\u00edts\u00fck ki delta_q -t. N\u00f6velj\u00fck a csukl\u00f3sz\u00f6geket a kapott \u00e9rt\u00e9kekkel. B\u00f3nusz: Inverz kinematika orient\u00e1ci\u00f3val Eg\u00e9sz\u00edts\u00fck ki az el\u0151z\u0151 feladat megold\u00e1s\u00e1t \u00fagy, hogy az orient\u00e1ci\u00f3t is figyelembe vessz\u00fck az inverz kinematikai sz\u00e1m\u00edt\u00e1s sor\u00e1n. Hasznos linkek doosan-robot2 github https://pypi.org/project/kinpy/ https://en.wikipedia.org/wiki/Axis%E2%80%93angle_representation https://www.rosroboticslearning.com/jacobian","title":"7. Kinematika, inverz kinematika"},{"location":"07_robotics_principles/#07-kinematika-inverz-kienamtika-szimulalt-robotkar-programozasa-csuklo-es-munkaterben","text":"Warning ZH2 (Roslaunch, ROS param\u00e9ter szerver. Kinematika, inverz kinematika.) \u00e9s a K\u00f6telez\u0151 program bemutat\u00e1s december 6.","title":"07. Kinematika, inverz kienamtika, Szimul\u00e1lt robotkar programoz\u00e1sa csukl\u00f3-, \u00e9s munkat\u00e9rben"},{"location":"07_robotics_principles/#ismetles","text":"","title":"Ism\u00e9tl\u00e9s"},{"location":"07_robotics_principles/#3d-transzformaciok","text":"Poz\u00edci\u00f3: 3 elem\u0171 offszet vektor Orient\u00e1ci\u00f3: 3 x 3 rot\u00e1ci\u00f3s matrix tov\u00e1bbi orient\u00e1ci\u00f3 reprezent\u00e1ci\u00f3k: Euler-sz\u00f6gek, RPY, angle axis, quaternion Helyzet (pose): 4 \u00d7 4 transzform\u00e1ci\u00f3s m\u00e1rtrix Koordin\u00e1ta rendszer (frame): null pont, 3 tengely, 3 b\u00e1zis vektor, jobbk\u00e9z-szab\u00e1ly Homog\u00e9n transzform\u00e1ci\u00f3k: rot\u00e1ci\u00f3 \u00e9s transzl\u00e1ci\u00f3 egy\u00fctt pl. \\(\\mathbf{R}\\) rot\u00e1ci\u00f3 \u00e9s \\(\\mathbf{v}\\) transzl\u00e1ci\u00f3 eset\u00e9n: \\[ \\mathbf{T} = \\left[\\matrix{\\mathbf{R} & \\mathbf{v}\\\\\\mathbf{0} & 1 }\\right] = \\left[\\matrix{r_{1,1} & r_{1,2} & r_{1,3} & v_x\\\\r_{2,1} & r_{2,2} & r_{2,3} & v_y\\\\r_{3,1} & r_{3,2} & r_{3,3} & v_z\\\\\\ 0 & 0 & 0 & 1 }\\right] \\] Homog\u00e9n koordin\u00e1t\u00e1k: Vektor: 0-val eg\u00e9sz\u00edtj\u00fck ki, \\(\\mathbf{a_H}=\\left[\\matrix{\\mathbf{a} \\\\ 0}\\right]=\\left[\\matrix{a_x \\\\ a_y \\\\ a_z \\\\ 0}\\right]\\) Pont: 1-gyel eg\u00e9sz\u00edtj\u00fck ki, \\(\\mathbf{p_H}=\\left[\\matrix{\\mathbf{p} \\\\ 1}\\right]=\\left[\\matrix{p_x \\\\ p_y \\\\ p_z \\\\ 1}\\right]\\) Transzform\u00e1ci\u00f3k alkalmaz\u00e1sa egyszer\u0171bb: \\[ \\mathbf{q} = \\mathbf{R}\\mathbf{p} + \\mathbf{v} \\to \\left[\\matrix{\\mathbf{q} \\\\ 1}\\right] = \\left[\\matrix{\\mathbf{R} & \\mathbf{v}\\\\\\mathbf{0} & 1 }\\right]\\left[\\matrix{\\mathbf{p} \\\\ 1}\\right] \\] Szabads\u00e1gi fok (DoF): egym\u00e1st\u00f3l f\u00fcggetlen mennyis\u00e9gek sz\u00e1ma.","title":"3D transzform\u00e1ci\u00f3k"},{"location":"07_robotics_principles/#robotikai-alapok","text":"Robotok fel\u00e9p\u00edt\u00e9se: szegmensek (segment, link) \u00e9s csukl\u00f3k (joints) Munkat\u00e9r (task space, cartesian space): H\u00e1romdimenzi\u00f3s t\u00e9r, ahol a feladat, trajekt\u00f3ri\u00e1k, akad\u00e1lyok, stb. defini\u00e1l\u00e1sra ker\u00fclnek. TCP (Tool Center Point): az end effektorhoz r\u00f6gz\u00edtett koordin\u00e1ta rendszer (frame) Base/world frame Csukl\u00f3t\u00e9r (joint space): A robot csukl\u00f3ihoz rendelt mennyis\u00e9gek, melyeket a robot alacsony szint\u0171 ir\u00e1ny\u00edt\u00f3 rendszere \u00e9rtelmezni k\u00e9pes. csukl\u00f3 koordin\u00e1t\u00e1k, sebess\u00e9gek, gyorsul\u00e1sok, nyomat\u00e9kok...","title":"Robotikai alapok"},{"location":"07_robotics_principles/#elmelet","text":"","title":"Elm\u00e9let"},{"location":"07_robotics_principles/#kinematika-inverz-kinematika","text":"Def. Kinematika A TCP (vagy b\u00e1rmi m\u00e1s) helyzet\u00e9nek kisz\u00e1m\u00edt\u00e1sa a csukl\u00f3 koordin\u00e1t\u00e1kb\u00f3l. Kinematikai modell Denavit--Hartenberg (HD) konvenci\u00f3 URDF (Unified Robotics Description Format, XML-alap\u00fa) Ha a segmensekhez rendelt koordin\u00e1ta rendszerek rendre \\(base, 1, 2, 3, ..., TCP\\) , a szomsz\u00e9dos \\(i\\) and \\(i+1\\) szegmensek k\u00f6z\u00f6tti transzfomr\u00e1ci\u00f3k \\(T_{i+1,i}(q_{i+1})\\) (mely a k\u00f6zbez\u00e1rt csukl\u00f3 sz\u00f6g\u00e9nek f\u00fcggv\u00e9nye), a transzfomr\u00e1ci\u00f3 a base frame \u00e9s a TCP k\u00f6z\u00f6tt fel\u00edrhat\u00f3 ( \\(n\\) csukl\u00f3s robotra): \\[ T_{TCP,base}(q_1, \\cdots, q_n) = T_{TCP,n-1}(q_{n}) \\cdot T_{n-1,n-2}(q_{n-1}) \\cdots T_{2,1}(q_2) \\cdot T_{1,base}(q_1) \\cdot base \\] Def. Inverz kinematika Csukl\u00f3 koordin\u00e1t\u00e1k kisz\u00e1m\u00edt\u00e1sa a (k\u00edv\u00e1nt) TCP (vagy b\u00e1rmi m\u00e1s) pose el\u00e9r\u00e9s\u00e9hez.","title":"Kinematika, inverz kinematika"},{"location":"07_robotics_principles/#differencialis-inverz-kinematika","text":"Def. Differenci\u00e1lis inverz kinematika A csukl\u00f3 koordin\u00e1t\u00e1k mely v\u00e1ltoztat\u00e1sa \u00e9ri el a k\u00edv\u00e1nt, kis m\u00e9rt\u00e9k\u0171 v\u00e1ltoz\u00e1st a TCP helyzet\u00e9ben (rot\u00e1ci\u00f3 \u00e9s transzl\u00e1ci\u00f3). Jacobi-m\u00e1trix (Jacobian): egy vektor\u00e9rt\u00e9k\u0171 f\u00fcggv\u00e9ny els\u0151rend\u0171 parci\u00e1lis deriv\u00e1ltjait tartalmaz\u00f3 m\u00e1trix. \\[ \\mathbf{J} = \\left[\\matrix{\\frac{\\partial x_1}{\\partial q_1} & \\frac{\\partial x_1}{\\partial q_2} &\\frac{\\partial x_1}{\\partial q_3} & \\dots &\\frac{\\partial x_1}{\\partial q_n} \\\\ \\frac{\\partial x_2}{\\partial q_1} & \\frac{\\partial x_2}{\\partial q_2} &\\frac{\\partial x_2} {\\partial q_3} & \\dots &\\frac{\\partial x_2}{\\partial q_n} \\\\ \\frac{\\partial x_3}{\\partial q_1} & \\frac{\\partial x_3}{\\partial q_2} &\\frac{\\partial x_3}{\\partial q_3} & \\dots &\\frac{\\partial x_3}{\\partial q_n} \\\\ \\vdots &\\vdots &\\vdots &\\ddots &\\vdots \\\\ \\frac{\\partial x_m}{\\partial q_1} & \\frac{\\partial x_m}{\\partial q_2} &\\frac{\\partial x_m}{\\partial q_3} & \\dots &\\frac{\\partial x_m}{\\partial q_n} \\\\}\\right] \\] Jacobi-m\u00e1trix jelent\u0151s\u00e9ge robotik\u00e1ban : megadja az \u00f6sszef\u00fcgg\u00e9st a csukl\u00f3sebess\u00e9gek \u00e9s a TCP sebess\u00e9ge k\u00f6z\u00f6tt. \\[ \\left[\\matrix{\\mathbf{v} \\\\ \\mathbf{\\omega}}\\right] =\\mathbf{J}(\\mathbf{q})\\cdot \\mathbf{\\dot{q}} \\]","title":"Differenci\u00e1lis inverz kinematika"},{"location":"07_robotics_principles/#inverz-kinematika-jacobi-inverz-felhasznalasaval","text":"Sz\u00e1m\u00edtsuk ki a k\u00edv\u00e1nt \u00e9s az aktu\u00e1lis poz\u00edci\u00f3 k\u00fcl\u00f6nbs\u00e9g\u00e9t: \\(\\Delta\\mathbf{r} = \\mathbf{r}_{desired} - \\mathbf{r}_0\\) Sz\u00e1m\u00edtsuk ki a rot\u00e1ci\u00f3k k\u00fcl\u00f6nbs\u00e9g\u00e9t: \\(\\Delta\\mathbf{R} = \\mathbf{R}_{desired}\\mathbf{R}_{0}^{T}\\) , majd konvert\u00e1ljuk \u00e1t axis angle reprezent\u00e1ci\u00f3ba \\((\\mathbf{t},\\phi)\\) Sz\u00e1m\u00edtsuk ki \\(\\Delta\\mathbf{ q}=\\mathbf{J}^{-1}(\\mathbf{q_0})\\cdot \\left[\\matrix{k_1 \\cdot \\Delta\\mathbf{r} \\\\ k_2 \\cdot \\phi \\cdot \\mathbf{t}}\\right]\\) , ahol az inverz lehet pszeudo-inverz, vagy transzpon\u00e1lt \\(\\mathbf{q}_{better} = \\mathbf{q}_{0} + \\Delta\\mathbf{q}\\)","title":"Inverz kinematika Jacobi inverz felhaszn\u00e1l\u00e1s\u00e1val"},{"location":"07_robotics_principles/#gyakorlat","text":"","title":"Gyakorlat"},{"location":"07_robotics_principles/#1-install-rrr-arm","text":"Telep\u00edts\u00fck a dependency-ket. sudo apt update sudo apt-get install libpoco-dev sudo apt-get install ros-foxy-control-msgs ros-foxy-realtime-tools ros-foxy-xacro ros-foxy-joint-state-publisher-gui pip3 install kinpy Tip A kinpy csomag forr\u00e1s\u00e1t is t\u00f6lts\u00fck le, hasznos lehet az API meg\u00e9rt\u00e9se szempontj\u00e1b\u00f3l: https://pypi.org/project/kinpy/ Clone-ozzuk \u00e9s build-elj\u00fck a repo-t. mkdir -p ~/doosan2_ws/src cd ~/doosan2_ws/src git clone https://github.com/TamasDNagy/doosan-robot2.git git clone https://github.com/ros-controls/ros2_control.git git clone https://github.com/ros-controls/ros2_controllers.git git clone https://github.com/ros-simulation/gazebo_ros2_control.git cd ros2_control && git reset --hard 3dc62e28e3bc8cf636275825526c11d13b554bb6 && cd .. cd ros2_controllers && git reset --hard 83c494f460f1c8675f4fdd6fb8707b87e81cb197 && cd .. cd gazebo_ros2_control && git reset --hard 3dfe04d412d5be4540752e9c1165ccf25d7c51fb && cd .. git clone -b ros2 --single-branch https://github.com/ros-planning/moveit_msgs cd ~/doosan2_ws rosdep update rosdep install --from-paths src --ignore-src --rosdistro foxy -r -y colcon build --cmake-args -DCMAKE_EXPORT_COMPILE_COMMANDS = ON . install/setup.bash rosdep update Adjuk hozz\u00e1 az al\u00e1bbi sort a ~/.bashrc f\u00e1jlhoz: source ~/doosan2_ws/install/setup.bash Tesztelj\u00fck a szimul\u00e1tort, \u00faj temin\u00e1l ablakokban: #ros2 launch dsr_launcher2 single_robot_rviz.launch.py model:=a0912 color:=blue ros2 launch dsr_launcher2 single_robot_rviz_topic.launch.py model: = a0912 color: = blue \u00c1ll\u00edtsuk el\u0151 a robotot le\u00edr\u00f3 urdf f\u00e1jlt: TODO cd ~/catkin_ws/src/rrr-arm/urdf rosrun xacro xacro rrr_arm.xacro > rrr_arm.xacro.urdf","title":"1: Install rrr-arm"},{"location":"07_robotics_principles/#2-robot-mozgatasa-csukloterben","text":"Iratkozzunk fel a robot csukl\u00f3sz\u00f6geit (konfigur\u00e1ci\u00f3j\u00e1t) publik\u00e1l\u00f3 topicra. Hozzunk l\u00e9tre publisher-eket a csukl\u00f3k sz\u00f6geinek be\u00e1ll\u00edt\u00e1s\u00e1ra haszn\u00e1lhat\u00f3 topic-okhoz. Warning A Kinpy \u00e9s a ROS nem mindig azonos sorrendben kezeli a csukl\u00f3sz\u00f6geket. Az al\u00e1bbi k\u00e9t sorrend fordul el\u0151: 1. [gripper_joint_1, gripper_joint_2, joint_1, joint_2, joint_3, joint_4] - /rrr_arm/joint_states topic - kp.jacobian.calc_jacobian(...) f\u00fcggv\u00e9ny 2. [joint_1, joint_2, joint_3, joint_4, gripper_joint_1, gripper_joint_2] - chain.forward_kinematics(...) f\u00fcggv\u00e9ny - chain.inverse_kinematics(...) f\u00fcggv\u00e9ny Mozgassuk a robotot [1.0, 1.0, 1.5, 1.5] konfigur\u00e1ci\u00f3ba.","title":"2: Robot mozgat\u00e1sa csukl\u00f3t\u00e9rben"},{"location":"07_robotics_principles/#3-kinematika","text":"Import\u00e1ljuk a kinpy csomagot \u00e9s olvassuk be a robotot le\u00edr\u00f3 urdf f\u00e1jlt: import kinpy as kp chain = kp . build_serial_chain_from_urdf ( open ( \"/home/<USERNAME>/catkin_ws/src/rrr-arm/urdf/rrr_arm.xacro.urdf\" ) . read (), \"gripper_frame_cp\" ) print ( chain ) print ( chain . get_joint_parameter_names ()) Sz\u00e1m\u00edtsuk ki, majd irassuk ki a TCP poz\u00edci\u00f3j\u00e1t az adott konfigur\u00e1ci\u00f3ban a kinpy csomag seg\u00edts\u00e9g\u00e9vel. A https://pypi.org/project/kinpy/ oldalon l\u00e9v\u0151 p\u00e9lda hib\u00e1s, \u00e9rdemes az al\u00e1bbi p\u00e9lda k\u00f3db\u00f3l kiindulni: th1 = np . random . rand ( 2 ) tg = chain . forward_kinematics ( th1 ) th2 = chain . inverse_kinematics ( tg ) self . assertTrue ( np . allclose ( th1 , th2 , atol = 1.0e-6 ))","title":"3. Kinematika"},{"location":"07_robotics_principles/#4-inverz-kinematika-jacobi-inverz-modszerrel","text":"\u00cdrjunk met\u00f3dust, amely az el\u0151ad\u00e1sban bemutatott Jakobi inverz m\u00f3dszerrel val\u00f3s\u00edtja meg az inverz kinematikai feladatot a roboton. Az orient\u00e1ci\u00f3t hagyjuk figyelmen k\u00edv\u00fcl. Mozgassuk a TCP-t a (0.59840159, -0.21191189, 0.42244937) poz\u00edci\u00f3ba. \u00cdrjunk egy ciklust, melynek meg\u00e1ll\u00e1si felt\u00e9tele a delta_r megfelel\u0151 nagys\u00e1ga, vagy rospy.is_shutdown() . Sz\u00e1m\u00edtsuk ki a k\u00edv\u00e1nt \u00e9s a pillanatnyi TCP poz\u00edci\u00f3k k\u00fcl\u00f6nbs\u00e9g\u00e9t ( delta_r ). Sk\u00e1l\u00e1zzuk k_1 konstanssal. phi_dot_t legyen [0.0, 0.0, 0.0] (ignor\u00e1ljuk az orient\u00e1ci\u00f3t). Konkaten\u00e1ljuk delta_r \u00e9s phi_dot_t -t. Sz\u00e1m\u00edtsuk ki a Jacobi m\u00e1trixot az adott konfigur\u00e1ci\u00f3ban a kp.jacobian.calc_jacobian(...) f\u00fcggv\u00e9ny seg\u00edts\u00e9g\u00e9vel. Sz\u00e1m\u00edtsuk ki Jacobi m\u00e1trix pszeudo-inverz\u00e9t np.linalg.pinv(...) . A fenti k\u00e9plet seg\u00edts\u00e9g\u00e9vel sz\u00e1m\u00edts\u00fck ki delta_q -t. N\u00f6velj\u00fck a csukl\u00f3sz\u00f6geket a kapott \u00e9rt\u00e9kekkel.","title":"4: Inverz kinematika Jacobi inverz m\u00f3dszerrel"},{"location":"07_robotics_principles/#bonusz-inverz-kinematika-orientacioval","text":"Eg\u00e9sz\u00edts\u00fck ki az el\u0151z\u0151 feladat megold\u00e1s\u00e1t \u00fagy, hogy az orient\u00e1ci\u00f3t is figyelembe vessz\u00fck az inverz kinematikai sz\u00e1m\u00edt\u00e1s sor\u00e1n.","title":"B\u00f3nusz: Inverz kinematika orient\u00e1ci\u00f3val"},{"location":"07_robotics_principles/#hasznos-linkek","text":"doosan-robot2 github https://pypi.org/project/kinpy/ https://en.wikipedia.org/wiki/Axis%E2%80%93angle_representation https://www.rosroboticslearning.com/jacobian","title":"Hasznos linkek"},{"location":"08_sensory_data/","text":"08. Szenzoros adatok gy\u0171jt\u00e9se \u00e9s feldolgoz\u00e1sa Gyakorlat Thing may change here... Ezt a gyakorlatot lehet, hogy le fogjuk cser\u00e9lni. 1: Leo rover Install\u00e1ljuk a Leo rover ROS package-eit: sudo apt update sudo apt install ros-noetic-leo* A http://wiki.ros.org/leo_gazebo le\u00edr\u00e1s seg\u00edts\u00e9g\u00e9vel ind\u00edtsuk el a gazebo szimul\u00e1tort a Mars landscape-pel. Ind\u00edtsunk teleop node-ot, \u00e9s mozgassuk meg a robotot. 2: K\u00e1v\u00e9 a Marson -- k\u00e9pek r\u00f6gz\u00edt\u00e9se Warning A Mars rover k\u00e9pet k\u00fcld\u00f6tt egy k\u00fcl\u00f6n\u00f6s, k\u00e1v\u00e9s b\u00f6gr\u00e9nek t\u0171n\u0151 t\u00e1rgyr\u00f3l! A feladat, hogy ford\u00edtsuk a rovert a b\u00f6gre fel\u00e9, majd k\u00f6zel\u00edts\u00fck meg, hogy r\u00e9szletesen megvizsg\u00e1lhassuk. Ind\u00edtsuk el a Gazebo-t: gazebo Az insert panelen keress\u00fck ki a googleresearch/models/cole_hardware_mug_classic_blue modellt, majd helyezz\u00fck el a szimul\u00e1ci\u00f3ban. Ez az\u00e9rt kell, hogy k\u00e9s\u0151bb meglegyen a b\u00f6gre modellje a f\u00e1ljrendszer\u00fcnkben. Z\u00e1rjuk be a Gazebo-t T\u00f6lts\u00fck le a leo_masryard_coffee.launch \u00e9s a marsyard_coffe.world f\u00e1jlokat, majd m\u00e1soljuk be rendre a catkin_ws/src/ros_course/launch \u00e9s catkin_ws/src/ros_course/worlds mapp\u00e1kba. A .world f\u00e1jlokban \u00edrjuk \u00e1t a /home/tamas/.ignition/fuel/fuel... el\u00e9r\u00e9si utakat (f\u00e1jlonk\u00e9nt 2x) a saj\u00e1tunkra. Ind\u00edtsuk el a szimul\u00e1tort: roslaunch ros_course leo_marsyard_coffee.launch Ind\u00edtsuk el a teleopot \u00e9s az rqt_image_view -t: rosrun leo_teleop key_teleop rosrun rqt_image_view rqt_image_view Tip Ha a szimul\u00e1tor futtat\u00e1sa t\u00fals\u00e1gosan megterhel\u0151 a PC sz\u00e1m\u00e1ra, dolgozhatunk a terrain n\u00e9lk\u00fcli leo_gazebo_coffee.launch \u00e9s gazebo_coffe.world f\u00e1jlokkal is. Ments\u00fcnk le egy-egy k\u00e9pet, amin l\u00e1that\u00f3, illetve nem l\u00e1that\u00f3 a k\u00e1v\u00e9s b\u00f6gre. 3: K\u00e1v\u00e9 a Marson -- offline k\u00e9pfeldolgoz\u00e1s \u00cdrjunk Python szkriptet, amely beolvassa \u00e9s megjelen\u00edti a lementett k\u00e9peket. Sz\u00edn alap\u00fa szegment\u00e1l\u00e1ssal (vagy b\u00e1rhogy m\u00e1shogy) szegment\u00e1ljuk a k\u00e1v\u00e9s b\u00f6gr\u00e9t. Hat\u00e1rozzuk meg a b\u00f6gre k\u00f6z\u00e9ppontj\u00e1t k\u00e9pi koordin\u00e1t\u00e1kban. A szegment\u00e1l\u00e1s zaja gondot okozhat, pr\u00f3b\u00e1ljuk meg lesz\u0171rni. 4: K\u00e1v\u00e9 a Marson -- online perception node Iratkozzunk fel a /camera/image_raw topicra, majd a cv.imshow() f\u00fcggv\u00e9ny seg\u00edts\u00e9g\u00e9val jelen\u00edts\u00fck meg a kapott k\u00e9peket. Dolgozzuk be a m\u0171k\u00f6d\u0151 computer vision algoritmusunkat egy ROS node-ba. Publik\u00e1ljuk \u00faj topicban a detekt\u00e1lt b\u00f6gre k\u00f6z\u00e9ppontj\u00e1nak k\u00e9pi koordin\u00e1t\u00e1t. Haszn\u00e1lhatjuk pl. az Int32MultiArray, Point2D t\u00edpusokat, vagy defini\u00e1lhatunk saj\u00e1tot (k\u00e9s\u0151bb sz\u00fcks\u00e9g lesz a b\u00f6gre m\u00e9ret\u00e9re is). B\u00f3nusz: publik\u00e1ljuk a maszkot \u00e9s a maszkolt k\u00e9pet egy-egy Image topicban 5: K\u00e1v\u00e9 a Marson -- operation logic node \u00cdrjunk \u00faj ROS node-ot, amely fogadja a perception node \u00fczeneteit, illetve k\u00e9pes a rover mozg\u00e1s\u00e1nak ir\u00e1ny\u00edt\u00e1s\u00e1ra. Forgassuk a rovert egy helyben, am\u00edg a b\u00f6gre a k\u00e9p k\u00f6zep\u00e9re nem ker\u00fcl. K\u00f6zel\u00edts\u00fck meg a b\u00f6gr\u00e9t annyira, hogy a l\u00e1tsz\u00f3lagos m\u00e9rete a k\u00e9p m\u00e9ret\u00e9nek 50%-\u00e1t el nem \u00e9ri. Ments\u00fcnk le k\u00e9pet a gyan\u00fas objektumr\u00f3l. 5+1: B\u00f3nusz N\u00e9zz\u00fcnk sz\u00e9t Gazebo-ban a beilleszthet\u0151 modellek k\u00f6z\u00f6tt ( insert panel) \u00e9s v\u00e1lasszunk egyet, amely valamilyen m\u00e1s m\u00f3dszerrel detekt\u00e1lhat\u00f3 a kamera k\u00e9p\u00e9n (pl. template matching). M\u00f3dos\u00edtsuk \u00fagy a node-okat, hogy ezt az objektumot k\u00f6zel\u00edtse meg a rover. Figyelem! Az \u00f3ra v\u00e9g\u00e9n a forr\u00e1sk\u00f3dokat mindenkinek fel kell t\u00f6lteni Moodle-re egy zip arch\u00edvumba csomagolva! Hasznos linkek http://wiki.ros.org/leo_gazebo http://wiki.ros.org/cv_bridge/Tutorials/ConvertingBetweenROSImagesAndOpenCVImagesPython https://realpython.com/python-opencv-color-spaces/ https://stackoverflow.com/questions/59164192/how-to-find-the-contour-of-a-blob-using-opencv-python - Turtlebot export TURTLEBOT3_MODEL = burger export ROS_DOMAIN_ID = 11 export GAZEBO_MODEL_PATH = $GAZEBO_MODEL_PATH : ` ros2 pkg prefix turtlebot3_gazebo ` /share/ turtlebot3_gazebo/models/","title":"Szenzoros adatok gy\u0171jt\u00e9se \u00e9s feldolgoz\u00e1sa"},{"location":"08_sensory_data/#08-szenzoros-adatok-gyujtese-es-feldolgozasa","text":"","title":"08. Szenzoros adatok gy\u0171jt\u00e9se \u00e9s feldolgoz\u00e1sa"},{"location":"08_sensory_data/#gyakorlat","text":"Thing may change here... Ezt a gyakorlatot lehet, hogy le fogjuk cser\u00e9lni.","title":"Gyakorlat"},{"location":"08_sensory_data/#1-leo-rover","text":"Install\u00e1ljuk a Leo rover ROS package-eit: sudo apt update sudo apt install ros-noetic-leo* A http://wiki.ros.org/leo_gazebo le\u00edr\u00e1s seg\u00edts\u00e9g\u00e9vel ind\u00edtsuk el a gazebo szimul\u00e1tort a Mars landscape-pel. Ind\u00edtsunk teleop node-ot, \u00e9s mozgassuk meg a robotot.","title":"1: Leo rover"},{"location":"08_sensory_data/#2-kave-a-marson-kepek-rogzitese","text":"Warning A Mars rover k\u00e9pet k\u00fcld\u00f6tt egy k\u00fcl\u00f6n\u00f6s, k\u00e1v\u00e9s b\u00f6gr\u00e9nek t\u0171n\u0151 t\u00e1rgyr\u00f3l! A feladat, hogy ford\u00edtsuk a rovert a b\u00f6gre fel\u00e9, majd k\u00f6zel\u00edts\u00fck meg, hogy r\u00e9szletesen megvizsg\u00e1lhassuk. Ind\u00edtsuk el a Gazebo-t: gazebo Az insert panelen keress\u00fck ki a googleresearch/models/cole_hardware_mug_classic_blue modellt, majd helyezz\u00fck el a szimul\u00e1ci\u00f3ban. Ez az\u00e9rt kell, hogy k\u00e9s\u0151bb meglegyen a b\u00f6gre modellje a f\u00e1ljrendszer\u00fcnkben. Z\u00e1rjuk be a Gazebo-t T\u00f6lts\u00fck le a leo_masryard_coffee.launch \u00e9s a marsyard_coffe.world f\u00e1jlokat, majd m\u00e1soljuk be rendre a catkin_ws/src/ros_course/launch \u00e9s catkin_ws/src/ros_course/worlds mapp\u00e1kba. A .world f\u00e1jlokban \u00edrjuk \u00e1t a /home/tamas/.ignition/fuel/fuel... el\u00e9r\u00e9si utakat (f\u00e1jlonk\u00e9nt 2x) a saj\u00e1tunkra. Ind\u00edtsuk el a szimul\u00e1tort: roslaunch ros_course leo_marsyard_coffee.launch Ind\u00edtsuk el a teleopot \u00e9s az rqt_image_view -t: rosrun leo_teleop key_teleop rosrun rqt_image_view rqt_image_view Tip Ha a szimul\u00e1tor futtat\u00e1sa t\u00fals\u00e1gosan megterhel\u0151 a PC sz\u00e1m\u00e1ra, dolgozhatunk a terrain n\u00e9lk\u00fcli leo_gazebo_coffee.launch \u00e9s gazebo_coffe.world f\u00e1jlokkal is. Ments\u00fcnk le egy-egy k\u00e9pet, amin l\u00e1that\u00f3, illetve nem l\u00e1that\u00f3 a k\u00e1v\u00e9s b\u00f6gre.","title":"2: K\u00e1v\u00e9 a Marson -- k\u00e9pek r\u00f6gz\u00edt\u00e9se"},{"location":"08_sensory_data/#3-kave-a-marson-offline-kepfeldolgozas","text":"\u00cdrjunk Python szkriptet, amely beolvassa \u00e9s megjelen\u00edti a lementett k\u00e9peket. Sz\u00edn alap\u00fa szegment\u00e1l\u00e1ssal (vagy b\u00e1rhogy m\u00e1shogy) szegment\u00e1ljuk a k\u00e1v\u00e9s b\u00f6gr\u00e9t. Hat\u00e1rozzuk meg a b\u00f6gre k\u00f6z\u00e9ppontj\u00e1t k\u00e9pi koordin\u00e1t\u00e1kban. A szegment\u00e1l\u00e1s zaja gondot okozhat, pr\u00f3b\u00e1ljuk meg lesz\u0171rni.","title":"3: K\u00e1v\u00e9 a Marson -- offline k\u00e9pfeldolgoz\u00e1s"},{"location":"08_sensory_data/#4-kave-a-marson-online-perception-node","text":"Iratkozzunk fel a /camera/image_raw topicra, majd a cv.imshow() f\u00fcggv\u00e9ny seg\u00edts\u00e9g\u00e9val jelen\u00edts\u00fck meg a kapott k\u00e9peket. Dolgozzuk be a m\u0171k\u00f6d\u0151 computer vision algoritmusunkat egy ROS node-ba. Publik\u00e1ljuk \u00faj topicban a detekt\u00e1lt b\u00f6gre k\u00f6z\u00e9ppontj\u00e1nak k\u00e9pi koordin\u00e1t\u00e1t. Haszn\u00e1lhatjuk pl. az Int32MultiArray, Point2D t\u00edpusokat, vagy defini\u00e1lhatunk saj\u00e1tot (k\u00e9s\u0151bb sz\u00fcks\u00e9g lesz a b\u00f6gre m\u00e9ret\u00e9re is). B\u00f3nusz: publik\u00e1ljuk a maszkot \u00e9s a maszkolt k\u00e9pet egy-egy Image topicban","title":"4: K\u00e1v\u00e9 a Marson -- online perception node"},{"location":"08_sensory_data/#5-kave-a-marson-operation-logic-node","text":"\u00cdrjunk \u00faj ROS node-ot, amely fogadja a perception node \u00fczeneteit, illetve k\u00e9pes a rover mozg\u00e1s\u00e1nak ir\u00e1ny\u00edt\u00e1s\u00e1ra. Forgassuk a rovert egy helyben, am\u00edg a b\u00f6gre a k\u00e9p k\u00f6zep\u00e9re nem ker\u00fcl. K\u00f6zel\u00edts\u00fck meg a b\u00f6gr\u00e9t annyira, hogy a l\u00e1tsz\u00f3lagos m\u00e9rete a k\u00e9p m\u00e9ret\u00e9nek 50%-\u00e1t el nem \u00e9ri. Ments\u00fcnk le k\u00e9pet a gyan\u00fas objektumr\u00f3l.","title":"5: K\u00e1v\u00e9 a Marson -- operation logic node"},{"location":"08_sensory_data/#51-bonusz","text":"N\u00e9zz\u00fcnk sz\u00e9t Gazebo-ban a beilleszthet\u0151 modellek k\u00f6z\u00f6tt ( insert panel) \u00e9s v\u00e1lasszunk egyet, amely valamilyen m\u00e1s m\u00f3dszerrel detekt\u00e1lhat\u00f3 a kamera k\u00e9p\u00e9n (pl. template matching). M\u00f3dos\u00edtsuk \u00fagy a node-okat, hogy ezt az objektumot k\u00f6zel\u00edtse meg a rover. Figyelem! Az \u00f3ra v\u00e9g\u00e9n a forr\u00e1sk\u00f3dokat mindenkinek fel kell t\u00f6lteni Moodle-re egy zip arch\u00edvumba csomagolva!","title":"5+1: B\u00f3nusz"},{"location":"08_sensory_data/#hasznos-linkek","text":"http://wiki.ros.org/leo_gazebo http://wiki.ros.org/cv_bridge/Tutorials/ConvertingBetweenROSImagesAndOpenCVImagesPython https://realpython.com/python-opencv-color-spaces/ https://stackoverflow.com/questions/59164192/how-to-find-the-contour-of-a-blob-using-opencv-python - Turtlebot export TURTLEBOT3_MODEL = burger export ROS_DOMAIN_ID = 11 export GAZEBO_MODEL_PATH = $GAZEBO_MODEL_PATH : ` ros2 pkg prefix turtlebot3_gazebo ` /share/ turtlebot3_gazebo/models/","title":"Hasznos linkek"},{"location":"projects/","text":"K\u00f6telez\u0151 Program Neh\u00e9zs\u00e9gi fokozatok \u00e9s \u00e9rdemjegyek A k\u00f6telez\u0151 programok h\u00e1rom neh\u00e9zs\u00e9gi fokozatban teljes\u00edthet\u0151k. A neh\u00e9zs\u00e9gi fok meghat\u00e1rozza a legjobb \u00e9rdemjegyet, amely a teljes\u00edt\u00e9s\u00e9\u00e9rt kaphat\u00f3! Neh\u00e9zs\u00e9gi fok Legjobb megszerezhet\u0151 \u00e9rdemjegy Basic 3 Advanced 4 Epic 5 Tip A feladatok \u00fagy vannak megadva, hogy \u00e9rdemes a Basic szinttel kezdeni, \u00e9s onnan fokozatosan \u00e9p\u00edtkezni az Epic szintig. A k\u00f6telez\u0151 programok a k\u00f6vetkez\u0151 szempontok szerint ker\u00fclnek \u00e9rt\u00e9kel\u00e9sre: Bizony\u00edtottan saj\u00e1t munka \u00c9rt\u00e9kelhet\u0151 eredm\u00e9nyeket produk\u00e1ljon Verzi\u00f3k\u00f6vet\u00e9s haszn\u00e1lata, felt\u00f6lt\u00e9s GitHub/GitLab/egy\u00e9b repoba \u00c9rt\u00e9kel\u00e9si szempontok: a megold\u00e1s teljess\u00e9ge megfelel\u0151 ROS kommunik\u00e1ci\u00f3 alkalmaz\u00e1sa program c\u00e9lszer\u0171 szerkezete az implement\u00e1ci\u00f3 min\u0151s\u00e9ge a k\u00f3d dokument\u00e1l\u00e1sa \u00dctemez\u00e9s Okt. h\u00e9t D\u00e1tum Sz\u00e1monk\u00e9r\u00e9s 2. szept. 13 K\u00f6telez\u0151 programok ismertet\u00e9se. 8. okt. 25 K\u00f6telez\u0151 program m\u00e9rf\u00f6ldk\u0151. 14. nov. 6 K\u00f6telez\u0151 programok bemutat\u00e1sa. \u00c9vk\u00f6zi jegy A f\u00e9l\u00e9v elfogad\u00e1s\u00e1nak felt\u00e9tele, hogy mind a k\u00e9t ZH, mind a k\u00f6telez\u0151 program \u00e9rt\u00e9kel\u00e9se legal\u00e1bb el\u00e9gs\u00e9ges. A k\u00e9t ZH k\u00f6z\u00fcl az egyik az utols\u00f3 \u00f3ra alkalm\u00e1val p\u00f3tolhat\u00f3. F\u00e9l\u00e9v v\u00e9gi jegy \\(Jegy = (ZH1 + ZH2 + 2 \\times K\u00f6tProg) / 4\\) K\u00f6telez\u0151 program t\u00e9m\u00e1k 1. PlatypOUs 1.1. PlatypOUs p\u00e1lyak\u00f6vet\u00e9s Basic: Szimul\u00e1tor \u00e9leszt\u00e9se, SLAM tesztel\u00e9se. ROS node/node-ok implement\u00e1l\u00e1sa szenzorok adatainak beolvas\u00e1s\u00e1ra \u00e9s a a robot mozgat\u00e1s\u00e1ra. Advanced: ROS rendszer implement\u00e1l\u00e1sa p\u00e1lyak\u00f6vet\u00e9sre szimul\u00e1lt k\u00f6rnyezetben b\u00e1rmely szenzor felhaszn\u00e1l\u00e1s\u00e1val(pl. fal mellett halad\u00e1s adott t\u00e1vols\u00e1gra LIDAR seg\u00edts\u00e9g\u00e9vel). Epic: Implement\u00e1ci\u00f3 \u00e9s tesztel\u00e9s a val\u00f3s hardware-en \u00e9s/vagy ny\u0171g\u00f6zz le! 1.2. PlatypOUs akad\u00e1ly elker\u00fcl\u00e9s Basic: Szimul\u00e1tor \u00e9leszt\u00e9se, SLAM tesztel\u00e9se. ROS node/node-ok implement\u00e1l\u00e1sa szenzorok adatainak beolvas\u00e1s\u00e1ra \u00e9s a a robot mozgat\u00e1s\u00e1ra. Advanced: ROS rendszer implement\u00e1l\u00e1sa akad\u00e1ly felismer\u00e9s\u00e9re \u00e9s az akad\u00e1lyt kiker\u00fcl\u0151 trajekt\u00f3ria tervez\u00e9s\u00e9re \u00e9s megval\u00f3s\u00edt\u00e1s\u00e1ra szimul\u00e1lt k\u00f6rnyezetben b\u00e1rmely szenzor felhaszn\u00e1l\u00e1s\u00e1val. Epic: Implement\u00e1ci\u00f3 \u00e9s tesztel\u00e9s a val\u00f3s hardware-en \u00e9s/vagy ny\u0171g\u00f6zz le! 1.3. PlatypOUs objektum k\u00f6vet\u00e9s Basic: Szimul\u00e1tor \u00e9leszt\u00e9se, SLAM tesztel\u00e9se. ROS node/node-ok implement\u00e1l\u00e1sa szenzorok adatainak beolvas\u00e1s\u00e1ra \u00e9s a a robot mozgat\u00e1s\u00e1ra. Advanced: ROS rendszer implement\u00e1l\u00e1sa objektum megkeres\u00e9s\u00e9re/felismer\u00e9s\u00e9re \u00e9s k\u00f6vet\u00e9s\u00e9re/megk\u00f6zel\u00edt\u00e9s\u00e9re szimul\u00e1lt k\u00f6rnyezetben b\u00e1rmely szenzor felhaszn\u00e1l\u00e1s\u00e1val (pl. visual servoing). Epic: Implement\u00e1ci\u00f3 \u00e9s tesztel\u00e9s a val\u00f3s hardware-en \u00e9s/vagy ny\u0171g\u00f6zz le! 1.4. PlatypOUs action library Basic: Szimul\u00e1tor \u00e9leszt\u00e9se, SLAM tesztel\u00e9se. ROS node/node-ok implement\u00e1l\u00e1sa szenzorok adatainak beolvas\u00e1s\u00e1ra \u00e9s a a robot mozgat\u00e1s\u00e1ra. Advanced: Egyszer\u0171 m\u0171veleteket tartalmaz\u00f3, ROS action alap\u00fa k\u00f6nyvt\u00e1r \u00e9s ezeket v\u00e9grehajt\u00f3 rendszer implement\u00e1l\u00e1sa (pl. push object, move to object, turn around). Epic: Implement\u00e1ci\u00f3 \u00e9s tesztel\u00e9s a val\u00f3s hardware-en \u00e9s/vagy ny\u0171g\u00f6zz le! 2. AMBF 2.1. da Vinci seb\u00e9szrobot ROS integr\u00e1ci\u00f3ja AMBF szimul\u00e1torban Basic: Szimul\u00e1tor \u00e9leszt\u00e9se, robot vez\u00e9rl\u00e9se joint space-ben \u00e9s task space-ben (IK m\u00e1r implement\u00e1lva AMBF-ben) ROS-b\u00f3l CRTK szerinti topic-okon kereszt\u00fcl Advanced: Objektumok detekt\u00e1l\u00e1sa Peg transfer puzzle -ben Epic: Auton\u00f3m manipul\u00e1ci\u00f3 Peg transfer -en \u00e9s/vagy ny\u0171g\u00f6zz le! 2.2. KUKA robotkar ROS integr\u00e1ci\u00f3ja AMBF szimul\u00e1torban Basic: Szimul\u00e1tor \u00e9leszt\u00e9se, robot vez\u00e9rl\u00e9se joint space-ben ROS-b\u00f3l Advanced: Robot vez\u00e9rl\u00e9se task space-ben, IK? Epic: Trajekt\u00f3riatervez\u00e9s 2.3. PR2 humanoid robot ROS integr\u00e1ci\u00f3ja AMBF szimul\u00e1torban Basic: Szimul\u00e1tor \u00e9leszt\u00e9se, robot vez\u00e9rl\u00e9se joint space-ben ROS-b\u00f3l Advanced: Robot vez\u00e9rl\u00e9se task space-ben, IK? Epic: Trajekt\u00f3riatervez\u00e9s/Navig\u00e1ci\u00f3/Manipul\u00e1ci\u00f3 X. Saj\u00e1t t\u00e9ma Megegyez\u00e9s alapj\u00e1n. Hasznos linkek Gazebo ROS packages PlatypOUs AMBF My fork of AMBF CRTK topics Navigation stack Paper on LiDAR SLAM Paper on vSLAM Paper on Visual Servoing Mobile Robot","title":"K\u00f6telez\u0151 program"},{"location":"projects/#kotelezo-program","text":"","title":"K\u00f6telez\u0151 Program"},{"location":"projects/#nehezsegi-fokozatok-es-erdemjegyek","text":"A k\u00f6telez\u0151 programok h\u00e1rom neh\u00e9zs\u00e9gi fokozatban teljes\u00edthet\u0151k. A neh\u00e9zs\u00e9gi fok meghat\u00e1rozza a legjobb \u00e9rdemjegyet, amely a teljes\u00edt\u00e9s\u00e9\u00e9rt kaphat\u00f3! Neh\u00e9zs\u00e9gi fok Legjobb megszerezhet\u0151 \u00e9rdemjegy Basic 3 Advanced 4 Epic 5 Tip A feladatok \u00fagy vannak megadva, hogy \u00e9rdemes a Basic szinttel kezdeni, \u00e9s onnan fokozatosan \u00e9p\u00edtkezni az Epic szintig. A k\u00f6telez\u0151 programok a k\u00f6vetkez\u0151 szempontok szerint ker\u00fclnek \u00e9rt\u00e9kel\u00e9sre: Bizony\u00edtottan saj\u00e1t munka \u00c9rt\u00e9kelhet\u0151 eredm\u00e9nyeket produk\u00e1ljon Verzi\u00f3k\u00f6vet\u00e9s haszn\u00e1lata, felt\u00f6lt\u00e9s GitHub/GitLab/egy\u00e9b repoba \u00c9rt\u00e9kel\u00e9si szempontok: a megold\u00e1s teljess\u00e9ge megfelel\u0151 ROS kommunik\u00e1ci\u00f3 alkalmaz\u00e1sa program c\u00e9lszer\u0171 szerkezete az implement\u00e1ci\u00f3 min\u0151s\u00e9ge a k\u00f3d dokument\u00e1l\u00e1sa","title":"Neh\u00e9zs\u00e9gi fokozatok \u00e9s \u00e9rdemjegyek"},{"location":"projects/#utemezes","text":"Okt. h\u00e9t D\u00e1tum Sz\u00e1monk\u00e9r\u00e9s 2. szept. 13 K\u00f6telez\u0151 programok ismertet\u00e9se. 8. okt. 25 K\u00f6telez\u0151 program m\u00e9rf\u00f6ldk\u0151. 14. nov. 6 K\u00f6telez\u0151 programok bemutat\u00e1sa.","title":"\u00dctemez\u00e9s"},{"location":"projects/#evkozi-jegy","text":"A f\u00e9l\u00e9v elfogad\u00e1s\u00e1nak felt\u00e9tele, hogy mind a k\u00e9t ZH, mind a k\u00f6telez\u0151 program \u00e9rt\u00e9kel\u00e9se legal\u00e1bb el\u00e9gs\u00e9ges. A k\u00e9t ZH k\u00f6z\u00fcl az egyik az utols\u00f3 \u00f3ra alkalm\u00e1val p\u00f3tolhat\u00f3. F\u00e9l\u00e9v v\u00e9gi jegy \\(Jegy = (ZH1 + ZH2 + 2 \\times K\u00f6tProg) / 4\\)","title":"\u00c9vk\u00f6zi jegy"},{"location":"projects/#kotelezo-program-temak","text":"","title":"K\u00f6telez\u0151 program t\u00e9m\u00e1k"},{"location":"projects/#1-platypous","text":"","title":"1. PlatypOUs"},{"location":"projects/#11-platypous-palyakovetes","text":"Basic: Szimul\u00e1tor \u00e9leszt\u00e9se, SLAM tesztel\u00e9se. ROS node/node-ok implement\u00e1l\u00e1sa szenzorok adatainak beolvas\u00e1s\u00e1ra \u00e9s a a robot mozgat\u00e1s\u00e1ra. Advanced: ROS rendszer implement\u00e1l\u00e1sa p\u00e1lyak\u00f6vet\u00e9sre szimul\u00e1lt k\u00f6rnyezetben b\u00e1rmely szenzor felhaszn\u00e1l\u00e1s\u00e1val(pl. fal mellett halad\u00e1s adott t\u00e1vols\u00e1gra LIDAR seg\u00edts\u00e9g\u00e9vel). Epic: Implement\u00e1ci\u00f3 \u00e9s tesztel\u00e9s a val\u00f3s hardware-en \u00e9s/vagy ny\u0171g\u00f6zz le!","title":"1.1. PlatypOUs p\u00e1lyak\u00f6vet\u00e9s"},{"location":"projects/#12-platypous-akadaly-elkerules","text":"Basic: Szimul\u00e1tor \u00e9leszt\u00e9se, SLAM tesztel\u00e9se. ROS node/node-ok implement\u00e1l\u00e1sa szenzorok adatainak beolvas\u00e1s\u00e1ra \u00e9s a a robot mozgat\u00e1s\u00e1ra. Advanced: ROS rendszer implement\u00e1l\u00e1sa akad\u00e1ly felismer\u00e9s\u00e9re \u00e9s az akad\u00e1lyt kiker\u00fcl\u0151 trajekt\u00f3ria tervez\u00e9s\u00e9re \u00e9s megval\u00f3s\u00edt\u00e1s\u00e1ra szimul\u00e1lt k\u00f6rnyezetben b\u00e1rmely szenzor felhaszn\u00e1l\u00e1s\u00e1val. Epic: Implement\u00e1ci\u00f3 \u00e9s tesztel\u00e9s a val\u00f3s hardware-en \u00e9s/vagy ny\u0171g\u00f6zz le!","title":"1.2. PlatypOUs akad\u00e1ly elker\u00fcl\u00e9s"},{"location":"projects/#13-platypous-objektum-kovetes","text":"Basic: Szimul\u00e1tor \u00e9leszt\u00e9se, SLAM tesztel\u00e9se. ROS node/node-ok implement\u00e1l\u00e1sa szenzorok adatainak beolvas\u00e1s\u00e1ra \u00e9s a a robot mozgat\u00e1s\u00e1ra. Advanced: ROS rendszer implement\u00e1l\u00e1sa objektum megkeres\u00e9s\u00e9re/felismer\u00e9s\u00e9re \u00e9s k\u00f6vet\u00e9s\u00e9re/megk\u00f6zel\u00edt\u00e9s\u00e9re szimul\u00e1lt k\u00f6rnyezetben b\u00e1rmely szenzor felhaszn\u00e1l\u00e1s\u00e1val (pl. visual servoing). Epic: Implement\u00e1ci\u00f3 \u00e9s tesztel\u00e9s a val\u00f3s hardware-en \u00e9s/vagy ny\u0171g\u00f6zz le!","title":"1.3. PlatypOUs objektum k\u00f6vet\u00e9s"},{"location":"projects/#14-platypous-action-library","text":"Basic: Szimul\u00e1tor \u00e9leszt\u00e9se, SLAM tesztel\u00e9se. ROS node/node-ok implement\u00e1l\u00e1sa szenzorok adatainak beolvas\u00e1s\u00e1ra \u00e9s a a robot mozgat\u00e1s\u00e1ra. Advanced: Egyszer\u0171 m\u0171veleteket tartalmaz\u00f3, ROS action alap\u00fa k\u00f6nyvt\u00e1r \u00e9s ezeket v\u00e9grehajt\u00f3 rendszer implement\u00e1l\u00e1sa (pl. push object, move to object, turn around). Epic: Implement\u00e1ci\u00f3 \u00e9s tesztel\u00e9s a val\u00f3s hardware-en \u00e9s/vagy ny\u0171g\u00f6zz le!","title":"1.4. PlatypOUs action library"},{"location":"projects/#2-ambf","text":"","title":"2. AMBF"},{"location":"projects/#21-da-vinci-sebeszrobot-ros-integracioja-ambf-szimulatorban","text":"Basic: Szimul\u00e1tor \u00e9leszt\u00e9se, robot vez\u00e9rl\u00e9se joint space-ben \u00e9s task space-ben (IK m\u00e1r implement\u00e1lva AMBF-ben) ROS-b\u00f3l CRTK szerinti topic-okon kereszt\u00fcl Advanced: Objektumok detekt\u00e1l\u00e1sa Peg transfer puzzle -ben Epic: Auton\u00f3m manipul\u00e1ci\u00f3 Peg transfer -en \u00e9s/vagy ny\u0171g\u00f6zz le!","title":"2.1. da Vinci seb\u00e9szrobot ROS integr\u00e1ci\u00f3ja AMBF szimul\u00e1torban"},{"location":"projects/#22-kuka-robotkar-ros-integracioja-ambf-szimulatorban","text":"Basic: Szimul\u00e1tor \u00e9leszt\u00e9se, robot vez\u00e9rl\u00e9se joint space-ben ROS-b\u00f3l Advanced: Robot vez\u00e9rl\u00e9se task space-ben, IK? Epic: Trajekt\u00f3riatervez\u00e9s","title":"2.2. KUKA robotkar ROS integr\u00e1ci\u00f3ja AMBF szimul\u00e1torban"},{"location":"projects/#23-pr2-humanoid-robot-ros-integracioja-ambf-szimulatorban","text":"Basic: Szimul\u00e1tor \u00e9leszt\u00e9se, robot vez\u00e9rl\u00e9se joint space-ben ROS-b\u00f3l Advanced: Robot vez\u00e9rl\u00e9se task space-ben, IK? Epic: Trajekt\u00f3riatervez\u00e9s/Navig\u00e1ci\u00f3/Manipul\u00e1ci\u00f3","title":"2.3. PR2 humanoid robot ROS integr\u00e1ci\u00f3ja AMBF szimul\u00e1torban"},{"location":"projects/#x-sajat-tema","text":"Megegyez\u00e9s alapj\u00e1n.","title":"X. Saj\u00e1t t\u00e9ma"},{"location":"projects/#hasznos-linkek","text":"Gazebo ROS packages PlatypOUs AMBF My fork of AMBF CRTK topics Navigation stack Paper on LiDAR SLAM Paper on vSLAM Paper on Visual Servoing Mobile Robot","title":"Hasznos linkek"}]}