{"config":{"lang":["hu"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Fejlett robotprogramoz\u00e1s ROS k\u00f6rnyezetben - Kurzussal kapcsolatos inform\u00e1ci\u00f3k","text":""},{"location":"#kurzussal-kapcsolatos-informaciok","title":"Kurzussal kapcsolatos inform\u00e1ci\u00f3k","text":""},{"location":"#targyfelelos","title":"T\u00e1rgyfelel\u0151s","text":"<p>Prof. Dr. Galambos P\u00e9ter   peter.galambos@irob.uni-obuda.hu</p>"},{"location":"#oktatok","title":"Oktat\u00f3k","text":"<p>Dr. Levendovics Tam\u00e1s  tamas.levendovics@irob.uni-obuda.hu</p>"},{"location":"#orarendi-informaciok","title":"\u00d3rarendi inform\u00e1ci\u00f3k","text":"Csoport Id\u0151pont Terem 1. csoport P\u00e9ntek 12:35-16:05 BA.1.10"},{"location":"#feleves-utemezes","title":"F\u00e9l\u00e9ves \u00fctemez\u00e9s","text":"Okt. h\u00e9t D\u00e1tum T\u00e9mak\u00f6r Sz\u00e1monk\u00e9r\u00e9s 1. szep. 12 K\u00f6vetelm\u00e9nyek ismertet\u00e9se. ROS bevezet\u00e9s. Fejleszt\u0151k\u00f6rnyezet fel\u00e1ll\u00edt\u00e1sa. - 2. szep. 19 Fejleszt\u0151k\u00f6rnyezet fel\u00e1ll\u00edt\u00e1sa. Linux alapok. ROS 1 \u00e9s ROS 2. Egyszer\u0171 pr\u00f3bak\u00f3dok futtat\u00e1sa. ROS package. Az alapvet\u0151 ROS kommunik\u00e1ci\u00f3, publisher \u00e9s subscriber implement\u00e1l\u00e1sa. - 3. szep. 26 Rektori sz\u00fcnet (Kutat\u00f3k \u00c9jszak\u00e1ja). - 4. okt. 3 Python alapok. ROS kommunik\u00e1ci\u00f3 implement\u00e1ci\u00f3j\u00e1nak gyakorl\u00e1sa, p\u00e9ldafeladatok megold\u00e1sa. - 5. okt. 10 Robotikai alapfogalmak, da Vinci seb\u00e9szrobot programoz\u00e1sa szimul\u00e1lt k\u00f6rnyezetben I. - 6. okt. 17 Robotikai alapfogalmak, da Vinci seb\u00e9szrobot programoz\u00e1sa szimul\u00e1lt k\u00f6rnyezetben II. - 7. okt. 24 Projekt labor I. Verzi\u00f3k\u00f6vet\u00e9s, Git. (Laboron a jelenl\u00e9t opcion\u00e1lis) ZH1 8. okt. 31 ROS 2 Launch, Param, Bag - 9. nov. 7 Kinematika, inverz kinematika, szimul\u00e1lt robotkar programoz\u00e1sa csukl\u00f3-, \u00e9s munkat\u00e9rben I. - 10. nov. 14 Kinematika, inverz kinematika, szimul\u00e1lt robotkar programoz\u00e1sa csukl\u00f3-, \u00e9s munkat\u00e9rben II. - 11. nov. 21 Rektori sz\u00fcnet. 12. nov. 28 ROS service, ROS action fogalma, felhaszn\u00e1l\u00e1sa - 13. dec. 5 Projekt labor II. (Laboron a jelenl\u00e9t opcion\u00e1lis) ZH2 14. dec. 12 K\u00f6telez\u0151 programok bemutat\u00e1sa. P\u00f3t ZH 14+1. ? - Al\u00e1\u00edr\u00e1sp\u00f3tl\u00f3 <p>Warning</p> <p>A f\u00e9l\u00e9v sor\u00e1n az \u00fctemez\u00e9s v\u00e1ltozhat!</p>"},{"location":"#kovetelmenyek","title":"K\u00f6vetelm\u00e9nyek","text":""},{"location":"#kotelezo-program","title":"K\u00f6telez\u0151 program","text":"<ul> <li>Bizony\u00edtottan saj\u00e1t munka</li> <li>\u00c9rt\u00e9kelhet\u0151 eredm\u00e9nyeket produk\u00e1ljon</li> <li>Pontoz\u00e1s: a megold\u00e1s teljess\u00e9ge, megfelel\u0151 ROS kommunik\u00e1ci\u00f3 alkalmaz\u00e1sa, program c\u00e9lszer\u0171 szerkezete, az implement\u00e1ci\u00f3 min\u0151s\u00e9ge, a k\u00f3d dokument\u00e1l\u00e1sa</li> </ul>"},{"location":"#evkozi-jegy","title":"\u00c9vk\u00f6zi jegy","text":"<p>A jelenl\u00e9t az \u00f3r\u00e1kon k\u00f6telez\u0151 (min 70%, vagyis maximum 3 hi\u00e1nyz\u00e1s).</p> <p>A f\u00e9l\u00e9v elfogad\u00e1s\u00e1nak felt\u00e9tele, hogy mind a k\u00e9t ZH, mind a k\u00f6telez\u0151 program \u00e9rt\u00e9kel\u00e9se legal\u00e1bb el\u00e9gs\u00e9ges.</p> <p>F\u00e9l\u00e9v v\u00e9gi jegy</p> <p>\\(Jegy = (ZH1 + ZH2 + 2 \\times K\u00f6tProg) / 4\\) </p> <p>A k\u00e9t ZH k\u00f6z\u00fcl egy a szorgalmi id\u0151szak utols\u00f3 het\u00e9ben p\u00f3tolhat\u00f3. Az \u00e9vk\u00f6zi jegy p\u00f3tl\u00f3 alkalmon egy ZH illetve a projekt bemutat\u00e1sa p\u00f3tolhat\u00f3.</p>"},{"location":"#bejczy-antal-intelligens-robottechnikai-kozpont-bark","title":"Bejczy Antal Intelligens Robottechnikai K\u00f6zpont (BARK)","text":"<p>https://irob.uni-obuda.hu</p>"},{"location":"#irob-saf","title":"irob-saf","text":"<p>(iRob Surgical Automation Framework)</p> <p>https://github.com/ABC-iRobotics/irob-saf</p>"},{"location":"01_system_setup/","title":"01. Bevezet\u00e9s","text":""},{"location":"01_system_setup/#robot-operating-system-ros-bevezetes","title":"Robot Operating System (ROS) bevezet\u00e9s","text":""},{"location":"01_system_setup/#a-robot-fogalma","title":"A robot fogalma","text":"<ul> <li>Joseph Engelberger, pioneer in industrial robotics: \"I can't define a robot, but I know one when I see one.\"</li> <li>Wikipedia: \"A robot is a machine\u2014especially one programmable by a computer\u2014 capable of carrying out a complex series of actions automatically. Robots can be guided by an external control device or the control may be embedded within. Robots may be constructed on the lines of human form, but most robots are machines designed to perform a task with no regard to their aesthetics.\"</li> <li>ISO 8373:2012 Robots and robotic devices \u2013 Vocabulary, FDIS 2012: \"A robot is an actuated mechanism programmable in two or more axes with a degree of autonomy, moving within its environment, to perform intended tasks.\"</li> <li>Rodney Brooks, Founder and CTO, Rethink Robotics: \"A robot is some sort of device, wich has sensors those sensors the world, does some sort of computation, decides on an action, and then does that action based on the sensory input, which makes some change out in the world, outside its body. Comment: the part \"make some change outside its body\" discriminates a washing machine from e.g. a Roomba.\"</li> <li>Tam\u00e1s Haidegger, Encyclopedia of Robotics: \"A robot is a complex mechatronic system enabled with electronics, sensors, actuators and software, executing tasks with a certain degree of autonomy. It may be pre-programmed, teleoperated or carrying out computations to make decisions.\"</li> </ul>"},{"location":"01_system_setup/#mi-a-ros","title":"Mi a ROS?","text":"<ul> <li>Open-source, robotikai c\u00e9l\u00fa middleware</li> <li>Modularit\u00e1s, \u00fajra-felhaszn\u00e1lhat\u00f3s\u00e1g (driverek, algoritmusok, library-k, ...)</li> <li>Hardware absztrakci\u00f3, ROS API</li> <li>C++ \u00e9s Python t\u00e1mogat\u00e1s</li> <li>Ubuntu Linux (kiv\u00e9ve ROS 2)</li> <li>N\u00e9pes k\u00f6z\u00f6ss\u00e9g</li> </ul>"},{"location":"01_system_setup/#tortenet","title":"T\u00f6rt\u00e9net","text":"<ul> <li>2000-es \u00e9vek k\u00f6zepe, Stanford: robotikai c\u00e9l\u00fa rugalmas, dinamikus szoftverrendszer protot\u00edpusok fejleszt\u00e9se</li> <li>2007, Willow Garage: inkub\u00e1ci\u00f3, kialakult a ROS alapja BSD open-source licensz alatt</li> <li>Robotikai kutat\u00e1sok ter\u00fclet\u00e9n egyre ink\u00e1bb elterjedt, PR2</li> <li>2012: Ipari robotika, ROS-Industrial</li> <li>2017: ROS 2</li> </ul>"},{"location":"01_system_setup/#fejlesztokornyezet-felallitasa-hazi-feladat","title":"Fejleszt\u0151k\u00f6rnyezet fel\u00e1ll\u00edt\u00e1sa - H\u00e1zi feladat","text":"<p>Aj\u00e1nlott k\u00f6rnyezet:</p> <ul> <li>Ubuntu 22.04</li> <li>ROS2 Humble</li> <li>IDE: QtCreator/CLion/VSCode</li> </ul> <p>Suggestion</p> <p>Aki nem szeretne nat\u00edv Linuxot telep\u00edteni: WSL (Windows Subsystem for Linux) --- szint\u00e9n Ubuntu 22.04 + ROS 2 Humble</p>"},{"location":"01_system_setup/#ros-2-humble-hawksbill","title":"ROS 2 Humble Hawksbill","text":"<ol> <li> <p>Locale be\u00e1ll\u00edt\u00e1sa.</p> <pre><code>locale  # check for UTF-8\n\nsudo apt update &amp;&amp; sudo apt install locales\nsudo locale-gen en_US en_US.UTF-8\nsudo update-locale LC_ALL=en_US.UTF-8 LANG=en_US.UTF-8\nexport LANG=en_US.UTF-8\n\nlocale  # verify settings\n</code></pre> </li> <li> <p>ROS 2 Humble telep\u00edt\u00e9se</p> <pre><code>sudo apt install software-properties-common\nsudo add-apt-repository universe\nsudo apt update &amp;&amp; sudo apt install curl -y\nsudo curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key -o /usr/share/keyrings/ros-archive-keyring.gpg\necho \"deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu $(. /etc/os-release &amp;&amp; echo $UBUNTU_CODENAME) main\" | sudo tee /etc/apt/sources.list.d/ros2.list &gt; /dev/null\nsudo apt update\nsudo apt upgrade\nsudo apt install ros-humble-desktop\nsudo apt install ros-dev-tools\n</code></pre> </li> <li> <p>Ha ezzel megvagyunk, a k\u00f6vetkez\u0151 parancssal tesztelhetj\u00fck a ROS 2 telep\u00edt\u00e9s\u00fcnket:</p> <pre><code>source /opt/ros/humble/setup.bash\nros2 run demo_nodes_py talker\n</code></pre> </li> <li> <p>A <code>source</code> parancs a k\u00f6rnyezeti v\u00e1ltoz\u00f3k be\u00e1ll\u00edt\u00e1s\u00e1\u00e9rt felel\u0151s, ezt minden \u00faj termin\u00e1lablak megnyit\u00e1sakor meg kell(ene) adni. Ez a parancs beilleszthet\u0151 a <code>~/.bashrc</code> f\u00e1jl v\u00e9g\u00e9re, amely minden termin\u00e1lablak megnyit\u00e1sakor lefut, \u00edgy nem kell mindig be\u00edrnunk (ROS 2 lesz az alap\u00e9rtelmezett):</p> <pre><code>echo \"source /opt/ros/humble/setup.bash\" &gt;&gt; ~/.bashrc\n</code></pre> </li> </ol>"},{"location":"01_system_setup/#tovabbi-csomagok","title":"Tov\u00e1bbi csomagok","text":"<ol> <li> <p>Az al\u00e1bbi csomagokra is sz\u00fcks\u00e9g lesz a f\u00e9l\u00e9v sor\u00e1n, \u00edgy ezeket is \u00e9rdemes feltelep\u00edteni:</p> <pre><code>sudo apt install libxml2-dev libraw1394-dev libncurses5-dev qtcreator swig sox espeak cmake-curses-gui cmake-qt-gui git subversion gfortran libcppunit-dev libqt5xmlpatterns5-dev python3-osrf-pycommon libasound2-dev libgl1-mesa-dev xorg-dev python3-vcstool python3-colcon-common-extensions python3-pykdl python3-pyudev libxml2-dev libraw1394-dev libncurses5-dev qtcreator swig sox espeak cmake-curses-gui cmake-qt-gui git subversion gfortran libcppunit-dev libqt5xmlpatterns5-dev libbluetooth-dev ros-humble-joint-state-publisher* ros-humble-xacro gfortran-9\n</code></pre> </li> </ol>"},{"location":"01_system_setup/#ide","title":"IDE","text":"<ol> <li> <p>QtCreator</p> <p>ROS csomagok fejleszt\u00e9s\u00e9hez jelenleg az egyik legink\u00e1bb haszn\u00e1lhat\u00f3 IDE a QtCreator, melyhez ROS plugin is k\u00e9sz\u00fclt. Az installer az al\u00e1bbi linken el\u00e9rhet\u0151. A \"18.04 offline installer\"-t \u00e9rdemes haszn\u00e1lni, ez m\u0171k\u00f6dik Ubunutu 22.04-en is.</p> <p>https://ros-qtc-plugin.readthedocs.io/en/latest/_source/How-to-Install-Users.html</p> <p>Ha let\u00f6lt\u00f6tt\u00fck, az IDE az al\u00e1bbi paranccsal telep\u00edthet\u0151 (fontos, hogy <code>cd</code>zz\u00fcnk be a let\u00f6lt\u00e9s hely\u00e9re):</p> <pre><code>chmod +x qtcreator-ros-bionic-latest-offline-installer.run\nsudo ./qtcreator-ros-bionic-latest-offline-installer.run\n</code></pre> <p>Amikor a telep\u00edt\u0151 k\u00e9rdezi, hova telep\u00edtse, m\u00f3dos\u00edtsuk pl. <code>/home/&lt;USER&gt;/QtCreator</code> mapp\u00e1ra. Ha a root-ba tel\u00e9ep\u00edtj\u00fck, nem fogjuk tudni futtatni. A telep\u00edt\u00e9s ut\u00e1n \"Qt Creator (4.9.2)\" n\u00e9ven keress\u00fck.</p> </li> <li> <p>CLion</p> <p>A CLion magasfok\u00fa ROS integr\u00e1ci\u00f3val rendelkezik, a kurzus sor\u00e1n ennek a haszn\u00e1lata a legink\u00e1bb aj\u00e1nlott. Ingyenes hallgat\u00f3i licensz az al\u00e1bbi linken ig\u00e9nyelhet\u0151: https://www.jetbrains.com/community/education/#students</p> <p>Telep\u00edt\u00e9s ut\u00e1n keress\u00fck meg a <code>/var/lib/snapd/desktop/applications/clion_clion.desktop</code> f\u00e1jlt. A megfelel\u0151 sort \u00edrjuk \u00e1t erre, \u00edgy a termin\u00e1l \u00e1ltal be\u00e1ll\u00edtott k\u00f6rnyezetet fogja haszn\u00e1lni az IDE:</p> <pre><code>Exec=bash -i -c \"/snap/bin/clion\" %f\n</code></pre> </li> <li> <p>Visual Studio</p> <p>A Microsoft Visual Studio szint\u00e9n t\u00e1mogatja a ROS-hoz k\u00e9sz\u00fclt forr\u00e1sk\u00f3dokat, ez az IDE is haszn\u00e1lhat\u00f3 a f\u00e9l\u00e9v sor\u00e1n.</p> </li> </ol> <p>Suggestion</p> <p>Install Terminator terminal emulator: <pre><code>sudo apt update\nsudo apt install terminator\n</code></pre></p>"},{"location":"01_system_setup/#hasznos-linkek","title":"Hasznos linkek","text":"<ul> <li>https://www.ros.org/</li> <li>ROS 2 Humble installation</li> <li>ROS Distributions</li> <li>http://wiki.ros.org/ROS/Tutorials</li> <li>CLion hallgat\u00f3i licensz</li> <li>QtCreator + ROS plugin</li> <li>ROS 2 Humble installation on WSL</li> </ul>"},{"location":"02_linux_ros_principles/","title":"02. Linux, ROS alapismeretek","text":""},{"location":"02_linux_ros_principles/#elmelet","title":"Elm\u00e9let","text":""},{"location":"02_linux_ros_principles/#ros-1-ros-2","title":"ROS 1 \u2192 ROS 2","text":"<ul> <li>ROS 2 was rewritten from scratch</li> <li>More modular architecture</li> <li>Improved support for real-time systems</li> <li>Support for multiple communication protocols</li> <li>Better interoperability with other robotic systems</li> <li>Focus on standardization and industry collaboration</li> <li>No ROS Master</li> <li>No Devel space</li> <li><code>rclpy</code>, <code>rclcpp</code></li> <li>More structured code (<code>Node</code> class)</li> <li>Different build system</li> <li>Platforms: Windows, OS X, Linux</li> </ul>"},{"location":"02_linux_ros_principles/#ros-principles","title":"ROS principles","text":""},{"location":"02_linux_ros_principles/#ros-node","title":"ROS node","text":"<ul> <li>Executable part of ROS:<ul> <li>python scripts</li> <li>compiled C++ code</li> </ul> </li> <li>A process that performs computation</li> <li>Inter-node communication:<ul> <li>ROS topics (streams)</li> <li>ROS parameter server</li> <li>Remote Procedure Calls (RPC)</li> <li>ROS services</li> <li>ROS actions</li> </ul> </li> <li>Meant to operate at a fine-grained scale</li> <li>Typically, a robot control system consists of many nodes, like:<ul> <li>Trajectory planning</li> <li>Localization</li> <li>Read sensory data</li> <li>Process sensory data</li> <li>Motor control</li> <li>User interface</li> <li>etc.</li> </ul> </li> </ul>"},{"location":"02_linux_ros_principles/#ros-workspace","title":"ROS workspace","text":"<p>Colcon workspace</p> <p>A folder where packages are modified, built, and installed.</p> <p></p> <ul> <li>Source space:<ul> <li>Source code of colcon packages</li> <li>Space where you can extract/checkout/clone source code for the packages you want to build</li> </ul> </li> <li>Build space<ul> <li>Colcon is invoked here to build packages</li> <li>Colcon and CMake keep intermediate files here</li> </ul> </li> <li>Install space:<ul> <li>Each package will be installed here; by default each package will be installed into a separate subdirectory</li> </ul> </li> <li>Log space:<ul> <li>Contains various logging information about each colcon invocation</li> </ul> </li> </ul> <p>ROS package principle</p> <p>Enough functionality to be useful, but not too much that the package is heavyweight and difficult to use from other software.</p> <p>ROS dependencies</p> <p>After cloning a new package, use the following command to install depenencies: <pre><code>rosdep install --from-paths src --ignore-src -r -y\n</code></pre></p>"},{"location":"02_linux_ros_principles/#ros-package","title":"ROS package","text":"<ul> <li>Main unit to organize software in ROS</li> <li>Buildable and redistributable unit of ROS code</li> <li>Consists of (in the case of Python packages):<ul> <li><code>package.xml</code> file containing meta information about the package<ul> <li>name</li> <li>version</li> <li>description</li> <li>dependencies</li> <li>etc.</li> </ul> </li> <li><code>setup.py</code> containing instructions for how to install the package</li> <li><code>setup.cfg</code> is required when a package has executables, so ros2 run can find them </li> <li><code>/&lt;package_name&gt;</code> - a directory with the same name as your package, used by ROS 2 tools to find your package, contains <code>__init__.py</code></li> <li>Anything else</li> </ul> </li> <li><code>ros2 run turtlesim turtlesim_node</code></li> </ul> <p>CMake</p> <p>For CMake packages (C++), the package contents will be different.</p> <p></p>"},{"location":"02_linux_ros_principles/#ros-build-system-colcon","title":"ROS build system---Colcon","text":"<ul> <li>System for building software packages in ROS</li> </ul>"},{"location":"02_linux_ros_principles/#linux-principles","title":"Linux principles","text":"<ul> <li>(Was) the only OS supported by ROS</li> <li>Security</li> <li>Efficieny</li> <li>Open-source</li> <li>Community support</li> <li>User freedom</li> <li>Distributions: Ubuntu, Linux Mint, Debian, etc.</li> <li>Terminal usage more dominant</li> </ul> <p>Suggestion</p> <p>Install Terminator terminal emulator: <pre><code>sudo apt update\nsudo apt install terminator\n</code></pre></p>"},{"location":"02_linux_ros_principles/#linux-commands","title":"Linux commands","text":"<p>See some basic commands below:</p> <ul> <li>Run as administrator with <code>sudo</code></li> <li>Manual of command <code>man</code>, e.g. <code>man cp</code></li> <li>Package management <code>apt</code>, e.g. <code>apt update</code>, <code>apt install</code></li> <li>Navigation <code>cd</code></li> <li>List directory contents <code>ls</code></li> <li>Create file <code>touch</code></li> <li>Copy file <code>cp</code></li> <li>Move file <code>mv</code></li> <li>Remove file <code>rm</code></li> <li>Make directory <code>mkdir</code></li> <li>Remove directory <code>rmdir</code></li> <li>Make a file executable <code>chmod +x &lt;filename&gt;</code></li> <li>Safe restart: Crtl + Alt + PrtScr + REISUB</li> <li>If not sure, just google the command</li> </ul>"},{"location":"02_linux_ros_principles/#environmental-setup-file","title":"Environmental setup file","text":"<ul> <li>setup.bash</li> <li>generated during init process of a new workspace</li> <li>extends shell environment</li> <li>ROS can find any resources that have been installed or built to that location</li> </ul> <pre><code>source ~/ros2_ws/install/setup.bash\n</code></pre>"},{"location":"02_linux_ros_principles/#gyakorlat","title":"Gyakorlat","text":""},{"location":"02_linux_ros_principles/#1-linux-gyakorlas","title":"1: Linux gyakorl\u00e1s","text":"<ol> <li> <p>Hozzunk l\u00e9tre egy \u00faj mapp\u00e1t a home k\u00f6nyvt\u00e1rban a  <code>mkdir</code> parancs seg\u00edts\u00e9g\u00e9vel.</p> <pre><code>mkdir ~/test_folder\n</code></pre> </li> <li> <p>Navig\u00e1ljunk a l\u00e9trehozott mapp\u00e1ba a <code>cd</code> parancs haszn\u00e1lat\u00e1val.</p> <pre><code>cd ~/test_folder\n</code></pre> </li> <li> <p>Hozzunk l\u00e9tre egy \u00faj Python f\u00e1jlt a <code>touch</code> parancs seg\u00edts\u00e9g\u00e9vel, nevezz\u00fck el \"hello.py\"-nek.</p> <pre><code>touch hello.py\n</code></pre> </li> <li> <p>Nyissuk meg a \"hello.py\" f\u00e1jlt a Gedit sz\u00f6vegszerkeszt\u0151vel, haszn\u00e1ljuk a <code>gedit</code>  parancsot.</p> <pre><code>gedit hello.py\n</code></pre> </li> <li> <p>\u00cdrjunk egy egyszer\u0171 Python programot a \"hello.py\" f\u00e1jlba, p\u00e9ld\u00e1ul:</p> <pre><code>#!/usr/bin/python3\nprint(\"Hello, World!\")\n</code></pre> </li> <li> <p>Ment\u00e9s ut\u00e1n k\u00e9sz\u00edts\u00fcnk m\u00e1solatot a \"hello.py\" f\u00e1jlb\u00f3l egy m\u00e1sik n\u00e9ven (pl.: \"hello_copy.py\") a <code>cp</code> parancs seg\u00edts\u00e9g\u00e9vel.</p> <pre><code>cp hello.py hello_copy.py\n</code></pre> </li> <li> <p>Ellen\u0151rizz\u00fck, hogy a m\u00e1solat elk\u00e9sz\u00fclt-e az <code>ls</code> parancs haszn\u00e1lat\u00e1val.</p> <pre><code>ls\n</code></pre> </li> <li> <p>Futtassuk a \"hello.py\" f\u00e1jlt a <code>python3</code> el\u0151taggal.</p> <pre><code>python3 hello.py\n</code></pre> </li> <li> <p>K\u00e9sz\u00edts\u00fcnk egy shell szkriptf\u00e1jlt, majd nyissuk is meg a Gedit seg\u00edts\u00e9g\u00e9vel. Nevezz\u00fck el \"myscript.sh\"-nek.</p> <pre><code>gedit myscript.sh\n</code></pre> </li> <li> <p>\u00cdrjunk egy egyszer\u0171 shell szkriptet a <code>myscript.sh</code> f\u00e1jlba, p\u00e9ld\u00e1ul:</p> <pre><code>#!/bin/bash\necho \"I make another copy of hello.py!\"\ncp hello.py another_hello_copy.py\n</code></pre> </li> <li> <p>Adjunk futtat\u00e1si jogosults\u00e1got a <code>myscript.sh</code> f\u00e1jlnak a <code>chmod</code> parancs seg\u00edts\u00e9g\u00e9vel.</p> <pre><code>chmod +x myscript.sh\n</code></pre> </li> <li> <p>Futtassuk a <code>myscript.sh</code> f\u00e1jlt a <code>./</code> el\u0151taggal.</p> <pre><code>./myscript.sh\n</code></pre> </li> <li> <p>Ellen\u0151rizz\u00fck, hogy az \u00fajabb m\u00e1solat elk\u00e9sz\u00fclt-e az <code>ls</code> parancs haszn\u00e1lat\u00e1val.</p> <pre><code>ls\n</code></pre> </li> </ol>"},{"location":"02_linux_ros_principles/#2-turtlesim","title":"2: Turtlesim","text":"<ol> <li> <p>Ind\u00edtsuk el a <code>turtlesim_node</code>-ot \u00e9s a <code>turtle_teleop_key</code> node-ot az al\u00e1bbi parancsokkal, k\u00fcl\u00f6-k\u00fcl\u00f6n termin\u00e1l ablakokban:</p> <pre><code>ros2 run turtlesim turtlesim_node\n</code></pre> <pre><code>ros2 run turtlesim turtle_teleop_key\n</code></pre> <p>Tip</p> <p>Terminator-ban <code>Ctrl-Shift-O</code>, <code>Ctrl-Shift-E</code> billenty\u0171 kombin\u00e1ci\u00f3kkal oszthatjuk tov\u00e1bb az adott ablakot. <code>Ctrl-Shift-W</code> bez\u00e1rja az akt\u00edv ablakot.</p> <p>Futtat\u00e1s megszak\u00edt\u00e1sa</p> <p><code>Ctrl-C</code></p> </li> <li> <p>Az al\u00e1bbi ROS parancsok futtat\u00e1sa hasznos inform\u00e1ci\u00f3kkal szolg\u00e1lhat:</p> <pre><code>ros2 wtf\nros2 node list\nros2 node info /turtlesim\nros2 topic list\nros2 topic info /turtle1/cmd_vel\nros2 interface show geometry_msgs/msg/Twist\nros2 topic echo /turtle1/cmd_vel\n</code></pre> </li> <li> <p>Az al\u00e1bbi paranccsal ind\u00edtsuk el az <code>rqt_gui</code>-t:</p> <pre><code>ros2 run rqt_gui rqt_gui\n</code></pre> </li> <li> <p>Jelen\u00edts\u00fck meg a fut\u00f3 node-okat \u00e9s topic-okat <code>rqt_gui</code>-ban: Plugins \u2192 Introspection \u2192 Node Graph.</p> </li> <li> <p>Publik\u00e1ljunk a <code>/turtle1/cmd_vel</code> topic-ba szint\u00e9n az <code>rqt_gui</code> felhaszn\u00e1l\u00e1s\u00e1val: Plugins \u2192 Topics \u2192 Message Publisher.</p> <p></p> </li> </ol>"},{"location":"02_linux_ros_principles/#3-ros-2-workspace-letrehozasa","title":"3: ROS 2 workspace l\u00e9trehoz\u00e1sa","text":"<ol> <li> <p>Hozzunk l\u00e9tre \u00faj ROS2 workspace-t <code>ros2_ws</code> n\u00e9vvel.</p> <pre><code>mkdir -p ~/ros2_ws/src\n</code></pre> </li> </ol>"},{"location":"02_linux_ros_principles/#4-ros-2-package-letrehozasa","title":"4: ROS 2 package l\u00e9trehoz\u00e1sa","text":"<ol> <li> <p>Hozzunk l\u00e9tre \u00faj ROS2 package-et <code>ros2_course</code> n\u00e9vvel \u00e9s egy Hello World-del.</p> <pre><code>cd ~/ros2_ws/src\nros2 pkg create --build-type ament_python --node-name hello ros2_course\n</code></pre> <p>Szintaxis</p> <p><code>ros2 pkg create --build-type ament_python &lt;package_name&gt;</code></p> </li> <li> <p>Build-elj\u00fck a workspace-t.</p> <pre><code>cd ~/ros2_ws\ncolcon build --symlink-install\n</code></pre> <p>Symlink</p> <p>A <code>--symlink-install</code> opci\u00f3 az Install space-be belinkeli a forr\u00e1s script-eket, \u00edgy m\u00f3dos\u00edt\u00e1s ut\u00e1n nem kell \u00fajra build-eln\u00fcnk.  </p> </li> <li> <p>A <code>~/.bashrc</code> f\u00e1jl v\u00e9g\u00e9re illessz\u00fck be az al\u00e1bbi sorokat:</p> <pre><code>source ~/ros2_ws/install/setup.bash\nexport ROS_DOMAIN_ID=12\n</code></pre> <p>Import\u00e1l\u00e1s QtCreator-ba</p> <p>New file or project \u2192 Other project \u2192 ROS Workspace. V\u00e1lasszuk ki a Colcon-t, mint Build System, \u00e9s a <code>ros2_ws</code>-t, mint Worksapce path.</p> <p>Import\u00e1l\u00e1s CLion-ba</p> <p>\u00c1ll\u00edtsuk be a Python interpretert Python 3.10-re, <code>/usr/bin/python3.10</code>. Adjuk hozz\u00e1 ak\u00f6vetkez\u0151 el\u00e9r\u00e9si utat: <code>/opt/ros/humble/lib/python3.10/site-packages</code>. Hozzuk l\u00e9tre a <code>compile_commands.json</code> f\u00e1jlt a <code>~/ros2_ws/build</code> k\u00f6nyvt\u00e1rban az al\u00e1bbi tartalommal: <pre><code>[\n]\n</code></pre></p> </li> <li> <p>Tesztelj\u00fck a Hello World m\u0171k\u00f6d\u00e9s\u00e9t:</p> <pre><code>ros2 run ros2_course hello \n</code></pre> </li> </ol>"},{"location":"02_linux_ros_principles/#5-publisher-implementalasa-python-ban","title":"5: Publisher implement\u00e1l\u00e1sa Python-ban","text":"<ol> <li> <p>Navig\u00e1ljunk a <code>ros2_ws/src/ros2_course/ros2_course</code> mapp\u00e1ba \u00e9s hozzuk l\u00e9tre a <code>talker.py</code> f\u00e1jlt az al\u00e1bbi tartalommal.</p> <pre><code>import rclpy\nfrom rclpy.node import Node\n\nfrom std_msgs.msg import String\n\n\nclass Talker(Node):\n\n    def __init__(self):\n        super().__init__('talker')\n        self.publisher_ = self.create_publisher(String, 'chatter', 10)\n        timer_period = 0.5  # seconds\n        self.timer = self.create_timer(timer_period, self.timer_callback)\n        self.i = 0\n\n    def timer_callback(self):\n        msg = String()\n        msg.data = 'Hello World: %d' % self.i\n        self.publisher_.publish(msg)\n        self.get_logger().info('Publishing: \"%s\"' % msg.data)\n        self.i += 1\n\n\ndef main(args=None):\n    rclpy.init(args=args)\n    talker = Talker()\n    rclpy.spin(talker)\n\n    # Destroy the node explicitly\n    # (optional - otherwise it will be done automatically\n    # when the garbage collector destroys the node object)\n    talker.destroy_node()\n    rclpy.shutdown()\n\n\nif __name__ == '__main__':\n    main()\n</code></pre> </li> <li> <p>A <code>setup.py</code> f\u00e1jlban adjunk meg egy \u00faj entry point-on:</p> <pre><code>'talker = ros2_course.talker:main',\n</code></pre> </li> <li> <p>Build-elj\u00fck \u00e9s futtassuk a node-ot:</p> <pre><code>cd ~/ros2_ws\ncolcon build --symlink-install\nros2 run ros2_course talker\n</code></pre> </li> <li> <p>Ellen\u0151rizz\u00fck le a node kimenet\u00e9t a <code>ros2 topic echo</code> parancs vagy az <code>rqt_gui</code> haszn\u00e1lat\u00e1val.</p> </li> </ol>"},{"location":"02_linux_ros_principles/#6-subscriber-implementalasa-python-ban","title":"6: Subscriber implement\u00e1l\u00e1sa Python-ban","text":"<ol> <li> <p>Navig\u00e1ljunk a <code>ros2_ws/src/ros2_course/ros2_course</code> mapp\u00e1ba \u00e9s hozzuk l\u00e9tre a <code>listener.py</code> f\u00e1jlt az al\u00e1bbi tartalommal.</p> <pre><code>import rclpy\nfrom rclpy.node import Node\nfrom std_msgs.msg import String\n\n\nclass Listener(Node):\n\n    def __init__(self):\n        super().__init__('listener')\n        self.subscription = self.create_subscription(\n            String,\n            'chatter',\n            self.listener_callback,\n            10)\n        self.subscription  # prevent unused variable warning\n\n    def listener_callback(self, msg):\n        self.get_logger().info('I heard msg: \"%s\"' % msg.data)\n\n\ndef main(args=None):\n    rclpy.init(args=args)\n    listener = Listener()\n    rclpy.spin(listener)\n\n    # Destroy the node explicitly\n    # (optional - otherwise it will be done automatically\n    # when the garbage collector destroys the node object)\n    listener.destroy_node()\n    rclpy.shutdown()\n\nif __name__ == '__main__':\n    main()\n</code></pre> </li> <li> <p>A <code>setup.py</code> f\u00e1jlban adjunk meg egy \u00faj entry point-on:</p> <pre><code>'listener = ros2_course.listener:main',\n</code></pre> </li> <li> <p>Build-elj\u00fck \u00e9s futtassuk mind a 2 node-ot:</p> <pre><code>cd ~/ros2_ws\ncolcon build --symlink-install\nros2 run ros2_course talker\n</code></pre> <pre><code>ros2 run ros2_course listener\n</code></pre> </li> <li> <p>Az <code>rqt_gui</code> haszn\u00e1lat\u00e1val jelen\u00edttess\u00fck meg a fut\u00f3 rendszer node-jait \u00e9s topic-jait:</p> <pre><code>ros2 run rqt_gui rqt_gui\n</code></pre> </li> </ol>"},{"location":"02_linux_ros_principles/#hasznos-linkek","title":"Hasznos linkek","text":"<ul> <li>ROS 2 Tutorials</li> <li>What is a ROS 2 package?</li> </ul>"},{"location":"03_python_principles/","title":"03. Python alapismeretek, ROS Publisher, ROS Subscriber","text":""},{"location":"03_python_principles/#elmelet","title":"Elm\u00e9let","text":""},{"location":"03_python_principles/#python-principles","title":"Python principles","text":"<ul> <li>Interpreted, high-level programming language</li> <li>Name tribute to the comedy group Monty Python</li> <li>Powerful, still easy to learn, easy to use</li> <li>Readability</li> <li>Whitespace indentation</li> </ul> <ul> <li>Dynamically-typed</li> <li>Garbage colector and reference counting</li> <li>Object oriented programming</li> <li>Used in: AI, web applications, scientific computing, and many other areas</li> <li><code>python3</code></li> </ul>"},{"location":"03_python_principles/#python-syntax","title":"Python syntax","text":"<pre><code>import numpy as np\nimport math\n\nclass A:\n    def __init__(self, name):\n        self.name = name\n\n    def do_something(self):\n        # will do something\n        print(self.name + \" is doing something.\")\n\n    def count_to(self, n):\n        # count to n, tell if the number is odd or even\n        for i in range(n):\n            if i % 2 == 0:\n                print(i + \", it's even.\")\n            else:\n                print(i + \", it's odd.\")\n\n\n\nif __name__ == \"__main__\":\n    a = A(\"John\")\n    a.do_something()\n    a.count_to(10)\n</code></pre>"},{"location":"03_python_principles/#gyakorlat","title":"Gyakorlat","text":""},{"location":"03_python_principles/#1-teknoc-mozgatasa-egyenes-menten","title":"1: Tekn\u0151c mozgat\u00e1sa egyenes ment\u00e9n","text":"<ol> <li> <p>\u00cdrjunk ROS node-ot, amely el\u0151re, egyenes ment\u00e9n megadott t\u00e1vols\u00e1gra mozgatja a tekn\u0151c\u00f6t. Nyissunk meg egy termin\u00e1lt. Huzzuk l\u00e9tre a <code>~/ros2_ws/src/ros2_course/ros2_course</code> k\u00f6nyvt\u00e1runkban a <code>turtlesim_controller.py</code> f\u00e1jlt:</p> <p> </p> <pre><code>cd ros2_ws/src/ros2_course/ros2_course\ntouch turtlesim_controller.py\n</code></pre> </li> <li> <p>A <code>setup.py</code> f\u00e1jlban adjunk meg egy \u00faj entry point-on:</p> <pre><code>'turtlesim_controller = ros2_course.turtlesim_controller:main',\n</code></pre> </li> <li> <p>M\u00e1soljuk be a <code>turtlesim_controller.py</code>-ba a program v\u00e1z\u00e1t:</p> <pre><code>import math\nimport rclpy\nfrom rclpy.node import Node\n\n\nclass TurtlesimController(Node):\n\n    def __init__(self):\n        super().__init__('turtlesim_controller')\n\n\n    def go_straight(self, speed, distance):\n        # Implement straght motion here\n\n\ndef main(args=None):\n    rclpy.init(args=args)\n    tc = TurtlesimController()\n\n    # Destroy the node explicitly\n    # (optional - otherwise it will be done automatically\n    # when the garbage collector destroys the node object)\n    tc.destroy_node()\n    rclpy.shutdown()\n\nif __name__ == '__main__':\n    main()\n</code></pre> </li> <li> <p>Ind\u00edtsunk egy egy <code>turtlesim_node</code>-ot, majd vizsg\u00e1ljuk meg a topic-ot, amellyel ir\u00e1ny\u00edthatjuk. K\u00e9t k\u00fcl\u00f6n termin\u00e1lablakban:</p> <pre><code>ros2 run turtlesim turtlesim_node\n</code></pre> <pre><code>ros2 topic list\nros2 topic info /turtle1/cmd_vel\nros2 interface show geometry_msgs/msg/Twist\n</code></pre> <p>Vagy haszn\u00e1ljuk az <code>rqt_gui</code>-t:</p> <pre><code>ros2 run rqt_gui rqt_gui\n</code></pre> </li> <li> <p>Import\u00e1ljuk a <code>geometry_msgs/msg/Twist</code> \u00fczenett\u00edpust \u00e9s hozzuk l\u00e9tre a publishert a <code>turtlesim_controller.py</code>-ban:</p> <pre><code>from geometry_msgs.msg import Twist\n\n#...\n\n# In the constructor:\nself.twist_pub = self.create_publisher(Twist, '/turtle1/cmd_vel', 10)\n</code></pre> </li> <li> <p>Implement\u00e1ljuk a <code>go_straight</code> met\u00f3dust. Sz\u00e1m\u00edtsuk ki, mennyi ideig tart, hogy a megadott t\u00e1vols\u00e1got a megadott sebess\u00e9ggel megtegye a tekn\u0151c. Publik\u00e1ljunk \u00fczenetet, amivel be\u00e1ll\u00edtjuk a sebess\u00e9get, majd v\u00e1rjunk a kisz\u00e1m\u00edtott ideig, ezut\u00e1n k\u00fcldj\u00fcnk \u00fajabb \u00fczenetet, amellyel null\u00e1zzuk a sebess\u00e9get. Egy kis seg\u00edts\u00e9g az API haszn\u00e1lat\u00e1hoz:</p> <pre><code># Create and publish msg\nvel_msg = Twist()\nif distance &gt; 0:\n    vel_msg.linear.x = speed\nelse:\n    vel_msg.linear.x = -speed\nvel_msg.linear.y = 0.0\nvel_msg.linear.z = 0.0\nvel_msg.angular.x = 0.0\nvel_msg.angular.y = 0.0\nvel_msg.angular.z = 0.0\n\n# Set loop rate\nloop_rate = self.create_rate(100, self.get_clock()) # Hz\n\n# Calculate time\n# T = ...\n\n# Publish first msg and note time when to stop\nself.twist_pub.publish(vel_msg)\n# self.get_logger().info('Turtle started.')\nwhen = self.get_clock().now() + rclpy.time.Duration(seconds=T)\n\n# Publish msg while the calculated time is up\nwhile (some condition... and rclpy.ok()):\n    self.twist_pub.publish(vel_msg)\n    # self.get_logger().info('On its way...')\n    rclpy.spin_once(self)   # loop rate\n\n# turtle arrived, set velocity to 0\nvel_msg.linear.x = 0.0\nself.twist_pub.publish(vel_msg)\n# self.get_logger().info('Arrived to destination.')\n</code></pre> </li> <li> <p>Build-elj\u00fck \u00e9s futtassuk a node-ot:</p> <pre><code>cd ros2_ws\ncolcon build --symlink-install\nros2 run ros2_course turtlesim_controller\n</code></pre> </li> </ol>"},{"location":"03_python_principles/#2-alakzatok-rajolasa","title":"2: Alakzatok rajol\u00e1sa","text":"<ol> <li> <p>Implement\u00e1ljunk adott sz\u00f6ggel t\u00f6rt\u00e9n\u0151 elfordul\u00e1st megval\u00f3s\u00edt\u00f3 met\u00f3dust a <code>turtlesim_controller.py</code>-ban, az egyenes mozg\u00e1sshoz hasonl\u00f3 m\u00f3don.</p> <pre><code>def turn(self, omega, angle):\n        # Implement rotation here\n</code></pre> </li> <li> <p>Implement\u00e1ljunk a tekn\u0151ccel n\u00e9gyzetet rajzoltat\u00f3 met\u00f3dust az egyenes mozg\u00e1st \u00e9s a fordul\u00e1st v\u00e9grehajt\u00f3 met\u00f3dusok felhaszn\u00e1l\u00e1s\u00e1val.</p> <pre><code>def draw_square(self, speed, omega, a):\n</code></pre> </li> <li> <p>Implement\u00e1ljunk a tekn\u0151ccel tetsz\u0151leges szab\u00e1lyos alakzatot rajzoltat\u00f3 met\u00f3dust az egyenes mozg\u00e1st \u00e9s a fordul\u00e1st v\u00e9grehajt\u00f3 met\u00f3dusok felhaszn\u00e1l\u00e1s\u00e1val.</p> <pre><code>def draw_poly(self, speed, omega, N, a):\n</code></pre> </li> </ol>"},{"location":"03_python_principles/#3-go-to-funkcio-implementalasa","title":"3: Go to funkci\u00f3 implement\u00e1l\u00e1sa","text":"<ol> <li> <p>Vizsg\u00e1ljuk meg a topic-ot, amelyen a <code>turtlesim_node</code> a pillanatnyi poz\u00edci\u00f3j\u00e1t publik\u00e1lja. </p> <pre><code>ros2 topic list\nros2 topic info /turtle1/pose\nros2 interface show turtlesim/msg/Pose\n</code></pre> <p>Vagy haszn\u00e1ljuk az <code>rqt_gui</code>-t:  </p> <pre><code>ros2 run rqt_gui rqt_gui\n</code></pre> </li> <li> <p>Defini\u00e1ljunk subscriber-t a topichoz \u00e9s \u00edrjuk meg a callback f\u00fcggv\u00e9nyt.</p> <pre><code># Imports\nfrom turtlesim.msg import Pose\n\n    # Constructor\n    self.pose = None\n    self.subscription = self.create_subscription(\n        Pose,\n        '/turtle1/pose',\n        self.cb_pose,\n        10)\n\n    # New method for TurtlesimController\n    def cb_pose(self, msg):\n        self.pose = msg  \n</code></pre> </li> <li> <p>Implement\u00e1ljuk a <code>go_to</code> met\u00f3dust. Tesztelj\u00fck, h\u00edvjuk meg a main-b\u0151l.</p> <pre><code># ...\n\n# Go to method\n    def go_to(self, speed, omega, x, y):\n        # Wait for position to be received\n        loop_rate = self.create_rate(100, self.get_clock()) # Hz\n        while self.pose is None and rclpy.ok():\n            self.get_logger().info('Waiting for pose...')\n            rclpy.spin_once(self)\n\n        # Stuff with atan2\n\n\n# Main\ndef main(args=None):\n    rclpy.init(args=args)\n    tc = TurtlesimController()\n\n    tc.go_to(1.0, 20.0, 2, 8)\n    tc.go_to(1.0, 20.0, 2, 2)\n    tc.go_to(1.0, 20.0, 3, 4)\n    tc.go_to(1.0, 20.0, 6, 2)\n\n    # Destroy the node explicitly\n    # (optional - otherwise it will be done automatically\n    # when the garbage collector destroys the node object)\n    tc.destroy_node()\n    rclpy.shutdown()  \n</code></pre> <p></p> </li> </ol>"},{"location":"03_python_principles/#bonusz-advanced-go-to","title":"B\u00f3nusz: Advanced go to","text":"<p>\u00cdrjunk ar\u00e1nyos szab\u00e1lyoz\u00f3t haszn\u00e1l\u00f3 go to funcki\u00f3t.</p>"},{"location":"03_python_principles/#hasznos-linkek","title":"Hasznos linkek","text":"<ul> <li>For loops in python</li> <li>Some python functions</li> <li>Turtlesim help</li> <li>atan2</li> </ul>"},{"location":"04_da_vinci/","title":"04. Robotikai alapfogalmak, da Vinci seb\u00e9szrobot programoz\u00e1sa szimul\u00e1lt k\u00f6rnyezetben","text":"<p>Warning</p> <p>ZH1 (ROS alapok, publisher, subscriber. Python alapok. Robotikai alapfogalmak.) m\u00e1rcius 28. 10:45, BA.1.10</p>"},{"location":"04_da_vinci/#elmelet","title":"Elm\u00e9let","text":""},{"location":"04_da_vinci/#merev-test-mozgasa","title":"Merev test mozg\u00e1sa","text":"<p>Def. Merev test</p> <p>Merevnek tekinthet\u0151 az a test, mely pontjainak t\u00e1vols\u00e1ga mozg\u00e1s sor\u00e1n nem v\u00e1ltozik, vagyis b\u00e1rmely k\u00e9t pontj\u00e1nak t\u00e1vols\u00e1ga id\u0151ben \u00e1lland\u00f3.</p> <ul> <li>Merev test alakja, t\u00e9rfogata szint\u00e9n \u00e1lland\u00f3.</li> <li>Merev test t\u00e9rbeli helyzete megadhat\u00f3 b\u00e1rmely 3 nem egy egyenesbe es\u0151 pontj\u00e1nak helyzet\u00e9vel.</li> </ul> <p></p> <ul> <li> <p>A test helyzet\u00e9t szeml\u00e9letesebben megadhatjuk egy tetsz\u0151leges pontj\u00e1nak 3 koordin\u00e1t\u00e1j\u00e1val (poz\u00edci\u00f3) \u00e9s a test orient\u00e1ci\u00f3j\u00e1val.</p> </li> <li> <p>Merev testek mozg\u00e1sai k\u00e9t elemi mozg\u00e1sfajt\u00e1b\u00f3l tev\u0151dnek \u00f6ssze: halad\u00f3 mozg\u00e1s (transzl\u00e1ci\u00f3) \u00e9s tengely k\u00f6r\u00fcli forg\u00e1s (rot\u00e1ci\u00f3)</p> </li> <li> <p>Transzl\u00e1ci\u00f3s mozg\u00e1s sor\u00e1n a test minden pontja egym\u00e1ssal p\u00e1rhuzamos, egybev\u00e1g\u00f3 p\u00e1ly\u00e1t \u00edr le, a test orient\u00e1ci\u00f3ja pedig nem v\u00e1ltozik.</p> </li> </ul> <p></p> <ul> <li> <p>Rot\u00e1ci\u00f3  sor\u00e1n a forg\u00e1stengelyen l\u00e9v\u0151 pontok poz\u00edci\u00f3ja nem v\u00e1ltozik, a test t\u00f6bbi pontja pedig a forg\u00e1stengelyre mer\u0151leges s\u00edkokban k\u00f6rp\u00e1ly\u00e1n mozog.</p> </li> <li> <p>A merev test szabad mozg\u00e1sa is le\u00edrhat\u00f3 mint egyidej\u0171leg egy bizonyos tengely k\u00f6r\u00fcli forg\u00e1s \u00e9s egy halad\u00f3 mozg\u00e1s.</p> </li> </ul>"},{"location":"04_da_vinci/#3d-transzformaciok","title":"3D transzform\u00e1ci\u00f3k","text":"<ul> <li>Poz\u00edci\u00f3: 3 elem\u0171 offszet vektor  </li> <li> <p>Orient\u00e1ci\u00f3: 3 x 3 rot\u00e1ci\u00f3s matrix</p> <ul> <li>tov\u00e1bbi orient\u00e1ci\u00f3 reprezent\u00e1ci\u00f3k: Euler-sz\u00f6gek, RPY, angle axis, quaternion</li> </ul> </li> <li> <p>Helyzet (pose): 4 \u00d7 4 transzform\u00e1ci\u00f3s m\u00e1rtrix</p> </li> <li>Koordin\u00e1ta rendszer (frame): null pont, 3 tengely, 3 b\u00e1zis vektor, jobbk\u00e9z-szab\u00e1ly</li> <li>Homog\u00e9n transzform\u00e1ci\u00f3k: rot\u00e1ci\u00f3 \u00e9s transzl\u00e1ci\u00f3 egy\u00fctt<ul> <li>pl. \\(\\mathbf{R}\\) rot\u00e1ci\u00f3 \u00e9s \\(\\mathbf{v}\\) transzl\u00e1ci\u00f3 eset\u00e9n:</li> </ul> </li> </ul> \\[ \\mathbf{T} = \\left[\\matrix{\\mathbf{R} &amp; \\mathbf{v}\\\\\\mathbf{0} &amp; 1 }\\right] = \\left[\\matrix{r_{1,1} &amp; r_{1,2} &amp; r_{1,3} &amp; v_x\\\\r_{2,1} &amp; r_{2,2} &amp; r_{2,3} &amp; v_y\\\\r_{3,1} &amp; r_{3,2} &amp; r_{3,3} &amp; v_z\\\\\\ 0 &amp; 0 &amp; 0 &amp; 1 }\\right] \\] <ul> <li>Homog\u00e9n koordin\u00e1t\u00e1k: <ul> <li>Vektor: 0-val eg\u00e9sz\u00edtj\u00fck ki, \\(\\mathbf{a_H}=\\left[\\matrix{\\mathbf{a} \\\\ 0}\\right]=\\left[\\matrix{a_x \\\\ a_y \\\\ a_z \\\\ 0}\\right]\\)</li> <li>Pont: 1-gyel eg\u00e9sz\u00edtj\u00fck ki, \\(\\mathbf{p_H}=\\left[\\matrix{\\mathbf{p} \\\\ 1}\\right]=\\left[\\matrix{p_x \\\\ p_y \\\\ p_z \\\\ 1}\\right]\\)</li> <li>Transzform\u00e1ci\u00f3k alkalmaz\u00e1sa egyszer\u0171bb:</li> </ul> </li> </ul> \\[ \\mathbf{q} = \\mathbf{R}\\mathbf{p} + \\mathbf{v} \\to \\left[\\matrix{\\mathbf{q} \\\\ 1}\\right] = \\left[\\matrix{\\mathbf{R} &amp; \\mathbf{v}\\\\\\mathbf{0} &amp; 1 }\\right]\\left[\\matrix{\\mathbf{p} \\\\ 1}\\right] \\] <ul> <li>Szabads\u00e1gi fok (DoF): egym\u00e1st\u00f3l f\u00fcggetlen mennyis\u00e9gek sz\u00e1ma.</li> </ul>"},{"location":"04_da_vinci/#robotikai-alapok","title":"Robotikai alapok","text":"<ul> <li>Robotok fel\u00e9p\u00edt\u00e9se: szegmensek (segment, link) \u00e9s csukl\u00f3k (joints)</li> <li>Munkat\u00e9r (task space, cartesian space):  <ul> <li>H\u00e1romdimenzi\u00f3s t\u00e9r, ahol a feladat, trajekt\u00f3ri\u00e1k, akad\u00e1lyok, stb. defini\u00e1l\u00e1sra ker\u00fclnek.</li> <li>TCP (Tool Center Point): az end effektorhoz r\u00f6gz\u00edtett koordin\u00e1ta rendszer (frame)</li> <li>Base/world frame</li> </ul> </li> <li>Csukl\u00f3t\u00e9r (joint space):<ul> <li>A robot csukl\u00f3ihoz rendelt mennyis\u00e9gek, melyeket a robot alacsony szint\u0171 ir\u00e1ny\u00edt\u00f3 rendszere \u00e9rtelmezni k\u00e9pes.</li> <li>csukl\u00f3 koordin\u00e1t\u00e1k, sebess\u00e9gek, gyorsul\u00e1sok, nyomat\u00e9kok...</li> </ul> </li> </ul>"},{"location":"04_da_vinci/#python-libraries","title":"Python libraries","text":""},{"location":"04_da_vinci/#numpy","title":"Numpy","text":"<ul> <li>Python library</li> <li>High dimension arrays and matrices</li> <li>Mathematical functions</li> </ul> <p><pre><code>import numpy as np\n\n# Creating ndarrays\na = np.zeros(3)\na.shape\na.shape=(3,1)\na = np.ones(5)\na = np.empty(10)\nl = np.linspace(5, 10, 6)\nr = np.array([1,2])    # ndarray from python list\nr = np.array([[1,2],[3,4]])\ntype(r)\n\n# Indexing\nl[0]\nl[0:2]\nl[-1]\nr[:,0]\n\n# Operations on ndarrays\nr_sin = np.sin(r)\nnp.max(r)\nnp.min(r)\nnp.sum(r)\nnp.mean(r)\nnp.std(r)\n\nl &lt; 7\nl[l &lt; 7]\nnp.where(l &lt; 7)\n\np = np.linspace(1, 5, 6)\nq = np.linspace(10, 14, 6)\n\ns = p + q\ns = p * q\ns = p * 10\ns = p + 10\ns = p @ q    # dot product\ns = r.T\n</code></pre> If not installed:</p> <pre><code>pip3 install numpy\n</code></pre>"},{"location":"04_da_vinci/#matplotlib","title":"Matplotlib","text":"<ul> <li>Visualization in python</li> <li>Syntax similar to Matlab</li> </ul> <pre><code>import numpy as np\nfrom matplotlib import pyplot as plt\n\nX = np.linspace(-np.pi, np.pi, 24)\nC, S = np.cos(X), np.sin(X)\n\nplt.plot(X, C, label='y=cos(x)', marker='.')\nplt.plot(X, S label='y=sin(x)', marker='.')\n\nplt.xlabel('x')\nplt.ylabel('y')\nplt.legend()\n\nplt.show()\n</code></pre> <p>If not installed:</p> <pre><code>pip3 install matplotlib\n</code></pre>"},{"location":"04_da_vinci/#gyakorlat","title":"Gyakorlat","text":""},{"location":"04_da_vinci/#1-dvrk-ros-2-install","title":"1: dVRK ROS 2 install","text":"<ol> <li> <p>Telep\u00edts\u00fck az al\u00e1bbi dependency-ket:</p> <pre><code>sudo apt install python3-vcstool python3-colcon-common-extensions python3-pykdl libxml2-dev libraw1394-dev libncurses5-dev qtcreator swig sox espeak cmake-curses-gui cmake-qt-gui git subversion gfortran libcppunit-dev libqt5xmlpatterns5-dev libbluetooth-dev libhidapi-dev python3-pyudev gfortran-9 ros-humble-joint-state-publisher* ros-humble-xacro\n</code></pre> </li> <li> <p>Kl\u00f3nozzuk a dVRK-t (da Vinci Reserach Kit) <code>vcs</code> seg\u00edts\u00e9g\u00e9vel egy \u00faj workspace-be, majd build-elj\u00fck:</p> <pre><code>mkdir -p ~/dvrk2_ws/src\ncd ~/dvrk2_ws/src                \nvcs import --recursive --input https://raw.githubusercontent.com/jhu-dvrk/dvrk-github-workflow/main/vcs/ros2-dvrk-2.2.1.vcs\ncd ~/dvrk2_ws\ncolcon build --cmake-args -DCMAKE_BUILD_TYPE=Release   \nsource ~/dvrk2_ws/install/setup.bash\n</code></pre> </li> <li> <p>A <code>.bashrc</code> f\u00e1jl v\u00e9g\u00e9re illessz\u00fck be az al\u00e1bbi sort:</p> <pre><code>source ~/dvrk2_ws/install/setup.bash\n</code></pre> </li> <li> <p>Ind\u00edtsuk el a PSM1 (Patient Side Manipulator) RViz szimul\u00e1ci\u00f3j\u00e1t. A dVRK konzolon ne felejts\u00fcnk el HOME-olni.  Tanulm\u00e1nyozzuk a szimul\u00e1tor m\u0171k\u00f6d\u00e9s\u00e9t a tanult parancsok (<code>ros2 topic list</code>, <code>ros2 topic echo</code> <code>ros2 run rqt_gui rqt_gui</code>, stb.) haszn\u00e1lat\u00e1val. </p> <pre><code># dVRK main console\nros2 run dvrk_robot dvrk_console_json -j ~/dvrk2_ws/install/sawIntuitiveResearchKitAll/share/sawIntuitiveResearchKit/share/console/console-PSM1_KIN_SIMULATED.json\n</code></pre> <pre><code># ROS 2 joint and robot state publishers\nros2 launch dvrk_model dvrk_state_publisher.launch.py arm:=PSM1\n</code></pre> <pre><code># RViz\nros2 run rviz2 rviz2 -d ~/dvrk2_ws/install/dvrk_model/share/dvrk_model/rviz/PSM1.rviz\n</code></pre> <pre><code># rqt_gui\nros2 run rqt_gui rqt_gui\n</code></pre> </li> </ol>"},{"location":"04_da_vinci/#2-psm-subscriber-implementalasa","title":"2: PSM subscriber implement\u00e1l\u00e1sa","text":"<ol> <li> <p>Hozzunk l\u00e9tre \u00faj python forr\u00e1sf\u00e1jlt <code>psm_grasp.py</code> n\u00e9vvel a  <code>~/ros2_ws/src/ros2_course/ros2_course</code> mapp\u00e1ban. Adjuk meg az \u00faj entry point-ot a <code>setup.py</code>-ban a megszokott m\u00f3don.</p> </li> <li> <p>Iratkozzunk fel a PSM TCP (Tool Center Point) poz\u00edci\u00f3j\u00e1t \u00e9s a csipesz pof\u00e1i \u00e1ltal bez\u00e1rt sz\u00f6g\u00e9t publik\u00e1l\u00f3 topic-okra.</p> <pre><code>/PSM1/measured_cp\n/PSM1/jaw/measured_js\n</code></pre> </li> <li> <p>Build-elj\u00fcnk \u00e9s futtassuk a node-ot:</p> <pre><code>cd ~/ros2_ws\ncolcon build --symlink-install\nros2 run ros2_course psm_grasp \n</code></pre> </li> </ol>"},{"location":"04_da_vinci/#3-psm-tcp-mozgatasa-linearis-trajektoria-menten","title":"3. PSM TCP mozgat\u00e1sa line\u00e1ris trajekt\u00f3ria ment\u00e9n","text":"<ol> <li> <p>A PSM a lenti topicok-ban v\u00e1rja a k\u00edv\u00e1nt TCP poz\u00edci\u00f3t \u00e9s a csipesz pof\u00e1i \u00e1ltal bez\u00e1rt sz\u00f6get. Hozzunk l\u00e9tre publishereket a <code>psm_grasp.py</code> f\u00e1jlban ezekhez a topicokhoz.</p> <pre><code>/PSM1/servo_cp\n/PSM1/jaw/servo_jp\n</code></pre> </li> <li> <p>\u00cdrjunk f\u00fcggv\u00e9nyt, amely line\u00e1ris trajekt\u00f3ria ment\u00e9n a k\u00edv\u00e1nt poz\u00edci\u00f3ba mozgatja a TCP-t. K\u00fcldj\u00fck az csipeszt a (0.0, 0.05, -0.12) poz\u00edci\u00f3ba, az orient\u00e1ci\u00f3t hagyjuk v\u00e1ltozatlanul. 0.01s legyen a mintav\u00e9teli id\u0151. Matplotlib haszn\u00e1lat\u00e1val plotoljuk a tervezett trajekt\u00f3ria x, y \u00e9s z komponens\u00e9t id\u0151 f\u00fcggv\u00e9ny\u00e9ben.</p> <pre><code>def move_tcp_to(self, target, v, dt):\n</code></pre> <p></p> </li> <li> <p>\u00cdrjunk f\u00fcggv\u00e9nyt, amellyel a csipeszt tudjuk nyitni-z\u00e1rni, szint\u00e9n line\u00e1ris trajekt\u00f3ria haszn\u00e1lat\u00e1val.</p> <pre><code>def move_jaw_to(self, target, omega, dt):\n</code></pre> </li> </ol>"},{"location":"04_da_vinci/#4-dummy-marker-letrehozasa","title":"4. Dummy marker l\u00e9trehoz\u00e1sa","text":"<ol> <li> <p>Defini\u00e1ljunk egy \u00faj koordin\u00e1ta rendszert <code>camera</code> n\u00e9vvel, majd ellen\u0151rizz\u00fck a koordin\u00e1ta rendszereket:</p> <pre><code>ros2 run tf2_ros static_transform_publisher --frame-id world --child-frame-id camera --x 0 --y 0 --z 0 --qx 0 --qy 0 --qz 0 --qw 1\nros2 run tf2_tools view_frames \n</code></pre> </li> <li> <p>Hozzunk l\u00e9tre \u00faj python forr\u00e1sf\u00e1jlt <code>dummy_marker.py</code> n\u00e9vvel. Adjuk meg az entry point-ot a <code>setup.py</code>-ban a megszokott m\u00f3don. Implement\u00e1junk python programot, amely markert publik\u00e1l (0.00687728, 0.06412506, 0.27155235) poz\u00edci\u00f3val <code>dummy_target_marker</code> nev\u0171 topic-ban. A <code>frame_id</code> addattag \u00e9rt\u00e9ke legyen <code>camera</code>. M\u00e1soljuk az al\u00e1bbi k\u00f3dot a <code>dummy_marker.py</code> f\u00e1jlba:</p> <pre><code>import rclpy\nfrom rclpy.node import Node\nfrom visualization_msgs.msg import Marker\n\nclass DummyMarker(Node):\n    def __init__(self, position):\n        super().__init__('minimal_publisher')\n        self.position = position\n        self.publisher_ = self.create_publisher(Marker, 'dummy_target_marker', 10)\n        timer_period = 0.1  # seconds\n        self.timer = self.create_timer(timer_period, self.timer_callback)\n        self.i = 0\n        i = 0\n\n    def timer_callback(self):\n        marker = Marker()\n        marker.header.frame_id = 'camera'\n        marker.header.stamp = self.get_clock().now().to_msg()\n        marker.ns = \"dvrk_viz\"\n        marker.id = self.i\n        marker.type = Marker.SPHERE\n        marker.action = Marker.MODIFY\n        marker.pose.position.x = self.position[0]\n        marker.pose.position.y = self.position[1]\n        marker.pose.position.z = self.position[2]\n        marker.pose.orientation.x = 0.0\n        marker.pose.orientation.y = 0.0\n        marker.pose.orientation.z = 0.0\n        marker.pose.orientation.w = 1.0\n        marker.scale.x = 0.008\n        marker.scale.y = 0.008\n        marker.scale.z = 0.008\n        marker.color.a = 1.0 # Don't forget to set the alpha!\n        marker.color.r = 0.0\n        marker.color.g = 1.0\n        marker.color.b = 0.0;\n\n        self.publisher_.publish(marker)\n        self.i += 1\n\n\ndef main(args=None):\n    rclpy.init(args=args)\n    marker_publisher = DummyMarker([0.00687728, 0.06412506, 0.27155235])\n    rclpy.spin(marker_publisher)\n\n    # Destroy the node explicitly\n    # (optional - otherwise it will be done automatically\n    # when the garbage collector destroys the node object)\n    marker_publisher.destroy_node()\n    rclpy.shutdown()\n\nif __name__ == '__main__':\n    main()\n</code></pre> </li> <li> <p>Futtassuk a node-ot \u00e9s jelen\u00edts\u00fck meg a markert RViz-ben.</p> </li> <li> <p>Adjuk meg a <code>camera</code> \u00e9s a <code>PSM1_psm_base_link</code> koordin\u00e1ta rendszerek k\u00f6z\u00f6tti trenszform\u00e1ci\u00f3t, majd ellen\u0151rizz\u00fck \u00fajra a koordin\u00e1ta rendszereket:</p> <pre><code>ros2 run tf2_ros static_transform_publisher --frame-id PSM1_psm_base_link --child-frame-id camera --x 0.18 --y 0.03 --z 0.01 --roll 2.70526034 --pitch -0.78539816 --yaw -2.53072742\nros2 run tf2_tools view_frames \n</code></pre> </li> </ol>"},{"location":"04_da_vinci/#5-marker-megfogasa","title":"5. Marker megfog\u00e1sa","text":"<ol> <li> <p>Iratkozzunk fel a marker poz\u00edci\u00f3j\u00e1t k\u00fcld\u0151 topic-ra a <code>psm_grasp.py</code>-ban.</p> </li> <li> <p>M\u00f3dos\u00edtsuk a <code>psm_grasp.py</code> programot \u00fagy, hogy a csipesszel fogjuk meg a gener\u00e1lt markert. </p> <p>Note</p> <p>A haszn\u00e1lt szimul\u00e1tor hajlamos r\u00e1, hogy bizonyos \u00e9rt\u00e9kek \"beragadjanak\", ez\u00e9rt a program elej\u00e9n \u00e9rdemes az al\u00e1bbi sorok haszn\u00e1lat\u00e1val resetelni a kart: <pre><code>#Reset the arm\npsm.move_tcp_to([0.0, 0.0, -0.12], 0.01, 0.01)\npsm.move_jaw_to(0.0, 0.1, 0.01)\n</code></pre></p> </li> <li> <p>Sz\u00e1moljuk \u00e1t a kapott marker poz\u00edci\u00f3kat a <code>camera</code> koordin\u00e1ta rendszerb\u0151l a <code>PSM1_psm_base_link</code> koordin\u00e1ta rendszerbe, hogy helyes legyen a megfog\u00e1s poz\u00edci\u00f3ja. A koordin\u00e1ta rendszerek k\u00f6z\u00f6tti transzform\u00e1ci\u00f3:</p> \\[ roll=155^{\\circ}, pitch=-45^{\\circ}, yaw=-145^{\\circ}, \\mathbf{t}_{base,cam} = \\left[\\matrix{0.18 \\\\ 0.03 \\\\ 0.01\\\\ }\\right] \\] <pre><code>t_base_cam = np.array([0.18, 0.03, 0.01])\nR_base_cam = R.from_euler('xyz', [155.0, -45.0, -145.0], degrees=True).as_matrix()\n</code></pre> </li> <li> <p>Implement\u00e1ljuk a sz\u00e1m\u00edt\u00e1st homog\u00e9n koordin\u00e1t\u00e1k seg\u00edts\u00e9g\u00e9vel is. K\u00e9sz\u00edts\u00fcnk homog\u00e9n transzform\u00e1ci\u00f3s m\u00e1trixot a megadott \u00e9rt\u00e9kekb\u0151l. Alkalmazzuk a transzform\u00e1ci\u00f3t a <code>camera</code> koordin\u00e1ta rendszerben kapott poz\u00edci\u00f3ra.</p> </li> </ol>"},{"location":"04_da_vinci/#6-tcp-mozgatasa-koriv-menten","title":"6. TCP mozgat\u00e1sa k\u00f6r\u00edv ment\u00e9n","text":"<ol> <li>Implement\u00e1ljunk met\u00f3dust, amely r sugr\u00fa k\u00f6r\u00edv ment\u00e9n mozgatja a megfog\u00f3t.</li> </ol>"},{"location":"04_da_vinci/#hasznos-linkek","title":"Hasznos linkek","text":"<ul> <li>Download and compile dVRK 2</li> <li>Marker examples</li> <li>Numpy vector magnitude</li> <li>Numpy linspace</li> </ul>"},{"location":"05_git/","title":"05. Verzi\u00f3k\u00f6vet\u00e9s, Git","text":""},{"location":"05_git/#elmelet","title":"Elm\u00e9let","text":""},{"location":"05_git/#version-control-git","title":"Version control, Git","text":"<ul> <li>Track changes in a set of files</li> <li>Coordinating work among developers</li> <li>Who made what changes and when</li> <li>Revert back at any time</li> <li>Local and remote repos</li> <li>Take snapshots of files by making a commit</li> </ul>"},{"location":"05_git/#install","title":"Install","text":"<pre><code>sudo apt install git\n</code></pre>"},{"location":"05_git/#basic-commands","title":"Basic commands","text":"<pre><code>git init          # Initialize local git repo\ngit add &lt;file&gt;    # Add file/files to staging area\ngit status        # Check status of working tree and staging area\ngit commit -m \"What I've done\"    # Commit changes in index\ngit push          # Push to remote repository\ngit pull          # Pull latest changes from remote repo\ngit branch &lt;new_branch_name&gt;\ngit checkout &lt;branch_name&gt;\ngit merge &lt;branch_name&gt;   # Merge the branch into the current branch\ngit config --global user.name \"Istvan Szabo\"\ngit config --global user.email \"istvan.szabo@gmail.com\"\n</code></pre>"},{"location":"05_git/#github","title":"GitHub","text":"<pre><code>git remote\ngit clone &lt;link&gt;   # Copy repo into a new directory\n\n# Add remote to repository:\ngit remote add origin &lt;link&gt;\ngit push -u origin master\n</code></pre> <p>Some alternatives to GitHub</p> <p>GitLab, BitBucket, Launchpad, Phabricator </p>"},{"location":"05_git/#markdown","title":"Markdown","text":"<ul> <li>Markup language, easy to read</li> <li>Text file \u2192 Formatted document</li> <li>Widespread usag, e.g., blogs, forums, documentations, readme files, GitHub </li> <li>Markdown Cheatsheet</li> </ul>"},{"location":"05_git/#gyakorlat","title":"Gyakorlat","text":""},{"location":"05_git/#0-github-repo-letrehozasa","title":"0: GitHub repo l\u00e9trehoz\u00e1sa","text":"<ol> <li> <p>Regisztr\u00e1ljunk GitHub-ra, k\u00e9sz\u00edts\u00fcnk egy tokent.</p> </li> <li> <p>Hozzunk l\u00e9tre egy private repo-t GitHub-on a <code>ros2_course</code> package sz\u00e1m\u00e1ra.</p> </li> </ol> <p>Tip</p> <p>Personal token megjegyz\u00e9se: <code>git config --global credential.helper store</code></p> <ol> <li> <p>Hozzuk l\u00e9tre a local repo-t, \u00e1ll\u00edtsuk be a remote-ot, majd push-oljuk a package tartalm\u00e1t GitHUb-ra (a GitHub is seg\u00edt a repo l\u00e9trehoz\u00e1sa ut\u00e1n):</p> <pre><code>cd ~/ros2_ws/src/ros2_course\ngit init\ngit add .\ngit commit -m \"Initial commit\"\ngit branch -M main\ngit remote add origin &lt;REPO_GITHUB_ADDRESS&gt;.git\ngit push -u origin main\n</code></pre> </li> <li> <p>Adjunk hozz\u00e1 egy README.md-t a ros2_course csomaghoz az al\u00e1bbi tartalommal:</p> <pre><code># ros2_course\n\n## About\n\nSomething about the package.\n\n## Usage\n\nHow to *build* and use the package.\n\n    cd ~/ros2_ws\n    colcon build --symlink-install\n</code></pre> </li> <li> <p>Commit-oljunk \u00e9s push-oljuk a v\u00e1ltoztat\u00e1sokat:</p> <pre><code>git add .\ngit commit -m \"Add README\"\ngit push\n</code></pre> <p>VCS Clion-ban</p> <p>A GitHub haszn\u00e1lata CLion-ban is be\u00e1ll\u00edthat\u00f3, \u00edgy grafikus fel\u00fcleten kezelhetj\u00fck a verzi\u00f3kat.</p> </li> </ol> <p>Tip</p> <p>Windows \u00e9s Linux \u00f3ra probl\u00e9ma megold\u00e1sa: <code>timedatectl set-local-rtc 1 --adjust-system-clock</code></p>"},{"location":"05_git/#hasznos-linkek","title":"Hasznos linkek","text":"<ul> <li>Markdown Cheatsheet</li> </ul>"},{"location":"06_roslaunch/","title":"06. ROS 2 Launch, Param, Bag","text":""},{"location":"06_roslaunch/#elmelet","title":"Elm\u00e9let","text":""},{"location":"06_roslaunch/#ros-2-launch","title":"ROS 2 Launch","text":"<ul> <li>Launch multiple nodes</li> <li>Set arguments</li> <li>Monitor running nodes</li> <li>React on changes in the state of nodes</li> <li>Python, XML and YAML file formats</li> </ul>"},{"location":"06_roslaunch/#usage","title":"Usage","text":"<pre><code>    ros2 launch package_name file.launch\n    ros2 launch irob_robot dvrk_server.launch arm_typ:=PSM1\n</code></pre>"},{"location":"06_roslaunch/#ros-2-parameters","title":"ROS 2 Parameters","text":"<ul> <li>Configure nodes at startup or during runtime without changing the code</li> <li>Associated with individual nodes</li> <li>Consists of: key, value, descriptor</li> <li>Available data types: bool, int64, float64, string, byte[], bool[], int64[], float64[] or string[].</li> <li>Useful command: <code>ros2 param</code></li> </ul>"},{"location":"06_roslaunch/#ros-2-bag","title":"ROS 2 Bag","text":"<ul> <li>Record and playback ROS topics</li> <li>Command line tool</li> <li>API for C++ and Python</li> </ul> <pre><code>    ros2 bag record -o &lt;file_name&gt; &lt;topic_name&gt;\n    ros2 bag record --all\n    ros2 bag info &lt;filename.bag&gt;\n    ros2 bag play &lt;filename.bag&gt;\n</code></pre>"},{"location":"06_roslaunch/#gyakorlat","title":"Gyakorlat","text":""},{"location":"06_roslaunch/#1-launch-turtlesim-mimic","title":"1: Launch Turtlesim Mimic","text":"<ol> <li> <p>Hozzuk l\u00e9tre a <code>launch</code> mapp\u00e1t a <code>ros2_course</code> package-en bel\u00fcl, ahol a launch f\u00e1jlokat t\u00e1rolhatjuk majd:</p> <pre><code>cd ~/ros2_ws/src/ros2_course\nmkdir launch\n</code></pre> </li> <li> <p>Az \u00faj <code>launch</code> mapp\u00e1ban hozzuk l\u00e9tre a <code>turtlesim_mimic_launch.py</code> f\u00e1jlt a k\u00f6vetkez\u0151 taralommal:</p> <pre><code>from launch import LaunchDescription\nfrom launch_ros.actions import Node\n\ndef generate_launch_description():\n    return LaunchDescription([\n        Node(\n            package='turtlesim',\n            namespace='turtlesim1',\n            executable='turtlesim_node',\n            name='sim'\n        ),\n        Node(\n            package='turtlesim',\n            namespace='turtlesim2',\n            executable='turtlesim_node',\n            name='sim'\n        ),\n        Node(\n            package='turtlesim',\n            executable='mimic',\n            name='mimic',\n            remappings=[\n                ('/input/pose', '/turtlesim1/turtle1/pose'),\n                ('/output/cmd_vel', '/turtlesim2/turtle1/cmd_vel'),\n            ]\n        )\n    ])\n</code></pre> </li> <li> <p>Eg\u00e9sz\u00edts\u00fck ki a <code>setup.py</code> f\u00e1jlt az al\u00e1bbiakkal:</p> <pre><code>import os\nfrom glob import glob\n\n# ...\n\ndata_files=[\n    ('share/ament_index/resource_index/packages',\n        ['resource/' + package_name]),\n    ('share/' + package_name, ['package.xml']),\n    # Include all launch files.\n    (os.path.join('share', package_name),\n        glob('launch/*launch.[pxy][yma]*'))\n],\n</code></pre> </li> <li> <p>Adjuk hozz\u00e1 a <code>ros2launch</code> dependency-t a <code>package.xml</code> f\u00e1jlhoz:</p> <pre><code>&lt;exec_depend&gt;ros2launch&lt;/exec_depend&gt;\n</code></pre> </li> <li> <p>Build-elj\u00fck a workspace-t:</p> <pre><code>cd ros2_ws\ncolcon build --symlink-install\n</code></pre> </li> <li> <p>Ind\u00edtsuk el a launch f\u00e1jlt:</p> <pre><code>ros2 launch ros2_course turtlesim_mimic_launch.py\n</code></pre> </li> <li> <p>Publik\u00e1ljunk a topic-ba a parancssorb\u00f3l, \u00faj temin\u00e1l ablakban:</p> <pre><code>ros2 topic pub -r 1 /turtlesim1/turtle1/cmd_vel geometry_msgs/msg/Twist \"{linear: {x: 2.0, y: 0.0, z: 0.0}, angular: {x: 0.0, y: 0.0, z: -1.8}}\"\n</code></pre> </li> <li> <p>Vizsg\u00e1ljuk a rendszer m\u0171k\u00f6d\u00e9s\u00e9t <code>rqt_gui</code> seg\u00edts\u00e9g\u00e9vel:</p> <pre><code>ros2 run rqt_gui rqt_gui\n</code></pre> </li> </ol>"},{"location":"06_roslaunch/#2-launch-turtlesim-goto","title":"2: Launch Turtlesim Goto","text":"<ol> <li> <p>K\u00e9sz\u00edts\u00fcnk m\u00e1solatot a <code>turtlesim_mimic_launch.py</code> f\u00e1jlr\u00f3l <code>turtlesim_controller_launch.py</code> n\u00e9vvel.</p> </li> <li> <p>Adjuk hozz\u00e1 az el\u0151z\u0151 \u00f3r\u00e1n meg\u00edrt <code>turtlesim_controller</code> node-ot a launch f\u00e1jlhoz. Az \u00edr\u00e1ny\u00edtand\u00f3 tekn\u0151st a <code>namespace</code> vagy a <code>remappings</code> seg\u00edts\u00e9g\u00e9vel tudjuk be\u00e1ll\u00edtani.</p> </li> <li> <p>Build-elj\u00fck a workspace-t:</p> <pre><code>cd ros2_ws\ncolcon build --symlink-install\n</code></pre> </li> <li> <p>Ind\u00edtsuk el az \u00faj launch f\u00e1jlt:</p> <pre><code>ros2 launch ros2_course turtlesim_controller_launch.py\n</code></pre> </li> </ol>"},{"location":"06_roslaunch/#3-turtlesim-controller-params","title":"3: Turtlesim controller params","text":"<ol> <li> <p>M\u00f3dos\u00edtsuk a <code>turtlesim_controller</code>-t \u00fagy, hogy a line\u00e1ris sebess\u00e9g \u00e9s a sz\u00f6gsebess\u00e9g ROS param\u00e9tereken kereszt\u00fcl legyen \u00e1ll\u00edthat\u00f3. API p\u00e9lda a param\u00e9terekhez:</p> <pre><code>import rclpy\nimport rclpy.node\n\nclass MinimalParam(rclpy.node.Node):\n    def __init__(self):\n        super().__init__('minimal_param_node')\n        # Declare parameter named 'my_parameter' and\n        # set default value to 'world'\n        self.declare_parameter('my_parameter', 'world')\n        self.timer = self.create_timer(1, self.timer_callback)\n\n    def timer_callback(self):\n        my_param = self.get_parameter('my_parameter').get_parameter_value().string_value\n        self.get_logger().info('Hello %s!' % my_param)\n\n\ndef main():\n    rclpy.init()\n    node = MinimalParam()\n    rclpy.spin(node)\n\nif __name__ == '__main__':\n    main()\n</code></pre> </li> <li> <p>Futtassuk a <code>turtlesim_controller.py</code>-t a kor\u00e1bban meg\u00edrt launch file seg\u00edts\u00e9g\u00e9vel. List\u00e1zzuk ki a param\u00e9tereket. </p> <pre><code>ros2 launch ros2_course turtlesim_controller_launch.py\n</code></pre> <pre><code>ros2 param list\n</code></pre> </li> <li> <p>M\u00f3dos\u00edtsuk a sebess\u00e9g \u00e9s sz\u00f6gsebess\u00e9g param\u00e9tereket parancssorb\u00f3l az al\u00e1bbi parancs seg\u00edts\u00e9g\u00e9vel:</p> <pre><code>ros2 param set &lt;NODE_NAME&gt; &lt;PARAM_NAME&gt; &lt;NEW_VALUE&gt;\nros2 param set controller speed 100.0\n</code></pre> </li> </ol>"},{"location":"06_roslaunch/#4-turtlesim-controller-launch-and-substitutions","title":"4: Turtlesim controller launch and substitutions","text":"<ol> <li> <p>K\u00e9sz\u00edts\u00fcnk m\u00e1solatot a <code>turtlesim_controller_launch.py</code>-r\u00f3l <code>turtlesim_controller_param_launch.py</code> n\u00e9ven. M\u00f3dos\u00edtsuk az \u00faj launch f\u00e1jlt az al\u00e1bbi p\u00e9lda alapj\u00e1n \u00fagy, hogy a sebss\u00e9g \u00e9s a sz\u00f6gsebess\u00e9g param\u00e9terek a launch f\u00e1jl argumentumaik\u00e9nt legyenek megadhat\u00f3ak.</p> <pre><code>from launch_ros.actions import Node\nfrom launch import LaunchDescription\nfrom launch.actions import DeclareLaunchArgument, ExecuteProcess, TimerAction\nfrom launch.conditions import IfCondition\nfrom launch.substitutions import LaunchConfiguration, PythonExpression\n\ndef generate_launch_description():\n\n    turtlesim_ns_launch_arg = DeclareLaunchArgument(\n        'turtlesim_ns',\n        default_value='turtlesim1',\n        description='Namespace for turtle 1'\n    )\n    use_provided_red_launch_arg = DeclareLaunchArgument(\n        'use_provided_red',\n        default_value='False'\n    )\n    new_background_r_launch_arg = DeclareLaunchArgument(\n        'new_background_r',\n        default_value='200'\n    )\n    background_g_launch_arg = DeclareLaunchArgument(\n        'background_g',\n        default_value='100'\n    )\n    background_b_launch_arg = DeclareLaunchArgument(\n        'background_b',\n        default_value='100'\n    )\n\n    turtlesim_ns_value = LaunchConfiguration('turtlesim_ns')\n    use_provided_red_value = LaunchConfiguration('use_provided_red')\n    new_background_r_value = LaunchConfiguration('new_background_r')\n    background_g_value = LaunchConfiguration('background_g')\n    background_b_value = LaunchConfiguration('background_b')\n\n    turtlesim_node = Node(\n        package='turtlesim',\n        namespace=turtlesim_ns_value,\n        executable='turtlesim_node',\n        name='sim',\n        parameters=[{\n            'background_g': background_g_value,\n            'background_b': background_b_value,\n        }]\n    )\n\n    spawn_turtle = ExecuteProcess(\n        cmd=[[\n            'ros2 service call ',\n            turtlesim_ns,\n            '/spawn ',\n            'turtlesim/srv/Spawn ',\n            '\"{x: 2, y: 2, theta: 0.2}\"'\n        ]],\n        shell=True\n    )\n\n    change_background_r = ExecuteProcess(\n        cmd=[[\n            'ros2 param set ',\n            turtlesim_ns,\n            '/sim background_r ',\n            '120'\n        ]],\n        shell=True\n    )\n\n    change_background_r_conditioned = ExecuteProcess(\n        condition=IfCondition(\n            PythonExpression([\n                new_background_r_value,\n                ' == 200',\n                ' and ',\n                use_provided_red\n            ])\n        ),\n        cmd=[[\n            'ros2 param set ',\n            turtlesim_ns_value,\n            '/sim background_r ',\n            new_background_r\n        ]],\n        shell=True\n    )\n\n    return LaunchDescription([\n        turtlesim_ns_launch_arg,\n        use_provided_red_launch_arg,\n        new_background_r_launch_arg,\n        turtlesim_node,\n        spawn_turtle,\n        change_background_r,\n        TimerAction(\n            period=2.0,\n            actions=[change_background_r_conditioned],\n        )\n    ])\n</code></pre> </li> <li> <p>Build-elj\u00fck a workspace-t \u00e9s futtassuk a <code>turtlesim_controller_param_launch.py</code>-t:</p> <pre><code>cd ros2_ws\ncolcon build --symlink-install\nros2 launch ros2_course turtlesim_controller_param_launch.py\n</code></pre> </li> <li> <p>List\u00e1zzuk ki az \u00faj launch f\u00e1jl argumentumait:</p> <pre><code>ros2 launch ros2_course turtlesim_controller_param_launch.py --show-args\n</code></pre> </li> <li> <p>Futtassuk a launch f\u00e1jlt az argumentumok be\u00e1ll\u00edt\u00e1s\u00e1val:</p> <pre><code>ros2 launch ros2_course turtlesim_controller_param_launch.py speed:=100.0 omega:=60.0\n</code></pre> </li> <li> <p>A fenti p\u00e9lda seg\u00edts\u00e9g\u00e9vel \u00e1ll\u00edtsuk a h\u00e1tt\u00e9r sz\u00edn\u00e9t szint\u00e9n parancssori argumentum(ok) felhaszn\u00e1l\u00e1s\u00e1val.</p> </li> </ol>"},{"location":"06_roslaunch/#5-rosbag","title":"5: Rosbag","text":"<ol> <li> <p>Az el\u0151z\u0151 feladatban implement\u00e1lt program fut\u00e1sa k\u00f6zben r\u00f6gz\u00edts\u00fck a topic-ok tartalm\u00e1t egy rosbag f\u00e1jlba.</p> <pre><code>    ros2 bag record --all\n</code></pre> <p>Syntax</p> <p>The filename and the topics to record can also be set, e.g.: <pre><code>ros2 bag record -o turtle_bagfile_1 /turtle1/cmd_vel /turtle1/pose\n</code></pre></p> </li> <li> <p>Haszn\u00e1ljuk az al\u00e1bbi parancsot a bag f\u00e1jl tulajdons\u00e1gainak lek\u00e9rdez\u00e9s\u00e9re:</p> <pre><code>ros2 bag info &lt;PATH_TO_BAGFILE&gt;\n</code></pre> </li> <li> <p>J\u00e1tsszuk vissza a bag f\u00e1jlt \u00e9s jelen\u00edts\u00fck meg az egyik tekn\u0151c  <code>pose/x</code> \u00e9rt\u00e9k\u00e9t grafikonon  <code>rqt_gui</code> seg\u00edts\u00e9g\u00e9vel.</p> <pre><code>ros2 bag info &lt;PATH_TO_BAGFILE&gt;\n</code></pre> <pre><code>ros2 run rqt_gui rqt_gui\n</code></pre> </li> </ol>"},{"location":"06_roslaunch/#hasznos-linkek","title":"Hasznos linkek","text":"<ul> <li>ROS 2 Launch Tutorial</li> <li>ROS 2 Parameters</li> <li>Using ROS 2 parameters in a Class</li> <li>ROS 2 Bag</li> </ul>"},{"location":"07_robotics_principles/","title":"07. Kinematika, inverz kienamtika, Szimul\u00e1lt robotkar programoz\u00e1sa csukl\u00f3-, \u00e9s munkat\u00e9rben","text":""},{"location":"07_robotics_principles/#ismetles","title":"Ism\u00e9tl\u00e9s","text":""},{"location":"07_robotics_principles/#3d-transzformaciok","title":"3D transzform\u00e1ci\u00f3k","text":"<ul> <li>Poz\u00edci\u00f3: 3 elem\u0171 offszet vektor  </li> <li> <p>Orient\u00e1ci\u00f3: 3 x 3 rot\u00e1ci\u00f3s matrix</p> <ul> <li>tov\u00e1bbi orient\u00e1ci\u00f3 reprezent\u00e1ci\u00f3k: Euler-sz\u00f6gek, RPY, angle axis, quaternion</li> </ul> </li> <li> <p>Helyzet (pose): 4 \u00d7 4 transzform\u00e1ci\u00f3s m\u00e1rtrix</p> </li> <li>Koordin\u00e1ta rendszer (frame): null pont, 3 tengely, 3 b\u00e1zis vektor, jobbk\u00e9z-szab\u00e1ly</li> <li>Homog\u00e9n transzform\u00e1ci\u00f3k: rot\u00e1ci\u00f3 \u00e9s transzl\u00e1ci\u00f3 egy\u00fctt<ul> <li>pl. \\(\\mathbf{R}\\) rot\u00e1ci\u00f3 \u00e9s \\(\\mathbf{v}\\) transzl\u00e1ci\u00f3 eset\u00e9n:</li> </ul> </li> </ul> \\[ \\mathbf{T} = \\left[\\matrix{\\mathbf{R} &amp; \\mathbf{v}\\\\\\mathbf{0} &amp; 1 }\\right] = \\left[\\matrix{r_{1,1} &amp; r_{1,2} &amp; r_{1,3} &amp; v_x\\\\r_{2,1} &amp; r_{2,2} &amp; r_{2,3} &amp; v_y\\\\r_{3,1} &amp; r_{3,2} &amp; r_{3,3} &amp; v_z\\\\\\ 0 &amp; 0 &amp; 0 &amp; 1 }\\right] \\] <ul> <li>Homog\u00e9n koordin\u00e1t\u00e1k: <ul> <li>Vektor: 0-val eg\u00e9sz\u00edtj\u00fck ki, \\(\\mathbf{a_H}=\\left[\\matrix{\\mathbf{a} \\\\ 0}\\right]=\\left[\\matrix{a_x \\\\ a_y \\\\ a_z \\\\ 0}\\right]\\)</li> <li>Pont: 1-gyel eg\u00e9sz\u00edtj\u00fck ki, \\(\\mathbf{p_H}=\\left[\\matrix{\\mathbf{p} \\\\ 1}\\right]=\\left[\\matrix{p_x \\\\ p_y \\\\ p_z \\\\ 1}\\right]\\)</li> <li>Transzform\u00e1ci\u00f3k alkalmaz\u00e1sa egyszer\u0171bb:</li> </ul> </li> </ul> \\[ \\mathbf{q} = \\mathbf{R}\\mathbf{p} + \\mathbf{v} \\to \\left[\\matrix{\\mathbf{q} \\\\ 1}\\right] = \\left[\\matrix{\\mathbf{R} &amp; \\mathbf{v}\\\\\\mathbf{0} &amp; 1 }\\right]\\left[\\matrix{\\mathbf{p} \\\\ 1}\\right] \\] <ul> <li>Szabads\u00e1gi fok (DoF): egym\u00e1st\u00f3l f\u00fcggetlen mennyis\u00e9gek sz\u00e1ma.</li> </ul>"},{"location":"07_robotics_principles/#robotikai-alapok","title":"Robotikai alapok","text":"<ul> <li>Robotok fel\u00e9p\u00edt\u00e9se: szegmensek (segment, link) \u00e9s csukl\u00f3k (joints)</li> <li>Munkat\u00e9r (task space, cartesian space):  <ul> <li>H\u00e1romdimenzi\u00f3s t\u00e9r, ahol a feladat, trajekt\u00f3ri\u00e1k, akad\u00e1lyok, stb. defini\u00e1l\u00e1sra ker\u00fclnek.</li> <li>TCP (Tool Center Point): az end effektorhoz r\u00f6gz\u00edtett koordin\u00e1ta rendszer (frame)</li> <li>Base/world frame</li> </ul> </li> <li>Csukl\u00f3t\u00e9r (joint space):<ul> <li>A robot csukl\u00f3ihoz rendelt mennyis\u00e9gek, melyeket a robot alacsony szint\u0171 ir\u00e1ny\u00edt\u00f3 rendszere \u00e9rtelmezni k\u00e9pes.</li> <li>csukl\u00f3 koordin\u00e1t\u00e1k, sebess\u00e9gek, gyorsul\u00e1sok, nyomat\u00e9kok...</li> </ul> </li> </ul>"},{"location":"07_robotics_principles/#elmelet","title":"Elm\u00e9let","text":""},{"location":"07_robotics_principles/#kinematika-inverz-kinematika","title":"Kinematika, inverz kinematika","text":""},{"location":"07_robotics_principles/#kinematika","title":"Kinematika","text":"<p>Def. Kinematika</p> <p>A TCP (vagy b\u00e1rmi m\u00e1s) helyzet\u00e9nek kisz\u00e1m\u00edt\u00e1sa a csukl\u00f3 koordin\u00e1t\u00e1kb\u00f3l.</p> <ul> <li>Kinematikai modell<ul> <li>Denavit--Hartenberg (DH) konvenci\u00f3</li> <li>URDF (Unified Robotics Description Format, XML-alap\u00fa)</li> </ul> </li> </ul> <p>Ha a segmensekhez rendelt koordin\u00e1ta rendszerek rendre \\(base, 1, 2, 3, ..., TCP\\), a szomsz\u00e9dos \\(i\\) and \\(i+1\\) szegmensek k\u00f6z\u00f6tti transzfomr\u00e1ci\u00f3k \\(T_{i+1,i}(q_{i+1})\\) (mely a k\u00f6zbez\u00e1rt csukl\u00f3 sz\u00f6g\u00e9nek f\u00fcggv\u00e9nye), a transzfomr\u00e1ci\u00f3 a base frame \u00e9s a TCP k\u00f6z\u00f6tt fel\u00edrhat\u00f3 (\\(n\\) csukl\u00f3s robotra):</p> \\[      T_{TCP,base}(q_1, \\cdots, q_n) = T_{TCP,n-1}(q_{n}) \\cdot T_{n-1,n-2}(q_{n-1}) \\cdots T_{2,1}(q_2) \\cdot T_{1,base}(q_1) \\cdot base \\]"},{"location":"07_robotics_principles/#inverz-kinematika","title":"Inverz kinematika","text":"<p>Def. Inverz kinematika</p> <p>Csukl\u00f3 koordin\u00e1t\u00e1k kisz\u00e1m\u00edt\u00e1sa a (k\u00edv\u00e1nt)  TCP (vagy b\u00e1rmi m\u00e1s) pose el\u00e9r\u00e9s\u00e9hez.</p>"},{"location":"07_robotics_principles/#differencialis-inverz-kinematika","title":"Differenci\u00e1lis inverz kinematika","text":"<p>Def. Differenci\u00e1lis inverz kinematika</p> <p>A csukl\u00f3 koordin\u00e1t\u00e1k mely v\u00e1ltoztat\u00e1sa \u00e9ri el a k\u00edv\u00e1nt, kis m\u00e9rt\u00e9k\u0171 v\u00e1ltoz\u00e1st a TCP helyzet\u00e9ben (rot\u00e1ci\u00f3 \u00e9s transzl\u00e1ci\u00f3).</p> <ul> <li> <p>Jacobi-m\u00e1trix (Jacobian): egy vektor\u00e9rt\u00e9k\u0171 f\u00fcggv\u00e9ny els\u0151rend\u0171 parci\u00e1lis deriv\u00e1ltjait tartalmaz\u00f3 m\u00e1trix. </p> \\[ \\mathbf{J} = \\left[\\matrix{\\frac{\\partial x_1}{\\partial q_1} &amp; \\frac{\\partial x_1}{\\partial q_2} &amp;\\frac{\\partial x_1}{\\partial q_3} &amp; \\dots &amp;\\frac{\\partial x_1}{\\partial q_n} \\\\ \\frac{\\partial x_2}{\\partial q_1} &amp; \\frac{\\partial x_2}{\\partial q_2} &amp;\\frac{\\partial x_2} {\\partial q_3} &amp; \\dots &amp;\\frac{\\partial x_2}{\\partial q_n} \\\\ \\frac{\\partial x_3}{\\partial q_1} &amp; \\frac{\\partial x_3}{\\partial q_2} &amp;\\frac{\\partial x_3}{\\partial q_3} &amp; \\dots &amp;\\frac{\\partial x_3}{\\partial q_n} \\\\ \\vdots &amp;\\vdots &amp;\\vdots &amp;\\ddots &amp;\\vdots \\\\ \\frac{\\partial x_m}{\\partial q_1} &amp; \\frac{\\partial x_m}{\\partial q_2} &amp;\\frac{\\partial x_m}{\\partial q_3} &amp; \\dots &amp;\\frac{\\partial x_m}{\\partial q_n} \\\\}\\right] \\] </li> <li> <p>Jacobi-m\u00e1trix jelent\u0151s\u00e9ge robotik\u00e1ban: megadja az \u00f6sszef\u00fcgg\u00e9st a csukl\u00f3sebess\u00e9gek \u00e9s a TCP sebess\u00e9ge k\u00f6z\u00f6tt.</p> \\[ \\left[\\matrix{\\mathbf{v} \\\\ \\mathbf{\\omega}}\\right] =\\mathbf{J}(\\mathbf{q})\\cdot \\mathbf{\\dot{q}} \\] <p>,ahol \\(\\mathbf{v}\\) a TCP line\u00e1ris sebess\u00e9ge, \\(\\mathbf{\\omega}\\) a TCP sz\u00f6gsebess\u00e9ge, \\(\\mathbf{q}\\) pedig a robot konfigur\u00e1ci\u00f3ja.</p> </li> </ul> <p>Def. Konfigur\u00e1ci\u00f3</p> <p>A robot pillanatnyi csukl\u00f3sz\u00f6geib\u0151l k\u00e9pzett vektor vagy t\u00f6mb.</p>"},{"location":"07_robotics_principles/#inverz-kinematika-jacobi-inverz-felhasznalasaval","title":"Inverz kinematika Jacobi inverz felhaszn\u00e1l\u00e1s\u00e1val","text":"<ol> <li>Sz\u00e1m\u00edtsuk ki a k\u00edv\u00e1nt \u00e9s az aktu\u00e1lis poz\u00edci\u00f3 k\u00fcl\u00f6nbs\u00e9g\u00e9t: \\(\\Delta\\mathbf{r} = \\mathbf{r}_{desired} - \\mathbf{r}_0\\)</li> <li>Sz\u00e1m\u00edtsuk ki a rot\u00e1ci\u00f3k k\u00fcl\u00f6nbs\u00e9g\u00e9t: \\(\\Delta\\mathbf{R} = \\mathbf{R}_{desired}\\mathbf{R}_{0}^{T}\\), majd konvert\u00e1ljuk \u00e1t axis angle reprezent\u00e1ci\u00f3ba \\((\\mathbf{t},\\phi)\\)</li> <li>Sz\u00e1m\u00edtsuk ki \\(\\Delta\\mathbf{ q}=\\mathbf{J}^{-1}(\\mathbf{q_0})\\cdot \\left[\\matrix{k_1 \\cdot \\Delta\\mathbf{r} \\\\ k_2 \\cdot \\mathbf{\\omega}}\\right]\\), ahol az inverz lehet pszeudo-inverz, vagy transzpon\u00e1lt</li> <li>\\(\\mathbf{q}_{better} = \\mathbf{q}_{0} + \\Delta\\mathbf{q}\\)</li> </ol>"},{"location":"07_robotics_principles/#gyakorlat","title":"Gyakorlat","text":""},{"location":"07_robotics_principles/#1-ur-install","title":"1: UR install","text":"<ol> <li> <p>Telep\u00edts\u00fck a dependency-ket \u00e9s a UR driver-t.</p> <p></p> <pre><code>sudo apt update\nsudo apt upgrade\nsudo apt-get install ros-humble-ur python3-pip\npip3 install kinpy\n</code></pre> <p>Tip</p> <p>A <code>kinpy</code> csomag forr\u00e1s\u00e1t is t\u00f6lts\u00fck le, hasznos lehet az API meg\u00e9rt\u00e9se szempontj\u00e1b\u00f3l: https://pypi.org/project/kinpy/</p> </li> <li> <p>Moodle-r\u0151l t\u00f6lts\u00fck le a forr\u00e1sf\u00e1jlokatokat tartalmaz\u00f3 zip-et (<code>ur_ros2_course.zip</code>). A <code>view_ur.launch.py</code> f\u00e1jlt m\u00e1soljuk a <code>ros2_course/launch</code> mapp\u00e1ba, a <code>topic_latcher.py</code> f\u00e1jlt pedig a <code>ros2_course/ros2_course</code> mapp\u00e1ba. Adjuk hozz\u00e1 az al\u00e1bbi sorokat a <code>setup.py</code> f\u00e1jlhoz (launch \u00e9s entry point):</p> <pre><code>import os\nfrom glob import glob\n\n# ...\n\ndata_files=[\n    ('share/ament_index/resource_index/packages',\n        ['resource/' + package_name]),\n    ('share/' + package_name, ['package.xml']),\n    # Include all launch files.\n    (os.path.join('share', package_name),\n        glob('launch/*launch.[pxy][yma]*'))\n],\n\n# ...\n\nentry_points={\n'console_scripts': [\n     # ...\n     'topic_latcher = ros2_course.topic_latcher:main',\n],\n</code></pre> </li> <li> <p>Adjuk hozz\u00e1 <code>ros2launch</code> dependency-t a <code>package.xml</code> f\u00e1jlhoz:</p> <pre><code>&lt;exec_depend&gt;ros2launch&lt;/exec_depend&gt;\n</code></pre> </li> <li> <p>Build-elj\u00fck a workspace-t.</p> <pre><code>cd ~/ros2_ws\ncolcon build --symlink-install\n</code></pre> </li> <li> <p>Ind\u00edtsuk el a szimul\u00e1tort, mozgassuk a csukl\u00f3kat a Joint State Publisher GUI seg\u00edts\u00e9g\u00e9vel.</p> <pre><code>ros2 launch ros2_course view_ur.launch.py ur_type:=ur5e\n</code></pre> <p>Tip</p> <p>Pr\u00f3b\u00e1ljunk ki m\u00e1s robotokat is a <code>ur_type</code> argumentum be\u00e1ll\u00edt\u00e1s\u00e1val (ur3, ur3e, ur5, ur5e, ur10, ur10e, ur16e, ur20)</p> </li> </ol>"},{"location":"07_robotics_principles/#2-robot-mozgatasa-csukloterben","title":"2: Robot mozgat\u00e1sa csukl\u00f3t\u00e9rben","text":"<ol> <li> <p>Hozzunk l\u00e9tre \u00faj python forr\u00e1sf\u00e1jlt <code>ur_controller.py</code> n\u00e9vvel a  <code>~/ros2_ws/src/ros2_course/ros2_course</code>  mapp\u00e1ban. Adjuk meg az \u00faj entry point-ot a <code>setup.py</code>-ban a megszokott m\u00f3don. Iratkozzunk fel a robot csukl\u00f3sz\u00f6geit (konfigur\u00e1ci\u00f3j\u00e1t) publik\u00e1l\u00f3 topicra. Hozzunk l\u00e9tre  publisher-t a csukl\u00f3k sz\u00f6geinek be\u00e1ll\u00edt\u00e1s\u00e1ra haszn\u00e1lhat\u00f3 topic-hoz.</p> <pre><code>/joint_states\n/set_joint_states\n</code></pre> </li> <li> <p>Mozgassuk a robotot <code>q = [-1.28, 4.41, 1.54, -1.16, -1.56, 0.0]</code> konfigur\u00e1ci\u00f3ba.</p> </li> </ol>"},{"location":"07_robotics_principles/#3-kinematika","title":"3. Kinematika","text":"<ol> <li> <p>A szimul\u00e1tor egy topicban publik\u00e1lja a robotot le\u00edr\u00f3 urdf-t. Iratkozzunk fel erre a topic-ra.</p> <pre><code>/robot_description_latch\n</code></pre> </li> <li> <p>Import\u00e1ljuk a <code>kinpy</code> csomagot \u00e9s hozzuk l\u00e9tre a kinematikai l\u00e1ncot a robotot le\u00edr\u00f3 urdf alapj\u00e1n az el\u0151bb implement\u00e1lt callback f\u00fcggv\u00e9nyben:</p> <pre><code>import kinpy as kp\n\n# ...\n\nself.chain = kp.build_serial_chain_from_urdf(self.desc, 'tool0')\nprint(self.chain.get_joint_parameter_names())\nprint(self.chain)\n</code></pre> </li> <li> <p>Sz\u00e1m\u00edtsuk ki, majd irassuk ki a TCP poz\u00edci\u00f3j\u00e1t az adott konfigur\u00e1ci\u00f3ban a <code>kinpy</code> csomag seg\u00edts\u00e9g\u00e9vel.</p> <pre><code>p = chain.forward_kinematics(q)\n</code></pre> </li> </ol>"},{"location":"07_robotics_principles/#4-inverz-kinematika-jacobi-inverz-modszerrel","title":"4: Inverz kinematika Jacobi inverz m\u00f3dszerrel","text":"<p>\u00cdrjunk met\u00f3dust, amely az el\u0151ad\u00e1sban bemutatott Jakobi inverz m\u00f3dszerrel val\u00f3s\u00edtja meg az inverz kinematikai feladatot a roboton.  Az orient\u00e1ci\u00f3t hagyjuk figyelmen k\u00edv\u00fcl. Mozgassuk a TCP-t a <code>(0.50, -0.60, 0.20)</code> poz\u00edci\u00f3ba.</p> <ol> <li> <p>\u00cdrjunk egy ciklust, melynek meg\u00e1ll\u00e1si felt\u00e9tele a <code>delta_r</code> megfelel\u0151 nagys\u00e1ga \u00e9s <code>rclpy.ok()</code>.</p> </li> <li> <p>Sz\u00e1m\u00edtsuk ki a k\u00edv\u00e1nt \u00e9s a pillanatnyi TCP poz\u00edci\u00f3k k\u00fcl\u00f6nbs\u00e9g\u00e9t (<code>delta_r</code>). Sk\u00e1l\u00e1zzuk <code>k_1</code> konstanssal.</p> </li> <li> <p><code>omega</code> legyen <code>[0.0, 0.0, 0.0]</code> (ignor\u00e1ljuk az orient\u00e1ci\u00f3t).</p> </li> <li> <p>Konkaten\u00e1ljuk <code>delta_r</code> \u00e9s <code>omega</code>-t.</p> </li> <li> <p>Sz\u00e1m\u00edtsuk ki a Jacobi m\u00e1trixot az adott konfigur\u00e1ci\u00f3ban a <code>kp.jacobian.calc_jacobian(...)</code> f\u00fcggv\u00e9ny seg\u00edts\u00e9g\u00e9vel.</p> </li> <li> <p>Sz\u00e1m\u00edtsuk ki Jacobi m\u00e1trix pszeudo-inverz\u00e9t <code>np.linalg.pinv(...)</code>.</p> </li> <li> <p>A fenti k\u00e9plet seg\u00edts\u00e9g\u00e9vel sz\u00e1m\u00edts\u00fck ki <code>delta_q</code>-t.</p> </li> <li> <p>N\u00f6velj\u00fck a csukl\u00f3sz\u00f6geket a kapott \u00e9rt\u00e9kekkel.</p> </li> </ol> <p>\u00c1br\u00e1zoljuk a TCP trajekt\u00f3ri\u00e1j\u00e1t Matplotlib seg\u00edts\u00e9g\u00e9vel.</p> <pre><code>import matplotlib.pyplot as plt\n\n# ...\n\n# Plot trajectory\nax = plt.figure().add_subplot(projection='3d')\nax.plot(x, y, z, label='TCP trajectory',  ls='-', marker='.')\nax.legend()\nax.set_xlabel('x [m]')\nax.set_ylabel('y [m]')\nax.set_zlabel('z [m]')\nplt.show()\n</code></pre>"},{"location":"07_robotics_principles/#bonusz-inverz-kinematika-orientacioval","title":"B\u00f3nusz: Inverz kinematika orient\u00e1ci\u00f3val","text":"<p>Eg\u00e9sz\u00edts\u00fck ki az el\u0151z\u0151 feladat megold\u00e1s\u00e1t \u00fagy, hogy az orient\u00e1ci\u00f3t is figyelembe vessz\u00fck az inverz kinematikai sz\u00e1m\u00edt\u00e1s sor\u00e1n.</p>"},{"location":"07_robotics_principles/#hasznos-linkek","title":"Hasznos linkek","text":"<ul> <li>ros-humble-ur documentation</li> <li>https://github.com/UniversalRobots/Universal_Robots_ROS2_Driver/tree/humble</li> <li>https://docs.ros.org/en/ros2_packages/humble/api/ur_robot_driver/usage.html#usage-with-official-ur-simulator</li> <li>https://github.com/UniversalRobots/Universal_Robots_Client_Library</li> <li>https://pypi.org/project/kinpy/</li> <li>https://en.wikipedia.org/wiki/Axis%E2%80%93angle_representation</li> <li>https://www.rosroboticslearning.com/jacobian</li> </ul>"},{"location":"08_service_action/","title":"08. ROS service, ROS action fogalma, felhaszn\u00e1l\u00e1sa","text":""},{"location":"08_service_action/#elmelet","title":"Elm\u00e9let","text":"<p>Warning</p> <p>ZH2 m\u00e1jus 26. 10:45 F.05 terem</p>"},{"location":"08_service_action/#ros-service","title":"ROS Service","text":"<ul> <li>Request/reply communication</li> <li>Use a client-server model</li> <li>Similar to Remote Procedure Calls (RPC)</li> <li>Blocking behavior by default (can be async)</li> </ul>"},{"location":"08_service_action/#ros-srv-files","title":"ROS <code>.srv</code> files","text":"<pre><code>int a\nint b\n---\nint sum\n</code></pre> <pre><code>#request constants\nint8 FOO=1\nint8 BAR=2\n#request fields\nint8 foobar\nanother_pkg/AnotherMessage msg\n---\n#response constants\nuint32 SECRET=123456\n#response fields\nanother_pkg/YetAnotherMessage val\nCustomMessageDefinedInThisPackage value\nuint32 an_integer\n</code></pre>"},{"location":"08_service_action/#ros-action","title":"ROS Action","text":"<p> Image source: https://docs.ros.org/ </p> <ul> <li>Ideal for communication with slower processes, e.g. environmental inetarcion</li> <li>Asynchronous communication (non-blocking)</li> <li>Actions consist of a goal, feedback, and a result</li> <li>Built on topics and services and function similarly to services</li> <li>Actions are preemptable, (can be canceled while executing)</li> <li>Provide steady feedback, unlike services which return a single response</li> <li>Actions use a client-server model, similar to the publisher-subscriber model</li> <li>An action client node sends a goal to an action server node that acknowledges the goal and returns a stream of feedback and a result.</li> </ul>"},{"location":"08_service_action/#ros-action-files","title":"ROS <code>.action</code> files","text":"<pre><code># Define the goal\nuint32 dishwasher_id  # Specify which dishwasher we want to use\n---\n# Define the result\nuint32 total_dishes_cleaned\n---\n# Define a feedback message\nfloat32 percent_complete\n</code></pre>"},{"location":"08_service_action/#building-custom-interfaces-msg-srv-and-action-files","title":"Building custom interfaces (<code>.msg</code> , <code>.srv</code> and <code>.action</code> files)","text":"<ul> <li><code>CMakeList.txt</code> and <code>package.xml</code> need to be modified</li> <li>For messages and services, see https://docs.ros.org/en/foxy/Tutorials/Beginner-Client-Libraries/Custom-ROS2-Interfaces.html</li> <li>For actions, see https://docs.ros.org/en/foxy/Tutorials/Intermediate/Creating-an-Action.html</li> </ul>"},{"location":"08_service_action/#gyakorlat","title":"Gyakorlat","text":""},{"location":"08_service_action/#1-actions-with-turtlesim","title":"1: Actions with Turtlesim","text":"<ol> <li> <p>Ind\u00edtsunk el egy <code>turtlesim node</code>-ot \u00e9s egy <code>turtle_teleop_key</code>-t. Figyelj\u00fck megy a <code>G|B|V|C|D|E|R|T</code> billenty\u0171k lenyom\u00e1s\u00e1nak hat\u00e1s\u00e1t.</p> <pre><code>ros2 run turtlesim turtlesim_node\n</code></pre> <pre><code>ros2 run turtlesim turtle_teleop_key\n</code></pre> </li> <li> <p>Tanulm\u00e1nyozzuk a rendszer m\u0171k\u00f6d\u00e9s\u00e9t az al\u00e1bbi parancsok seg\u00edts\u00e9g\u00e9vel:</p> <pre><code>ros2 node info /turtlesim\nros2 node info /teleop_turtle\nros2 action list -t\nros2 action info /turtle1/rotate_absolute\nros2 interface show turtlesim/action/RotateAbsolute\n</code></pre> </li> <li> <p>K\u00fcldj\u00fcnk action goal-t a parancssorb\u00f3l:</p> <pre><code>ros2 action send_goal /turtle1/rotate_absolute turtlesim/action/RotateAbsolute \"{theta: 3.14}\"\n</code></pre> </li> </ol>"},{"location":"08_service_action/#2-psm-grasp-action","title":"2: PSM grasp action","text":"<p>A k\u00f6vetkez\u0151kben ROS action server--client architekt\u00far\u00e1t fogunk implement\u00e1lni. A kor\u00e1bban implement\u00e1lt <code>psm_grasp.py</code> funkcionalit\u00e1s\u00e1t fogjuk k\u00e9t k\u00fcl\u00f6n node-ra bontani az al\u00e1bb \u00e1bra szerint.</p> <p></p>"},{"location":"08_service_action/#21-dvrk-ros2","title":"2.1: dVRK ROS2","text":"<ol> <li> <p>Ind\u00edtsuk el a PSM1 RViz szimul\u00e1ci\u00f3j\u00e1t. A dVRK konzolon ne felejts\u00fcnk el HOME-olni.</p> <pre><code># dVRK main console\nros2 run dvrk_robot dvrk_console_json -j ~/ros2_ws/install/sawIntuitiveResearchKitAll/share/sawIntuitiveResearchKit/share/console/console-PSM1_KIN_SIMULATED.json\n</code></pre> <pre><code># ROS 2 joint and robot state publishers\nros2 launch dvrk_model dvrk_state_publisher.launch.py arm:=PSM1\n</code></pre> <pre><code># RViz\nros2 run rviz2 rviz2 -d ~/ros2_ws/install/dvrk_model/share/dvrk_model/rviz/PSM1.rviz\n</code></pre> <p>URDF-fel kapcsolatos hib\u00e1k eset\u00e9n</p> <pre><code>locale  # check for UTF-8\n\nsudo apt update &amp;&amp; sudo apt install locales\nsudo locale-gen en_US en_US.UTF-8\nsudo update-locale LC_ALL=en_US.UTF-8 LANG=en_US.UTF-8\nexport LANG=en_US.UTF-8\n\nlocale  # verify settings\n</code></pre> </li> <li> <p>Tanulm\u00e1nyozzuk a szimul\u00e1tor m\u0171k\u00f6d\u00e9s\u00e9t ROS a tanult prancsok (<code>ros2 topic list</code>, <code>ros2 topic echo</code> <code>ros2 run rqt_gui rqt_gui</code>, stb.) haszn\u00e1lat\u00e1val. </p> </li> </ol>"},{"location":"08_service_action/#22-grasp-action-letrehozasa","title":"2.2: Grasp action l\u00e9trehoz\u00e1sa","text":"<ol> <li> <p>Hozzunk l\u00e9tre \u00faj csomagot <code>ros2_course_msgs</code> n\u00e9vvel:</p> <pre><code>cd ros2_ws/src\nros2 pkg create --build-type ament_cmake ros2_course_msgs --dependencies action_msgs std_msgs geometry_msgs rosidl_default_generators\n</code></pre> </li> <li> <p>Hozzuk l\u00e9tre a <code>ros2_course_msgs/action/Grasp.action</code> f\u00e1jlt az al\u00e1bbi tartalommal:</p> <pre><code># Goal\ngeometry_msgs/Point grasp_pos\n---\n# Result\nbool success\n---\n# Feedback\nstring status\n</code></pre> </li> <li> <p>Adjuk hozz\u00e1 a k\u00f6vetkez\u0151t a <code>CMakeLists.txt</code>-hez az <code>ament_package()</code> sor el\u00e9:</p> <pre><code>rosidl_generate_interfaces(${PROJECT_NAME}\n    \"action/Grasp.action\"\n    DEPENDENCIES geometry_msgs\n)\n</code></pre> </li> <li> <p>Adjuk hozz\u00e1 a dependency-ket a <code>package.xml</code>-hez:</p> <pre><code>&lt;buildtool_depend&gt;rosidl_default_generators&lt;/buildtool_depend&gt;\n\n&lt;member_of_group&gt;rosidl_interface_packages&lt;/member_of_group&gt;\n</code></pre> </li> <li> <p>Build-elj\u00fck a workspace-t:</p> <pre><code>cd ~/ros2_ws\ncolcon build --symlink-install --cmake-args -DCMAKE_BUILD_TYPE=Release\n</code></pre> </li> <li> <p>Ellen\u0151rizz\u00fck, hogy l\u00e9trej\u00f6tt-e a <code>Grasp</code> action:</p> <pre><code>source ~/ros2_ws/install/setup.bash\nros2 interface show ros2_course_msgs/action/Grasp\n</code></pre> </li> <li> <p>A <code>ros2_course</code> csomag <code>package.xml</code>-j\u00e9hez adjuk hozz\u00e1 a k\u00f6vetkez\u0151 sort a <code>ros2_course_msgs</code>dependency be\u00e1ll\u00edt\u00e1s\u00e1hoz:</p> <pre><code>&lt;exec_depend&gt;ros2_course_msgs&lt;/exec_depend&gt;\n</code></pre> </li> </ol>"},{"location":"08_service_action/#22-grasp-server-implementalasa","title":"2.2: Grasp server implement\u00e1l\u00e1sa","text":"<ol> <li> <p>Hozzunk l\u00e9tre \u00faj python forr\u00e1sf\u00e1jlt <code>grasp_server.py</code> n\u00e9vvel a  <code>~/ros2_ws/src/ros2_course/ros2_course</code> mapp\u00e1ban. Adjuk meg az \u00faj entry point-ot a <code>setup.py</code>-ban a megszokott m\u00f3don.</p> </li> <li> <p>Implement\u00e1ljuk az action server-t. Induljunk ki a p\u00e9ld\u00e1b\u00f3l: https://docs.ros.org/en/foxy/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.html. A node funkcionalit\u00e1sa \u00e1temelhet\u0151 a <code>psm_grasp.py</code>-b\u00f3l. A node egy <code>Grasp</code> action-t v\u00e1r, melynek hat\u00e1s\u00e1ra megragadja a goal-ban szerepl\u00f3 koordin\u00e1t\u00e1kon tal\u00e1lhat\u00f3 t\u00e1rgyat (a dummy markert).</p> <p>CLion interpreter</p> <p>CLion-ban az interpreterhez adjuk hozz\u00e1 a <code>/home/tamas/ros2_ws/install/ros2_course_msgs/lib/python3.8/site-packages</code> el\u00e9r\u00e9si utat.</p> </li> <li> <p>Futtassuk az action server-t \u00e9s tesztelj\u00fck a m\u0171k\u00f6d\u00e9s\u00e9t parancssorb\u00f3l:</p> <pre><code>ros2 run ros2_course grasp_server\n</code></pre> <pre><code>ros2 node info grasp_server\nros2 action list -t\nros2 action info /grasp\nros2 interface show ros2_course_msgs/action/Grasp\nros2 action send_goal --feedback /grasp ros2_course_msgs/action/Grasp \"{grasp_pos: {x: 0.0, y: 0.0, z: -0.18}}\"\n</code></pre> </li> </ol>"},{"location":"08_service_action/#23-grasp-client-implementalasa","title":"2.3: Grasp client implement\u00e1l\u00e1sa","text":"<ol> <li> <p>Hozzunk l\u00e9tre \u00faj python forr\u00e1sf\u00e1jlt <code>grasp_client.py</code> n\u00e9vvel a <code>~/ros2_ws/src/ros2_course/ros2_course</code> mapp\u00e1ban. Adjuk meg az \u00faj entry point-ot a <code>setup.py</code>-ban a megszokott m\u00f3don.</p> </li> <li> <p>Implement\u00e1ljuk az action client-et. Induljunk ki a p\u00e9ld\u00e1b\u00f3l: https://docs.ros.org/en/foxy/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.html. A node funkcionalit\u00e1sa \u00e1temelhet\u0151 a <code>psm_grasp.py</code>-b\u00f3l. A node feliratkozik a <code>/dummy_target_marker</code> topic-ra, \u00e9s egy <code>Grasp</code> action request-et k\u00fcld az action server-nek (`grasp_server') a marker megragad\u00e1s\u00e1ra.</p> </li> <li> <p>Futtassuk az action client-et (<code>grasp_client</code>) \u00e9s a <code>dummy_marker</code>-t:</p> <pre><code>ros2 run ros2_course dummy_marker\n</code></pre> <pre><code>ros2 run ros2_course grasp_client\n</code></pre> </li> </ol>"},{"location":"08_service_action/#3-isprime-service","title":"3. IsPrime service","text":"<ol> <li>Implement\u00e1ljunk ROS Service-t, amely egy kapott term\u00e9szetes sz\u00e1mr\u00f3l meg\u00e1llap\u00edtja, pr\u00edm-e. Haszn\u00e1ljuk az implement\u00e1lt service-t. Kiindulhatunk ebb\u0151l a p\u00e9ld\u00e1b\u00f3l: https://docs.ros.org/en/foxy/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.html.</li> </ol>"},{"location":"08_service_action/#hasznos-linkek","title":"Hasznos linkek","text":"<ul> <li>Build dVRK2 on ROS2</li> <li>ROS 2 examples</li> <li>Understanding ROS actions</li> <li>Creating an action</li> <li>Writing an Action Server and Client</li> <li>https://docs.ros.org/en/foxy/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.html</li> </ul>"},{"location":"09_sensory_data/","title":"08. Szenzoros adatok gy\u0171jt\u00e9se \u00e9s feldolgoz\u00e1sa","text":""},{"location":"09_sensory_data/#gyakorlat","title":"Gyakorlat","text":"<p>Thing may change here...</p> <p>Ezt a gyakorlatot lehet, hogy le fogjuk cser\u00e9lni.</p>"},{"location":"09_sensory_data/#1-leo-rover","title":"1: Leo rover","text":"<ol> <li> <p>Install\u00e1ljuk a Leo rover ROS package-eit:</p> <pre><code>sudo apt update\nsudo apt install ros-noetic-leo*\n</code></pre> </li> <li> <p>A http://wiki.ros.org/leo_gazebo le\u00edr\u00e1s seg\u00edts\u00e9g\u00e9vel ind\u00edtsuk el a gazebo szimul\u00e1tort a Mars landscape-pel.</p> </li> <li> <p>Ind\u00edtsunk teleop node-ot, \u00e9s mozgassuk meg a robotot.</p> </li> </ol>"},{"location":"09_sensory_data/#2-kave-a-marson-kepek-rogzitese","title":"2: K\u00e1v\u00e9 a Marson -- k\u00e9pek r\u00f6gz\u00edt\u00e9se","text":"<p>Warning</p> <p>A Mars rover k\u00e9pet k\u00fcld\u00f6tt egy k\u00fcl\u00f6n\u00f6s, k\u00e1v\u00e9s b\u00f6gr\u00e9nek t\u0171n\u0151 t\u00e1rgyr\u00f3l! A feladat, hogy ford\u00edtsuk a rovert a b\u00f6gre fel\u00e9, majd k\u00f6zel\u00edts\u00fck meg, hogy r\u00e9szletesen megvizsg\u00e1lhassuk.</p> <p></p> <ol> <li> <p>Ind\u00edtsuk el a Gazebo-t:</p> <pre><code>    gazebo\n</code></pre> </li> <li> <p>Az <code>insert</code> panelen keress\u00fck ki a <code>googleresearch/models/cole_hardware_mug_classic_blue</code> modellt, majd helyezz\u00fck el a szimul\u00e1ci\u00f3ban. Ez az\u00e9rt kell, hogy k\u00e9s\u0151bb meglegyen a b\u00f6gre modellje a f\u00e1ljrendszer\u00fcnkben.</p> </li> <li> <p>Z\u00e1rjuk be a Gazebo-t</p> </li> <li> <p>T\u00f6lts\u00fck le a <code>leo_masryard_coffee.launch</code> \u00e9s a <code>marsyard_coffe.world</code> f\u00e1jlokat, majd m\u00e1soljuk be rendre a <code>catkin_ws/src/ros_course/launch</code> \u00e9s <code>catkin_ws/src/ros_course/worlds</code> mapp\u00e1kba.</p> </li> <li> <p>A <code>.world</code> f\u00e1jlokban \u00edrjuk \u00e1t a <code>/home/tamas/.ignition/fuel/fuel...</code> el\u00e9r\u00e9si utakat (f\u00e1jlonk\u00e9nt 2x) a saj\u00e1tunkra.</p> </li> <li> <p>Ind\u00edtsuk el a szimul\u00e1tort:</p> <pre><code>    roslaunch ros_course leo_marsyard_coffee.launch\n</code></pre> </li> <li> <p>Ind\u00edtsuk el a teleopot \u00e9s az <code>rqt_image_view</code>-t:</p> <pre><code>rosrun leo_teleop key_teleop\n</code></pre> <pre><code>    rosrun rqt_image_view rqt_image_view\n</code></pre> <p>Tip</p> <p>Ha a szimul\u00e1tor futtat\u00e1sa t\u00fals\u00e1gosan megterhel\u0151 a PC sz\u00e1m\u00e1ra, dolgozhatunk a terrain n\u00e9lk\u00fcli <code>leo_gazebo_coffee.launch</code> \u00e9s <code>gazebo_coffe.world</code> f\u00e1jlokkal is.</p> </li> <li> <p>Ments\u00fcnk le egy-egy k\u00e9pet, amin l\u00e1that\u00f3, illetve nem l\u00e1that\u00f3 a k\u00e1v\u00e9s b\u00f6gre. </p> </li> </ol>"},{"location":"09_sensory_data/#3-kave-a-marson-offline-kepfeldolgozas","title":"3: K\u00e1v\u00e9 a Marson -- offline k\u00e9pfeldolgoz\u00e1s","text":"<ol> <li> <p>\u00cdrjunk Python szkriptet, amely beolvassa \u00e9s megjelen\u00edti a lementett k\u00e9peket.</p> </li> <li> <p>Sz\u00edn alap\u00fa szegment\u00e1l\u00e1ssal (vagy b\u00e1rhogy m\u00e1shogy) szegment\u00e1ljuk a k\u00e1v\u00e9s b\u00f6gr\u00e9t.</p> </li> <li> <p>Hat\u00e1rozzuk meg a b\u00f6gre k\u00f6z\u00e9ppontj\u00e1t k\u00e9pi koordin\u00e1t\u00e1kban.</p> </li> <li> <p>A szegment\u00e1l\u00e1s zaja gondot okozhat, pr\u00f3b\u00e1ljuk meg lesz\u0171rni.</p> </li> </ol>"},{"location":"09_sensory_data/#4-kave-a-marson-online-perception-node","title":"4: K\u00e1v\u00e9 a Marson -- online perception node","text":"<ol> <li> <p>Iratkozzunk fel a <code>/camera/image_raw</code> topicra, majd a <code>cv.imshow()</code> f\u00fcggv\u00e9ny seg\u00edts\u00e9g\u00e9val jelen\u00edts\u00fck meg a kapott k\u00e9peket.</p> </li> <li> <p>Dolgozzuk be a m\u0171k\u00f6d\u0151 computer vision algoritmusunkat egy ROS node-ba.</p> </li> <li> <p>Publik\u00e1ljuk \u00faj topicban a detekt\u00e1lt b\u00f6gre k\u00f6z\u00e9ppontj\u00e1nak k\u00e9pi koordin\u00e1t\u00e1t. Haszn\u00e1lhatjuk pl. az Int32MultiArray, Point2D t\u00edpusokat, vagy defini\u00e1lhatunk saj\u00e1tot (k\u00e9s\u0151bb sz\u00fcks\u00e9g lesz a b\u00f6gre m\u00e9ret\u00e9re is).</p> </li> <li> <p>B\u00f3nusz: publik\u00e1ljuk a maszkot \u00e9s a maszkolt k\u00e9pet egy-egy Image topicban</p> </li> </ol>"},{"location":"09_sensory_data/#5-kave-a-marson-operation-logic-node","title":"5: K\u00e1v\u00e9 a Marson -- operation logic node","text":"<ol> <li> <p>\u00cdrjunk \u00faj ROS node-ot, amely fogadja a perception node \u00fczeneteit, illetve k\u00e9pes a rover mozg\u00e1s\u00e1nak ir\u00e1ny\u00edt\u00e1s\u00e1ra.</p> </li> <li> <p>Forgassuk a rovert egy helyben, am\u00edg a b\u00f6gre a k\u00e9p k\u00f6zep\u00e9re nem ker\u00fcl.</p> </li> <li> <p>K\u00f6zel\u00edts\u00fck meg a b\u00f6gr\u00e9t annyira, hogy a l\u00e1tsz\u00f3lagos m\u00e9rete a k\u00e9p m\u00e9ret\u00e9nek 50%-\u00e1t el nem \u00e9ri.</p> </li> <li> <p>Ments\u00fcnk le k\u00e9pet a gyan\u00fas objektumr\u00f3l.</p> </li> </ol>"},{"location":"09_sensory_data/#51-bonusz","title":"5+1: B\u00f3nusz","text":"<ol> <li> <p>N\u00e9zz\u00fcnk sz\u00e9t Gazebo-ban a beilleszthet\u0151 modellek k\u00f6z\u00f6tt (<code>insert</code> panel) \u00e9s v\u00e1lasszunk egyet, amely valamilyen m\u00e1s m\u00f3dszerrel detekt\u00e1lhat\u00f3 a kamera k\u00e9p\u00e9n (pl. template matching).</p> </li> <li> <p>M\u00f3dos\u00edtsuk \u00fagy a node-okat, hogy ezt az objektumot k\u00f6zel\u00edtse meg a rover.</p> <p>Figyelem!</p> <p>Az \u00f3ra v\u00e9g\u00e9n a forr\u00e1sk\u00f3dokat mindenkinek fel kell t\u00f6lteni Moodle-re egy zip arch\u00edvumba csomagolva!</p> </li> </ol>"},{"location":"09_sensory_data/#hasznos-linkek","title":"Hasznos linkek","text":"<ul> <li>http://wiki.ros.org/leo_gazebo</li> <li>http://wiki.ros.org/cv_bridge/Tutorials/ConvertingBetweenROSImagesAndOpenCVImagesPython</li> <li>https://realpython.com/python-opencv-color-spaces/</li> <li> <p>https://stackoverflow.com/questions/59164192/how-to-find-the-contour-of-a-blob-using-opencv-python -Turtlebot</p> <pre><code>export TURTLEBOT3_MODEL=burger\nexport ROS_DOMAIN_ID=11\nexport GAZEBO_MODEL_PATH=$GAZEBO_MODEL_PATH:`ros2 pkg prefix turtlebot3_gazebo `/share/ turtlebot3_gazebo/models/\n</code></pre> </li> </ul> <p>https://ros2-industrial-workshop.readthedocs.io/en/latest/_source/navigation/ROS2-Cartographer.html</p>"},{"location":"projects/","title":"K\u00f6telez\u0151 Program","text":""},{"location":"projects/#utemezes","title":"\u00dctemez\u00e9s","text":"Okt. h\u00e9t D\u00e1tum Sz\u00e1monk\u00e9r\u00e9s 1. szep. 12 K\u00f6telez\u0151 programok ismertet\u00e9se. 7. okt. 24 Projekt labor I. 13. dec. 5 Projekt labor II. 14. m\u00e1j. 23 K\u00f6telez\u0151 programok bemutat\u00e1sa."},{"location":"projects/#nehezsegi-fokozatok-es-erdemjegyek","title":"Neh\u00e9zs\u00e9gi fokozatok \u00e9s \u00e9rdemjegyek","text":"<p>A k\u00f6telez\u0151 programok h\u00e1rom neh\u00e9zs\u00e9gi fokozatban teljes\u00edthet\u0151k. A neh\u00e9zs\u00e9gi fok meghat\u00e1rozza a legjobb \u00e9rdemjegyet, amely a teljes\u00edt\u00e9s\u00e9\u00e9rt kaphat\u00f3! </p> Neh\u00e9zs\u00e9gi fok Legjobb megszerezhet\u0151 \u00e9rdemjegy Basic 3 Advanced 4 Epic 5 <p>Tip</p> <p>A feladatok \u00fagy vannak megadva, hogy \u00e9rdemes a Basic szinttel kezdeni, \u00e9s onnan fokozatosan \u00e9p\u00edtkezni az Epic szintig.</p> <p>A k\u00f6telez\u0151 programok a k\u00f6vetkez\u0151 szempontok szerint ker\u00fclnek \u00e9rt\u00e9kel\u00e9sre: </p> <ul> <li>Bizony\u00edtottan saj\u00e1t munka</li> <li>\u00c9rt\u00e9kelhet\u0151 eredm\u00e9nyeket produk\u00e1ljon</li> <li>Verzi\u00f3k\u00f6vet\u00e9s haszn\u00e1lata, felt\u00f6lt\u00e9s GitHub/GitLab/egy\u00e9b repoba</li> <li>Launch f\u00e1jlok</li> <li>Megold\u00e1s teljess\u00e9ge</li> <li>Megfelel\u0151 ROS kommunik\u00e1ci\u00f3 alkalmaz\u00e1sa</li> <li>Program c\u00e9lszer\u0171 ROS strukt\u00far\u00e1ja</li> <li>Implement\u00e1ci\u00f3 min\u0151s\u00e9ge</li> <li>K\u00f3d dokument\u00e1l\u00e1sa</li> </ul> <p>Tip</p> <p>ChatGPT \u00e9s egy\u00e9b MI eszk\u00f6z\u00f6k haszn\u00e1lata megengedett.</p>"},{"location":"projects/#evkozi-jegy","title":"\u00c9vk\u00f6zi jegy","text":"<p>A f\u00e9l\u00e9v elfogad\u00e1s\u00e1nak felt\u00e9tele, hogy mind a k\u00e9t ZH, mind a k\u00f6telez\u0151 program \u00e9rt\u00e9kel\u00e9se legal\u00e1bb el\u00e9gs\u00e9ges. A k\u00e9t ZH k\u00f6z\u00fcl az egyik az utols\u00f3 \u00f3ra alkalm\u00e1val p\u00f3tolhat\u00f3.</p> <p>F\u00e9l\u00e9v v\u00e9gi jegy</p> <p>\\(Jegy = (ZH1 + ZH2 + 2 \\times K\u00f6tProg) / 4\\) </p>"},{"location":"projects/#kotelezo-program-temak","title":"K\u00f6telez\u0151 program t\u00e9m\u00e1k","text":""},{"location":"projects/#1-mobil-robot","title":"1. Mobil robot","text":""},{"location":"projects/#a-playground-robot","title":"A. Playground Robot","text":"<ul> <li>Gazebo install</li> <li>Setting up a robot simulation (Gazebo)</li> </ul>"},{"location":"projects/#b-turtlebot4","title":"B. TurtleBot4","text":"<ul> <li>TurtleBot4 Simulator Tutorial</li> <li>TurtleBot4 GUI Docs </li> </ul>"},{"location":"projects/#c-platypous-ros-1","title":"C. PlatypOUs (ROS 1)","text":"<ul> <li>PlatypOUs GitHub</li> </ul>"},{"location":"projects/#d-barmilyen-mobil-robot","title":"D. B\u00e1rmilyen mobil robot","text":""},{"location":"projects/#11-mobil-robot-akadaly-elkerules","title":"1.1. Mobil robot akad\u00e1ly elker\u00fcl\u00e9s","text":"<ul> <li>Basic: Szimul\u00e1tor \u00e9leszt\u00e9se. ROS node/node-ok implement\u00e1l\u00e1sa szenzorok adatainak beolvas\u00e1s\u00e1ra \u00e9s a a robot mozgat\u00e1s\u00e1ra.</li> <li>Advanced: ROS rendszer implement\u00e1l\u00e1sa akad\u00e1ly felismer\u00e9s\u00e9re \u00e9s az akad\u00e1lyt kiker\u00fcl\u0151 trajekt\u00f3ria tervez\u00e9s\u00e9re \u00e9s megval\u00f3s\u00edt\u00e1s\u00e1ra szimul\u00e1lt k\u00f6rnyezetben b\u00e1rmely szenzor felhaszn\u00e1l\u00e1s\u00e1val.</li> <li>Epic: Ny\u0171g\u00f6zz le!</li> </ul>"},{"location":"projects/#12-mobil-robot-palyakovetes","title":"1.2. Mobil robot p\u00e1lyak\u00f6vet\u00e9s","text":"<ul> <li>Basic: Szimul\u00e1tor \u00e9leszt\u00e9se. ROS node/node-ok implement\u00e1l\u00e1sa szenzorok adatainak beolvas\u00e1s\u00e1ra \u00e9s a a robot mozgat\u00e1s\u00e1ra.</li> <li>Advanced: ROS rendszer implement\u00e1l\u00e1sa p\u00e1lyak\u00f6vet\u00e9sre szimul\u00e1lt k\u00f6rnyezetben b\u00e1rmely szenzor felhaszn\u00e1l\u00e1s\u00e1val(pl. fal mellett halad\u00e1s adott t\u00e1vols\u00e1gra LIDAR seg\u00edts\u00e9g\u00e9vel).</li> <li>Epic: Ny\u0171g\u00f6zz le!</li> </ul>"},{"location":"projects/#13-mobil-robot-objektum-kovetesvisual-servoing","title":"1.3. Mobil robot objektum k\u00f6vet\u00e9s/visual servoing","text":"<ul> <li>Basic: Szimul\u00e1tor \u00e9leszt\u00e9se. ROS node/node-ok implement\u00e1l\u00e1sa szenzorok adatainak beolvas\u00e1s\u00e1ra \u00e9s a a robot mozgat\u00e1s\u00e1ra.</li> <li>Advanced: ROS rendszer implement\u00e1l\u00e1sa objektum megkeres\u00e9s\u00e9re/felismer\u00e9s\u00e9re \u00e9s k\u00f6vet\u00e9s\u00e9re/megk\u00f6zel\u00edt\u00e9s\u00e9re szimul\u00e1lt k\u00f6rnyezetben b\u00e1rmely szenzor felhaszn\u00e1l\u00e1s\u00e1val (pl. visual servoing).</li> <li>Epic: Ny\u0171g\u00f6zz le!</li> </ul>"},{"location":"projects/#14-mobil-robot-action-library","title":"1.4. Mobil robot action library","text":"<ul> <li>Basic: Szimul\u00e1tor \u00e9leszt\u00e9se. ROS node/node-ok implement\u00e1l\u00e1sa szenzorok adatainak beolvas\u00e1s\u00e1ra \u00e9s a a robot mozgat\u00e1s\u00e1ra.</li> <li>Advanced: Egyszer\u0171 m\u0171veleteket tartalmaz\u00f3, ROS action alap\u00fa k\u00f6nyvt\u00e1r \u00e9s ezeket v\u00e9grehajt\u00f3 rendszer implement\u00e1l\u00e1sa (pl. push object, move to object, turn around).</li> <li>Epic: Ny\u0171g\u00f6zz le!</li> </ul>"},{"location":"projects/#2-quadcopter","title":"2. Quadcopter","text":"<ul> <li>Gazebo install </li> <li> <p>Setting up a robot simulation (Gazebo) </p> <pre><code>ign gazebo -v 4 -r quadcopter.sdf\n</code></pre> </li> </ul> <p></p> <ul> <li>Basic: Szimul\u00e1tor \u00e9leszt\u00e9se. ROS node/node-ok implement\u00e1l\u00e1sa szenzorok adatainak beolvas\u00e1s\u00e1ra \u00e9s a a robot mozgat\u00e1s\u00e1ra.</li> <li>Advanced: ROS rendszer implement\u00e1l\u00e1sa magass\u00e1g/sebess\u00e9g szab\u00e1lyoz\u00e1s\u00e1ra.</li> <li>Epic: Ny\u0171g\u00f6zz le!</li> </ul>"},{"location":"projects/#3-szabadon-valasztott-gazebo-szimulacio","title":"3. Szabadon v\u00e1lasztott Gazebo szimul\u00e1ci\u00f3","text":"<ul> <li>Gazebo install </li> <li>Setting up a robot simulation (Gazebo) </li> <li>Gazebo World Examples </li> </ul> <p>Megegyez\u00e9s alapj\u00e1n.</p>"},{"location":"projects/#4-gazebo-szimulacio-osszeallitasa","title":"4. Gazebo szimul\u00e1ci\u00f3 \u00f6ssze\u00e1ll\u00edt\u00e1sa","text":"<ul> <li>Gazebo install </li> <li>Setting up a robot simulation (Gazebo) </li> <li>Gazebo World Examples </li> </ul> <p>Megegyez\u00e9s alapj\u00e1n.</p>"},{"location":"projects/#5-turtlesim","title":"5. TurtleSim","text":"<ul> <li>Turtlesim Tutorial </li> <li>Koch G\u00f6rbe</li> </ul>"},{"location":"projects/#51-turtlesim-fraktalszoveg","title":"5.1 Turtlesim Frakt\u00e1l/Sz\u00f6veg","text":"<ul> <li>Basic: Ar\u00e1nyos szab\u00e1lyoz\u00f3 implement\u00e1l\u00e1sa.</li> <li>Advanced: Frakt\u00e1l/sz\u00f6veg rajzol\u00e1sa.</li> <li>Epic: Ny\u0171g\u00f6zz le!</li> </ul>"},{"location":"projects/#6-dvrk","title":"6. DVRK","text":"<ul> <li>Download and compile dVRK 2</li> <li>Marker examples</li> </ul>"},{"location":"projects/#61-dvrk-interaktiv-marker","title":"6.1 DVRK Interakt\u00edv Marker","text":"<p>Megfoghat\u00f3, mozgathat\u00f3 marker implement\u00e1l\u00e1sa a DVRK szimul\u00e1tor\u00e1hoz.</p>"},{"location":"projects/#7-youbot-windows","title":"7. YouBot (Windows)","text":"<ul> <li>YouBot controller GitHub</li> </ul>"},{"location":"projects/#71-youbot-ros-integracio","title":"7.1. YouBot ROS integr\u00e1ci\u00f3","text":"<ul> <li>Basic: YouBot repo build-el\u00e9se, megismer\u00e9se</li> <li>Advanced: Szimul\u00e1lt robot mozgat\u00e1sa csukl\u00f3t\u00e9rben ROS k\u00f6rnyezetben</li> <li>Epic: Tesztel\u00e9s val\u00f3s roboton \u00e9s/vagy ny\u0171g\u00f6zz le!</li> </ul>"},{"location":"projects/#x-sajat-tema","title":"X. Saj\u00e1t t\u00e9ma","text":"<p>Megegyez\u00e9s alapj\u00e1n.</p>"},{"location":"projects/#hasznos-linkek","title":"Hasznos linkek","text":"<ul> <li>Gazebo install</li> <li>Setting up a robot simulation (Gazebo)</li> <li>Gazebo World Examples</li> <li>YouBot controller GitHub</li> <li>Download and compile dVRK 2</li> <li>Marker examples</li> <li>Turtlesim Tutorial</li> <li>Koch G\u00f6rbe </li> </ul>"}]}