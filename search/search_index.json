{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Kurzussal kapcsolatos inform\u00e1ci\u00f3k T\u00e1rgyfelel\u0151s Dr. Galambos P\u00e9ter peter.galambos@irob.uni-obuda.hu Oktat\u00f3k Levendovics Tam\u00e1s tamas.levendovics@irob.uni-obuda.hu D\u00e9t\u00e1r Borsa detar.borsa@gmail.com \u00d3rarendi inform\u00e1ci\u00f3k Csoport Id\u0151pont Terem 1. csoport P\u00e9ntek 11:40-14:15 BA.1.10 2. csoport P\u00e9ntek 14:25-17:00 BA.1.10 F\u00e9l\u00e9ves \u00fctemez\u00e9s Okt. h\u00e9t D\u00e1tum T\u00e9mak\u00f6r Sz\u00e1monk\u00e9r\u00e9s 1. febr. 16 K\u00f6vetelm\u00e9nyek ismertet\u00e9se. ROS bevezet\u00e9s. Fejleszt\u0151k\u00f6rnyezet fel\u00e1ll\u00edt\u00e1sa. - 2. febr. 23 Fejleszt\u0151k\u00f6rnyezet fel\u00e1ll\u00edt\u00e1sa. Linux alapok. ROS 1 \u00e9s ROS 2. Egyszer\u0171 pr\u00f3bak\u00f3dok futtat\u00e1sa. ROS package. Az alapvet\u0151 ROS kommunik\u00e1ci\u00f3, publisher \u00e9s subscriber implement\u00e1l\u00e1sa. - 3. m\u00e1rc. 1 Python alapok. ROS kommunik\u00e1ci\u00f3 implement\u00e1ci\u00f3j\u00e1nak gyakorl\u00e1sa, p\u00e9ldafeladatok megold\u00e1sa. - 4. m\u00e1rc. 8 Robotikai alapfogalmak, da Vinci seb\u00e9szrobot programoz\u00e1sa szimul\u00e1lt k\u00f6rnyezetben. - 5. m\u00e1rc. 15 Sz\u00fcnet. - 6. m\u00e1rc. 22 Projekt labor I. Verzi\u00f3k\u00f6vet\u00e9s, Git. (Laboron a jelenl\u00e9t opcion\u00e1lis) ZH1 (10:45, F.05.) 7. m\u00e1rc. 29 Rektori sz\u00fcnet. - 8. \u00e1pr. 5 ROS 2 Launch, Param, Bag - 9. \u00e1pr. 12 Kinematika, inverz kinematika, szimul\u00e1lt robotkar programoz\u00e1sa csukl\u00f3-, \u00e9s munkat\u00e9rben. - 10. \u00e1pr. 19 ROS service, ROS action fogalma, felhaszn\u00e1l\u00e1sa. - 11. \u00e1pr. 26 K\u00e1lm\u00e1n-sz\u0171r\u0151. Szenzoros adatok gy\u0171jt\u00e9se \u00e9s feldolgoz\u00e1sa ROS k\u00f6rnyezetben. Odometria-IMU szenzorf\u00fazi\u00f3 implement\u00e1ci\u00f3ja mobil robot platformra. - 12. m\u00e1j. 3 Projekt labor II. (Laboron a jelenl\u00e9t opcion\u00e1lis) ZH2 (10:45, F.05.) 13. m\u00e1j. 10 K\u00f6telez\u0151 programok bemutat\u00e1sa. P\u00f3t ZH (10:45, F.05.) 14. m\u00e1j. 17 Rektori sz\u00fcnet. - 14+1. m\u00e1j. 24 - Al\u00e1\u00edr\u00e1sp\u00f3tl\u00f3 Warning A f\u00e9l\u00e9v sor\u00e1n az \u00fctemez\u00e9s v\u00e1ltozhat! K\u00f6vetelm\u00e9nyek K\u00f6telez\u0151 program Bizony\u00edtottan saj\u00e1t munka \u00c9rt\u00e9kelhet\u0151 eredm\u00e9nyeket produk\u00e1ljon Pontoz\u00e1s: a megold\u00e1s teljess\u00e9ge, megfelel\u0151 ROS kommunik\u00e1ci\u00f3 alkalmaz\u00e1sa, program c\u00e9lszer\u0171 szerkezete, az implement\u00e1ci\u00f3 min\u0151s\u00e9ge, a k\u00f3d dokument\u00e1l\u00e1sa \u00c9vk\u00f6zi jegy A jelenl\u00e9t az \u00f3r\u00e1kon k\u00f6telez\u0151 (min 70%, vagyis maximum 2 igazolatlan hi\u00e1nyz\u00e1s). A f\u00e9l\u00e9v elfogad\u00e1s\u00e1nak felt\u00e9tele, hogy mind a k\u00e9t ZH, mind a k\u00f6telez\u0151 program \u00e9rt\u00e9kel\u00e9se legal\u00e1bb el\u00e9gs\u00e9ges. F\u00e9l\u00e9v v\u00e9gi jegy \\(Jegy = (ZH1 + ZH2 + 2 \\times K\u00f6tProg) / 4\\) A k\u00e9t ZH k\u00f6z\u00fcl egy a szorgalmi id\u0151szak utols\u00f3 het\u00e9ben p\u00f3tolhat\u00f3. Az \u00e9vk\u00f6zi jegy p\u00f3tl\u00f3 alkalmon egy ZH illetve a projekt bemutat\u00e1sa p\u00f3tolhat\u00f3. Bejczy Antal Intelligens Robottechnikai K\u00f6zpont (BARK) https://irob.uni-obuda.hu irob-saf (iRob Surgical Automation Framework) https://github.com/ABC-iRobotics/irob-saf PlatypOUs https://github.com/ABC-iRobotics/PlatypOUs-Mobile-Robot-Platform","title":"Kezd\u0151lap"},{"location":"#kurzussal-kapcsolatos-informaciok","text":"","title":"Kurzussal kapcsolatos inform\u00e1ci\u00f3k"},{"location":"#targyfelelos","text":"Dr. Galambos P\u00e9ter peter.galambos@irob.uni-obuda.hu","title":"T\u00e1rgyfelel\u0151s"},{"location":"#oktatok","text":"Levendovics Tam\u00e1s tamas.levendovics@irob.uni-obuda.hu D\u00e9t\u00e1r Borsa detar.borsa@gmail.com","title":"Oktat\u00f3k"},{"location":"#orarendi-informaciok","text":"Csoport Id\u0151pont Terem 1. csoport P\u00e9ntek 11:40-14:15 BA.1.10 2. csoport P\u00e9ntek 14:25-17:00 BA.1.10","title":"\u00d3rarendi inform\u00e1ci\u00f3k"},{"location":"#feleves-utemezes","text":"Okt. h\u00e9t D\u00e1tum T\u00e9mak\u00f6r Sz\u00e1monk\u00e9r\u00e9s 1. febr. 16 K\u00f6vetelm\u00e9nyek ismertet\u00e9se. ROS bevezet\u00e9s. Fejleszt\u0151k\u00f6rnyezet fel\u00e1ll\u00edt\u00e1sa. - 2. febr. 23 Fejleszt\u0151k\u00f6rnyezet fel\u00e1ll\u00edt\u00e1sa. Linux alapok. ROS 1 \u00e9s ROS 2. Egyszer\u0171 pr\u00f3bak\u00f3dok futtat\u00e1sa. ROS package. Az alapvet\u0151 ROS kommunik\u00e1ci\u00f3, publisher \u00e9s subscriber implement\u00e1l\u00e1sa. - 3. m\u00e1rc. 1 Python alapok. ROS kommunik\u00e1ci\u00f3 implement\u00e1ci\u00f3j\u00e1nak gyakorl\u00e1sa, p\u00e9ldafeladatok megold\u00e1sa. - 4. m\u00e1rc. 8 Robotikai alapfogalmak, da Vinci seb\u00e9szrobot programoz\u00e1sa szimul\u00e1lt k\u00f6rnyezetben. - 5. m\u00e1rc. 15 Sz\u00fcnet. - 6. m\u00e1rc. 22 Projekt labor I. Verzi\u00f3k\u00f6vet\u00e9s, Git. (Laboron a jelenl\u00e9t opcion\u00e1lis) ZH1 (10:45, F.05.) 7. m\u00e1rc. 29 Rektori sz\u00fcnet. - 8. \u00e1pr. 5 ROS 2 Launch, Param, Bag - 9. \u00e1pr. 12 Kinematika, inverz kinematika, szimul\u00e1lt robotkar programoz\u00e1sa csukl\u00f3-, \u00e9s munkat\u00e9rben. - 10. \u00e1pr. 19 ROS service, ROS action fogalma, felhaszn\u00e1l\u00e1sa. - 11. \u00e1pr. 26 K\u00e1lm\u00e1n-sz\u0171r\u0151. Szenzoros adatok gy\u0171jt\u00e9se \u00e9s feldolgoz\u00e1sa ROS k\u00f6rnyezetben. Odometria-IMU szenzorf\u00fazi\u00f3 implement\u00e1ci\u00f3ja mobil robot platformra. - 12. m\u00e1j. 3 Projekt labor II. (Laboron a jelenl\u00e9t opcion\u00e1lis) ZH2 (10:45, F.05.) 13. m\u00e1j. 10 K\u00f6telez\u0151 programok bemutat\u00e1sa. P\u00f3t ZH (10:45, F.05.) 14. m\u00e1j. 17 Rektori sz\u00fcnet. - 14+1. m\u00e1j. 24 - Al\u00e1\u00edr\u00e1sp\u00f3tl\u00f3 Warning A f\u00e9l\u00e9v sor\u00e1n az \u00fctemez\u00e9s v\u00e1ltozhat!","title":"F\u00e9l\u00e9ves \u00fctemez\u00e9s"},{"location":"#kovetelmenyek","text":"","title":"K\u00f6vetelm\u00e9nyek"},{"location":"#kotelezo-program","text":"Bizony\u00edtottan saj\u00e1t munka \u00c9rt\u00e9kelhet\u0151 eredm\u00e9nyeket produk\u00e1ljon Pontoz\u00e1s: a megold\u00e1s teljess\u00e9ge, megfelel\u0151 ROS kommunik\u00e1ci\u00f3 alkalmaz\u00e1sa, program c\u00e9lszer\u0171 szerkezete, az implement\u00e1ci\u00f3 min\u0151s\u00e9ge, a k\u00f3d dokument\u00e1l\u00e1sa","title":"K\u00f6telez\u0151 program"},{"location":"#evkozi-jegy","text":"A jelenl\u00e9t az \u00f3r\u00e1kon k\u00f6telez\u0151 (min 70%, vagyis maximum 2 igazolatlan hi\u00e1nyz\u00e1s). A f\u00e9l\u00e9v elfogad\u00e1s\u00e1nak felt\u00e9tele, hogy mind a k\u00e9t ZH, mind a k\u00f6telez\u0151 program \u00e9rt\u00e9kel\u00e9se legal\u00e1bb el\u00e9gs\u00e9ges. F\u00e9l\u00e9v v\u00e9gi jegy \\(Jegy = (ZH1 + ZH2 + 2 \\times K\u00f6tProg) / 4\\) A k\u00e9t ZH k\u00f6z\u00fcl egy a szorgalmi id\u0151szak utols\u00f3 het\u00e9ben p\u00f3tolhat\u00f3. Az \u00e9vk\u00f6zi jegy p\u00f3tl\u00f3 alkalmon egy ZH illetve a projekt bemutat\u00e1sa p\u00f3tolhat\u00f3.","title":"\u00c9vk\u00f6zi jegy"},{"location":"#bejczy-antal-intelligens-robottechnikai-kozpont-bark","text":"https://irob.uni-obuda.hu","title":"Bejczy Antal Intelligens Robottechnikai K\u00f6zpont (BARK)"},{"location":"#irob-saf","text":"(iRob Surgical Automation Framework) https://github.com/ABC-iRobotics/irob-saf","title":"irob-saf"},{"location":"#platypous","text":"https://github.com/ABC-iRobotics/PlatypOUs-Mobile-Robot-Platform","title":"PlatypOUs"},{"location":"01_system_setup/","text":"01. Bevezet\u00e9s Robot Operating System (ROS) bevezet\u00e9s A robot fogalma Joseph Engelberger, pioneer in industrial robotics: \"I can't define a robot, but I know one when I see one.\" Wikipedia: \"A robot is a machine\u2014especially one programmable by a computer\u2014 capable of carrying out a complex series of actions automatically. Robots can be guided by an external control device or the control may be embedded within. Robots may be constructed on the lines of human form, but most robots are machines designed to perform a task with no regard to their aesthetics.\" ISO 8373:2012 Robots and robotic devices \u2013 Vocabulary, FDIS 2012: \"A robot is an actuated mechanism programmable in two or more axes with a degree of autonomy, moving within its environment, to perform intended tasks.\" Rodney Brooks, Founder and CTO, Rethink Robotics: \"A robot is some sort of device, wich has sensors those sensors the world, does some sort of computation, decides on an action, and then does that action based on the sensory input, which makes some change out in the world, outside its body. Comment: the part \"make some change outside its body\" discriminates a washing machine from e.g. a Roomba.\" Tam\u00e1s Haidegger, Encyclopedia of Robotics : \"A robot is a complex mechatronic system enabled with electronics, sensors, actuators and software, executing tasks with a certain degree of autonomy. It may be pre-programmed, teleoperated or carrying out computations to make decisions.\" Mi a ROS? Open-source, robotikai c\u00e9l\u00fa middleware Modularit\u00e1s, \u00fajra-felhaszn\u00e1lhat\u00f3s\u00e1g (driverek, algoritmusok, library-k, ...) Hardware absztrakci\u00f3, ROS API C++ \u00e9s Python t\u00e1mogat\u00e1s Ubuntu Linux (kiv\u00e9ve ROS 2) N\u00e9pes k\u00f6z\u00f6ss\u00e9g T\u00f6rt\u00e9net 2000-es \u00e9vek k\u00f6zepe, Stanford: robotikai c\u00e9l\u00fa rugalmas, dinamikus szoftverrendszer protot\u00edpusok fejleszt\u00e9se 2007, Willow Garage: inkub\u00e1ci\u00f3, kialakult a ROS alapja BSD open-source licensz alatt Robotikai kutat\u00e1sok ter\u00fclet\u00e9n egyre ink\u00e1bb elterjedt, PR2 2012: Ipari robotika, ROS-Industrial 2017: ROS 2 Fejleszt\u0151k\u00f6rnyezet fel\u00e1ll\u00edt\u00e1sa - H\u00e1zi feladat Aj\u00e1nlott k\u00f6rnyezet: Ubuntu 22.04 ROS2 Humble IDE: QtCreator/CLion/VSCode ROS 2 Humble Hawksbill Locale be\u00e1ll\u00edt\u00e1sa. locale # check for UTF-8 sudo apt update && sudo apt install locales sudo locale-gen en_US en_US.UTF-8 sudo update-locale LC_ALL = en_US.UTF-8 LANG = en_US.UTF-8 export LANG = en_US.UTF-8 locale # verify settings ROS 2 Humble telep\u00edt\u00e9se sudo apt install software-properties-common sudo add-apt-repository universe sudo apt update && sudo apt install curl -y sudo curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key -o /usr/share/keyrings/ros-archive-keyring.gpg echo \"deb [arch= $( dpkg --print-architecture ) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu $( . /etc/os-release && echo $UBUNTU_CODENAME ) main\" | sudo tee /etc/apt/sources.list.d/ros2.list > /dev/null sudo apt update sudo apt upgrade sudo apt install ros-humble-desktop sudo apt install ros-dev-tools Ha ezzel megvagyunk, a k\u00f6vetkez\u0151 parancssal tesztelhetj\u00fck a ROS 2 telep\u00edt\u00e9s\u00fcnket: source /opt/ros/humble/setup.bash ros2 run demo_nodes_py talker A source parancs a k\u00f6rnyezeti v\u00e1ltoz\u00f3k be\u00e1ll\u00edt\u00e1s\u00e1\u00e9rt felel\u0151s, ezt minden \u00faj termin\u00e1lablak megnyit\u00e1sakor meg kell(ene) adni. Ez a parancs beilleszthet\u0151 a ~/.bashrc f\u00e1jl v\u00e9g\u00e9re, amely minden termin\u00e1lablak megnyit\u00e1sakor lefut, \u00edgy nem kell mindig be\u00edrnunk (ROS 2 lesz az alap\u00e9rtelmezett): echo \"source /opt/ros/humble/setup.bash\" >> ~/.bashrc Tov\u00e1bbi csomagok Az al\u00e1bbi csomagokra is sz\u00fcks\u00e9g lesz a f\u00e9l\u00e9v sor\u00e1n, \u00edgy ezeket is \u00e9rdemes feltelep\u00edteni: sudo apt install libxml2-dev libraw1394-dev libncurses5-dev qtcreator swig sox espeak cmake-curses-gui cmake-qt-gui git subversion gfortran libcppunit-dev libqt5xmlpatterns5-dev python3-osrf-pycommon libasound2-dev libgl1-mesa-dev xorg-dev python3-vcstool python3-colcon-common-extensions python3-pykdl libxml2-dev libraw1394-dev libncurses5-dev qtcreator swig sox espeak cmake-curses-gui cmake-qt-gui git subversion gfortran libcppunit-dev libqt5xmlpatterns5-dev libbluetooth-dev ros-humble-joint-state-publisher* ros-humble-xacro gfortran-9 IDE QtCreator ROS csomagok fejleszt\u00e9s\u00e9hez jelenleg az egyik legink\u00e1bb haszn\u00e1lhat\u00f3 IDE a QtCreator, melyhez ROS plugin is k\u00e9sz\u00fclt. Az installer az al\u00e1bbi linken el\u00e9rhet\u0151. A \"18.04 offline installer\"-t \u00e9rdemes haszn\u00e1lni, ez m\u0171k\u00f6dik Ubunutu 22.04-en is. https://ros-qtc-plugin.readthedocs.io/en/latest/_source/How-to-Install-Users.html Ha let\u00f6lt\u00f6tt\u00fck, az IDE az al\u00e1bbi paranccsal telep\u00edthet\u0151 (fontos, hogy cd zz\u00fcnk be a let\u00f6lt\u00e9s hely\u00e9re): chmod +x qtcreator-ros-bionic-latest-offline-installer.run sudo ./qtcreator-ros-bionic-latest-offline-installer.run Amikor a telep\u00edt\u0151 k\u00e9rdezi, hova telep\u00edtse, m\u00f3dos\u00edtsuk pl. /home/<USER>/QtCreator mapp\u00e1ra. Ha a root-ba tel\u00e9ep\u00edtj\u00fck, nem fogjuk tudni futtatni. A telep\u00edt\u00e9s ut\u00e1n \"Qt Creator (4.9.2)\" n\u00e9ven keress\u00fck. CLion A CLion magasfok\u00fa ROS integr\u00e1ci\u00f3val rendelkezik, a kurzus sor\u00e1n ennek a haszn\u00e1lata a legink\u00e1bb aj\u00e1nlott. Ingyenes hallgat\u00f3i licensz az al\u00e1bbi linken ig\u00e9nyelhet\u0151: https://www.jetbrains.com/community/education/#students Telep\u00edt\u00e9s ut\u00e1n keress\u00fck meg a /var/lib/snapd/desktop/applications/clion_clion.desktop f\u00e1jlt. A megfelel\u0151 sort \u00edrjuk \u00e1t erre, \u00edgy a termin\u00e1l \u00e1ltal be\u00e1ll\u00edtott k\u00f6rnyezetet fogja haszn\u00e1lni az IDE: Exec = bash -i -c \"/snap/bin/clion\" %f Visual Studio A Microsoft Visual Studio szint\u00e9n t\u00e1mogatja a ROS-hoz k\u00e9sz\u00fclt forr\u00e1sk\u00f3dokat, ez az IDE is haszn\u00e1lhat\u00f3 a f\u00e9l\u00e9v sor\u00e1n. Suggestion Install Terminator terminal emulator: sudo apt update sudo apt install terminator Hasznos linkek https://www.ros.org/ ROS 2 Humble installation ROS Distributions http://wiki.ros.org/ROS/Tutorials CLion hallgat\u00f3i licensz QtCreator + ROS plugin","title":"1. Bevezet\u00e9s, Fejleszt\u0151k\u00f6rnyezet"},{"location":"01_system_setup/#01-bevezetes","text":"","title":"01. Bevezet\u00e9s"},{"location":"01_system_setup/#robot-operating-system-ros-bevezetes","text":"","title":"Robot Operating System (ROS) bevezet\u00e9s"},{"location":"01_system_setup/#a-robot-fogalma","text":"Joseph Engelberger, pioneer in industrial robotics: \"I can't define a robot, but I know one when I see one.\" Wikipedia: \"A robot is a machine\u2014especially one programmable by a computer\u2014 capable of carrying out a complex series of actions automatically. Robots can be guided by an external control device or the control may be embedded within. Robots may be constructed on the lines of human form, but most robots are machines designed to perform a task with no regard to their aesthetics.\" ISO 8373:2012 Robots and robotic devices \u2013 Vocabulary, FDIS 2012: \"A robot is an actuated mechanism programmable in two or more axes with a degree of autonomy, moving within its environment, to perform intended tasks.\" Rodney Brooks, Founder and CTO, Rethink Robotics: \"A robot is some sort of device, wich has sensors those sensors the world, does some sort of computation, decides on an action, and then does that action based on the sensory input, which makes some change out in the world, outside its body. Comment: the part \"make some change outside its body\" discriminates a washing machine from e.g. a Roomba.\" Tam\u00e1s Haidegger, Encyclopedia of Robotics : \"A robot is a complex mechatronic system enabled with electronics, sensors, actuators and software, executing tasks with a certain degree of autonomy. It may be pre-programmed, teleoperated or carrying out computations to make decisions.\"","title":"A robot fogalma"},{"location":"01_system_setup/#mi-a-ros","text":"Open-source, robotikai c\u00e9l\u00fa middleware Modularit\u00e1s, \u00fajra-felhaszn\u00e1lhat\u00f3s\u00e1g (driverek, algoritmusok, library-k, ...) Hardware absztrakci\u00f3, ROS API C++ \u00e9s Python t\u00e1mogat\u00e1s Ubuntu Linux (kiv\u00e9ve ROS 2) N\u00e9pes k\u00f6z\u00f6ss\u00e9g","title":"Mi a ROS?"},{"location":"01_system_setup/#tortenet","text":"2000-es \u00e9vek k\u00f6zepe, Stanford: robotikai c\u00e9l\u00fa rugalmas, dinamikus szoftverrendszer protot\u00edpusok fejleszt\u00e9se 2007, Willow Garage: inkub\u00e1ci\u00f3, kialakult a ROS alapja BSD open-source licensz alatt Robotikai kutat\u00e1sok ter\u00fclet\u00e9n egyre ink\u00e1bb elterjedt, PR2 2012: Ipari robotika, ROS-Industrial 2017: ROS 2","title":"T\u00f6rt\u00e9net"},{"location":"01_system_setup/#fejlesztokornyezet-felallitasa-hazi-feladat","text":"Aj\u00e1nlott k\u00f6rnyezet: Ubuntu 22.04 ROS2 Humble IDE: QtCreator/CLion/VSCode","title":"Fejleszt\u0151k\u00f6rnyezet fel\u00e1ll\u00edt\u00e1sa - H\u00e1zi feladat"},{"location":"01_system_setup/#ros-2-humble-hawksbill","text":"Locale be\u00e1ll\u00edt\u00e1sa. locale # check for UTF-8 sudo apt update && sudo apt install locales sudo locale-gen en_US en_US.UTF-8 sudo update-locale LC_ALL = en_US.UTF-8 LANG = en_US.UTF-8 export LANG = en_US.UTF-8 locale # verify settings ROS 2 Humble telep\u00edt\u00e9se sudo apt install software-properties-common sudo add-apt-repository universe sudo apt update && sudo apt install curl -y sudo curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key -o /usr/share/keyrings/ros-archive-keyring.gpg echo \"deb [arch= $( dpkg --print-architecture ) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu $( . /etc/os-release && echo $UBUNTU_CODENAME ) main\" | sudo tee /etc/apt/sources.list.d/ros2.list > /dev/null sudo apt update sudo apt upgrade sudo apt install ros-humble-desktop sudo apt install ros-dev-tools Ha ezzel megvagyunk, a k\u00f6vetkez\u0151 parancssal tesztelhetj\u00fck a ROS 2 telep\u00edt\u00e9s\u00fcnket: source /opt/ros/humble/setup.bash ros2 run demo_nodes_py talker A source parancs a k\u00f6rnyezeti v\u00e1ltoz\u00f3k be\u00e1ll\u00edt\u00e1s\u00e1\u00e9rt felel\u0151s, ezt minden \u00faj termin\u00e1lablak megnyit\u00e1sakor meg kell(ene) adni. Ez a parancs beilleszthet\u0151 a ~/.bashrc f\u00e1jl v\u00e9g\u00e9re, amely minden termin\u00e1lablak megnyit\u00e1sakor lefut, \u00edgy nem kell mindig be\u00edrnunk (ROS 2 lesz az alap\u00e9rtelmezett): echo \"source /opt/ros/humble/setup.bash\" >> ~/.bashrc","title":"ROS 2 Humble Hawksbill"},{"location":"01_system_setup/#tovabbi-csomagok","text":"Az al\u00e1bbi csomagokra is sz\u00fcks\u00e9g lesz a f\u00e9l\u00e9v sor\u00e1n, \u00edgy ezeket is \u00e9rdemes feltelep\u00edteni: sudo apt install libxml2-dev libraw1394-dev libncurses5-dev qtcreator swig sox espeak cmake-curses-gui cmake-qt-gui git subversion gfortran libcppunit-dev libqt5xmlpatterns5-dev python3-osrf-pycommon libasound2-dev libgl1-mesa-dev xorg-dev python3-vcstool python3-colcon-common-extensions python3-pykdl libxml2-dev libraw1394-dev libncurses5-dev qtcreator swig sox espeak cmake-curses-gui cmake-qt-gui git subversion gfortran libcppunit-dev libqt5xmlpatterns5-dev libbluetooth-dev ros-humble-joint-state-publisher* ros-humble-xacro gfortran-9","title":"Tov\u00e1bbi csomagok"},{"location":"01_system_setup/#ide","text":"QtCreator ROS csomagok fejleszt\u00e9s\u00e9hez jelenleg az egyik legink\u00e1bb haszn\u00e1lhat\u00f3 IDE a QtCreator, melyhez ROS plugin is k\u00e9sz\u00fclt. Az installer az al\u00e1bbi linken el\u00e9rhet\u0151. A \"18.04 offline installer\"-t \u00e9rdemes haszn\u00e1lni, ez m\u0171k\u00f6dik Ubunutu 22.04-en is. https://ros-qtc-plugin.readthedocs.io/en/latest/_source/How-to-Install-Users.html Ha let\u00f6lt\u00f6tt\u00fck, az IDE az al\u00e1bbi paranccsal telep\u00edthet\u0151 (fontos, hogy cd zz\u00fcnk be a let\u00f6lt\u00e9s hely\u00e9re): chmod +x qtcreator-ros-bionic-latest-offline-installer.run sudo ./qtcreator-ros-bionic-latest-offline-installer.run Amikor a telep\u00edt\u0151 k\u00e9rdezi, hova telep\u00edtse, m\u00f3dos\u00edtsuk pl. /home/<USER>/QtCreator mapp\u00e1ra. Ha a root-ba tel\u00e9ep\u00edtj\u00fck, nem fogjuk tudni futtatni. A telep\u00edt\u00e9s ut\u00e1n \"Qt Creator (4.9.2)\" n\u00e9ven keress\u00fck. CLion A CLion magasfok\u00fa ROS integr\u00e1ci\u00f3val rendelkezik, a kurzus sor\u00e1n ennek a haszn\u00e1lata a legink\u00e1bb aj\u00e1nlott. Ingyenes hallgat\u00f3i licensz az al\u00e1bbi linken ig\u00e9nyelhet\u0151: https://www.jetbrains.com/community/education/#students Telep\u00edt\u00e9s ut\u00e1n keress\u00fck meg a /var/lib/snapd/desktop/applications/clion_clion.desktop f\u00e1jlt. A megfelel\u0151 sort \u00edrjuk \u00e1t erre, \u00edgy a termin\u00e1l \u00e1ltal be\u00e1ll\u00edtott k\u00f6rnyezetet fogja haszn\u00e1lni az IDE: Exec = bash -i -c \"/snap/bin/clion\" %f Visual Studio A Microsoft Visual Studio szint\u00e9n t\u00e1mogatja a ROS-hoz k\u00e9sz\u00fclt forr\u00e1sk\u00f3dokat, ez az IDE is haszn\u00e1lhat\u00f3 a f\u00e9l\u00e9v sor\u00e1n. Suggestion Install Terminator terminal emulator: sudo apt update sudo apt install terminator","title":"IDE"},{"location":"01_system_setup/#hasznos-linkek","text":"https://www.ros.org/ ROS 2 Humble installation ROS Distributions http://wiki.ros.org/ROS/Tutorials CLion hallgat\u00f3i licensz QtCreator + ROS plugin","title":"Hasznos linkek"},{"location":"02_linux_ros_principles/","text":"02. Linux, ROS alapismeretek Elm\u00e9let ROS 1 \u2192 ROS 2 ROS 2 was rewritten from scratch More modular architecture Improved support for real-time systems Support for multiple communication protocols Better interoperability with other robotic systems Focus on standardization and industry collaboration No ROS Master No Devel space rclpy , rclcpp More structured code ( Node class) Different build system Platforms: Windows, OS X, Linux ROS principles ROS node Executable part of ROS: python scripts compiled C++ code A process that performs computation Inter-node communication: ROS topics (streams) ROS parameter server Remote Procedure Calls (RPC) ROS services ROS actions Meant to operate at a fine-grained scale Typically, a robot control system consists of many nodes, like: Trajectory planning Localization Read sensory data Process sensory data Motor control User interface etc. ROS workspace Colcon workspace A folder where packages are modified, built, and installed. Source space: Source code of colcon packages Space where you can extract/checkout/clone source code for the packages you want to build Build space Colcon is invoked here to build packages Colcon and CMake keep intermediate files here Install space: Each package will be installed here; by default each package will be installed into a separate subdirectory Log space: Contains various logging information about each colcon invocation ROS package principle Enough functionality to be useful, but not too much that the package is heavyweight and difficult to use from other software. ROS dependencies After cloning a new package, use the following command to install depenencies: rosdep install --from-paths src --ignore-src -r -y ROS package Main unit to organize software in ROS Buildable and redistributable unit of ROS code Consists of (in the case of Python packages): package.xml file containing meta information about the package name version description dependencies etc. setup.py containing instructions for how to install the package setup.cfg is required when a package has executables, so ros2 run can find them /<package_name> - a directory with the same name as your package, used by ROS 2 tools to find your package, contains __init__.py Anything else ros2 run turtlesim turtlesim_node CMake For CMake packages (C++), the package contents will be different. ROS build system---Colcon System for building software packages in ROS Linux principles (Was) the only OS supported by ROS Security Efficieny Open-source Community support User freedom Distributions: Ubuntu , Linux Mint, Debian, etc. Terminal usage more dominant Suggestion Install Terminator terminal emulator: sudo apt update sudo apt install terminator Linux commands See some basic commands below: Run as administrator with sudo Manual of command man , e.g. man cp Package management apt , e.g. apt update , apt install Navigation cd List directory contents ls Create file touch Copy file cp Move file mv Remove file rm Make directory mkdir Remove directory rmdir Make a file executable chmod +x <filename> Safe restart: Crtl + Alt + PrtScr + REISUB If not sure, just google the command Environmental setup file setup.bash generated during init process of a new workspace extends shell environment ROS can find any resources that have been installed or built to that location source ~/ros2_ws/install/setup.bash Gyakorlat 1: Linux gyakorl\u00e1s Hozzunk l\u00e9tre egy \u00faj mapp\u00e1t a neveddel a Linux home k\u00f6nyvt\u00e1rban a mkdir parancs seg\u00edts\u00e9g\u00e9vel. mkdir ~/test_folder Navig\u00e1ljunk a l\u00e9trehozott mapp\u00e1ba a cd parancs haszn\u00e1lat\u00e1val. cd ~/test_folder Hozzunk l\u00e9tre egy \u00faj Python szkriptf\u00e1jlt a touch parancs seg\u00edts\u00e9g\u00e9vel, nevezz\u00fck el \"hello.py\"-nek. touch hello.py Nyissuk meg a \"hello.py\" f\u00e1jlt a Gedit sz\u00f6vegszerkeszt\u0151vel a gedit parancs seg\u00edts\u00e9g\u00e9vel. gedit hello.py \u00cdrj egy egyszer\u0171 Python programot a \"hello.py\" f\u00e1jlba, p\u00e9ld\u00e1ul: #!/usr/bin/python3 print ( \"Hello, World!\" ) Ment\u00e9s ut\u00e1n m\u00e1soljuk a \"hello.py\" f\u00e1jlt egy m\u00e1sik n\u00e9ven, p\u00e9ld\u00e1ul \"hello_copy.py\" a cp parancs seg\u00edts\u00e9g\u00e9vel. cp hello.py hello_copy.py Ellen\u0151rizz\u00fck, hogy a m\u00e1solat elk\u00e9sz\u00fclt-e az ls parancs haszn\u00e1lat\u00e1val. ls Futtassuk a \"hello.py\" f\u00e1jlt a python3 el\u0151taggal. python3 hello.py K\u00e9sz\u00edts\u00fcnk egy shell szkriptf\u00e1jlt, majd nyissuk is meg a Gedit seg\u00edts\u00e9g\u00e9vel, nevezz\u00fck el \"myscript.sh\"-nek. gedit myscript.sh \u00cdrjunk egy egyszer\u0171 shell szkriptet a \"myscript.sh\" f\u00e1jlba, p\u00e9ld\u00e1ul: #!/bin/bash echo \"I make another copy of hello.py!\" cp hello.py another_hello_copy.py Adjunk jogosults\u00e1got a \"myscript.sh\" f\u00e1jlnak a chmod parancs seg\u00edts\u00e9g\u00e9vel. chmod +x myscript.sh Futtassuk a \"myscript.sh\" f\u00e1jlt a ./ el\u0151taggal. ./myscript.sh Ellen\u0151rizz\u00fck, hogy az \u00fajabb m\u00e1solat elk\u00e9sz\u00fclt-e az ls parancs haszn\u00e1lat\u00e1val. ls 2: Turtlesim Ind\u00edtsuk el a turtlesim_node -ot \u00e9s a turtle_teleop_key node-ot az al\u00e1bbi parancsokkal, k\u00fcl\u00f6-k\u00fcl\u00f6n termin\u00e1l ablakokban: ros2 run turtlesim turtlesim_node ros2 run turtlesim turtle_teleop_key Tip Terminator -ban Ctrl-Shift-O , Ctrl-Shift-E billenty\u0171 kombin\u00e1ci\u00f3kkal oszthatjuk tov\u00e1bb az adott ablakot. Ctrl-Shift-W bez\u00e1rja az akt\u00edv ablakot. Futtat\u00e1s megszak\u00edt\u00e1sa Ctrl-C Az al\u00e1bbi ROS parancsok futtat\u00e1sa hasznos inform\u00e1ci\u00f3kkal szolg\u00e1lhat: ros2 wtf ros2 node list ros2 node info /turtlesim ros2 topic list ros2 topic info /turtle1/cmd_vel ros2 interface show geometry_msgs/msg/Twist ros2 topic echo /turtle1/cmd_vel Az al\u00e1bbi paranccsal ind\u00edtsuk el az rqt_gui -t: ros2 run rqt_gui rqt_gui Jelen\u00edts\u00fck meg a fut\u00f3 node-okat \u00e9s topic-okat rqt_gui -ban: Plugins \u2192 Introspection \u2192 Node Graph. Publik\u00e1ljunk a /turtle1/cmd_vel topic-ba szint\u00e9n az rqt_gui felhaszn\u00e1l\u00e1s\u00e1val: Plugins \u2192 Topics \u2192 Message Publisher. 3: ROS 2 workspace l\u00e9trehoz\u00e1sa Hozzunk l\u00e9tre \u00faj ROS2 workspace-t ros2_ws n\u00e9vvel. mkdir -p ~/ros2_ws/src 4: ROS 2 package l\u00e9trehoz\u00e1sa Hozzunk l\u00e9tre \u00faj ROS2 package-et ros2_course n\u00e9vvel \u00e9s egy Hello World-del. cd ~/ros2_ws/src ros2 pkg create --build-type ament_python --node-name hello ros2_course Szintaxis ros2 pkg create --build-type ament_python <package_name> Build-elj\u00fck a workspace-t. cd ~/ros2_ws colcon build --symlink-install Symlink A --symlink-install opci\u00f3 az Install space-be belinkeli a forr\u00e1s script-eket, \u00edgy m\u00f3dos\u00edt\u00e1s ut\u00e1n nem kell \u00fajra build-eln\u00fcnk. A ~/.bashrc f\u00e1jl v\u00e9g\u00e9re illessz\u00fck be az al\u00e1bbi sort: source ~/ros2_ws/install/setup.bash Import\u00e1l\u00e1s QtCreator-ba New file or project \u2192 Other project \u2192 ROS Workspace. V\u00e1lasszuk ki a Colcon-t, mint Build System, \u00e9s a ros2_ws -t, mint Worksapce path. Import\u00e1l\u00e1s CLion-ba \u00c1ll\u00edtsuk be a Python interpretert Python 3.8-ra, /usr/bin/python3 . Adjuk hozz\u00e1 ak\u00f6vetkez\u0151 el\u00e9r\u00e9si utat: /opt/ros/foxy/lib/python3.8/site-packages . Hozzuk l\u00e9tre a compile_commands.json f\u00e1jlt a ~/ros2_ws/build k\u00f6nyvt\u00e1rban az al\u00e1bbi tartalommal: [ ] Tesztelj\u00fck a Hello World m\u0171k\u00f6d\u00e9s\u00e9t: ros2 run ros2_course hello 5: Publisher implement\u00e1l\u00e1sa Python-ban Navig\u00e1ljunk a ros2_ws/src/ros2_course/ros2_course mapp\u00e1ba \u00e9s hozzuk l\u00e9tre a talker.py f\u00e1jlt az al\u00e1bbi tartalommal. import rclpy from rclpy.node import Node from std_msgs.msg import String class MinimalPublisher ( Node ): def __init__ ( self ): super () . __init__ ( 'minimal_publisher' ) self . publisher_ = self . create_publisher ( String , 'chatter' , 10 ) timer_period = 0.5 # seconds self . timer = self . create_timer ( timer_period , self . timer_callback ) self . i = 0 def timer_callback ( self ): msg = String () msg . data = 'Hello World: %d ' % self . i self . publisher_ . publish ( msg ) self . get_logger () . info ( 'Publishing: \" %s \"' % msg . data ) self . i += 1 def main ( args = None ): rclpy . init ( args = args ) minimal_publisher = MinimalPublisher () rclpy . spin ( minimal_publisher ) # Destroy the node explicitly # (optional - otherwise it will be done automatically # when the garbage collector destroys the node object) minimal_publisher . destroy_node () rclpy . shutdown () if __name__ == '__main__' : main () A setup.py f\u00e1jlban adjunk meg egy \u00faj entry point-on: 'talker = ros2_course.talker:main' , Build-elj\u00fck \u00e9s futtassuk a node-ot: cd ~/ros2_ws colcon build --symlink-install ros2 run ros2_course talker Ellen\u0151rizz\u00fck le a node kimenet\u00e9t a ros2 topic echo parancs vagy az rqt_gui haszn\u00e1lat\u00e1val. 6: Subscriber implement\u00e1l\u00e1sa Python-ban Navig\u00e1ljunk a ros2_ws/src/ros2_course/ros2_course mapp\u00e1ba \u00e9s hozzuk l\u00e9tre a listener.py f\u00e1jlt az al\u00e1bbi tartalommal. import rclpy from rclpy.node import Node from std_msgs.msg import String class MinimalSubscriber ( Node ): def __init__ ( self ): super () . __init__ ( 'minimal_subscriber' ) self . subscription = self . create_subscription ( String , 'chatter' , self . listener_callback , 10 ) self . subscription # prevent unused variable warning def listener_callback ( self , msg ): self . get_logger () . info ( 'I heard msg: \" %s \"' % msg . data ) def main ( args = None ): rclpy . init ( args = args ) minimal_subscriber = MinimalSubscriber () rclpy . spin ( minimal_subscriber ) # Destroy the node explicitly # (optional - otherwise it will be done automatically # when the garbage collector destroys the node object) minimal_subscriber . destroy_node () rclpy . shutdown () if __name__ == '__main__' : main () A setup.py f\u00e1jlban adjunk meg egy \u00faj entry point-on: 'listener = ros2_course.listener:main' , Build-elj\u00fck \u00e9s futtassuk mind a 2 node-ot: cd ~/ros2_ws colcon build --symlink-install ros2 run ros2_course talker ros2 run ros2_course listener Az rqt_gui haszn\u00e1lat\u00e1val jelen\u00edttess\u00fck meg a fut\u00f3 rendszer node-jait \u00e9s topic-jait: ros2 run rqt_gui rqt_gui Hasznos linkek ROS 2 Tutorials What is a ROS 2 package?","title":"2. Linux, ROS alapismeretek"},{"location":"02_linux_ros_principles/#02-linux-ros-alapismeretek","text":"","title":"02. Linux, ROS alapismeretek"},{"location":"02_linux_ros_principles/#elmelet","text":"","title":"Elm\u00e9let"},{"location":"02_linux_ros_principles/#ros-1-ros-2","text":"ROS 2 was rewritten from scratch More modular architecture Improved support for real-time systems Support for multiple communication protocols Better interoperability with other robotic systems Focus on standardization and industry collaboration No ROS Master No Devel space rclpy , rclcpp More structured code ( Node class) Different build system Platforms: Windows, OS X, Linux","title":"ROS 1 &rarr; ROS 2"},{"location":"02_linux_ros_principles/#ros-principles","text":"","title":"ROS principles"},{"location":"02_linux_ros_principles/#ros-node","text":"Executable part of ROS: python scripts compiled C++ code A process that performs computation Inter-node communication: ROS topics (streams) ROS parameter server Remote Procedure Calls (RPC) ROS services ROS actions Meant to operate at a fine-grained scale Typically, a robot control system consists of many nodes, like: Trajectory planning Localization Read sensory data Process sensory data Motor control User interface etc.","title":"ROS node"},{"location":"02_linux_ros_principles/#ros-workspace","text":"Colcon workspace A folder where packages are modified, built, and installed. Source space: Source code of colcon packages Space where you can extract/checkout/clone source code for the packages you want to build Build space Colcon is invoked here to build packages Colcon and CMake keep intermediate files here Install space: Each package will be installed here; by default each package will be installed into a separate subdirectory Log space: Contains various logging information about each colcon invocation ROS package principle Enough functionality to be useful, but not too much that the package is heavyweight and difficult to use from other software. ROS dependencies After cloning a new package, use the following command to install depenencies: rosdep install --from-paths src --ignore-src -r -y","title":"ROS workspace"},{"location":"02_linux_ros_principles/#ros-package","text":"Main unit to organize software in ROS Buildable and redistributable unit of ROS code Consists of (in the case of Python packages): package.xml file containing meta information about the package name version description dependencies etc. setup.py containing instructions for how to install the package setup.cfg is required when a package has executables, so ros2 run can find them /<package_name> - a directory with the same name as your package, used by ROS 2 tools to find your package, contains __init__.py Anything else ros2 run turtlesim turtlesim_node CMake For CMake packages (C++), the package contents will be different.","title":"ROS package"},{"location":"02_linux_ros_principles/#ros-build-system-colcon","text":"System for building software packages in ROS","title":"ROS build system---Colcon"},{"location":"02_linux_ros_principles/#linux-principles","text":"(Was) the only OS supported by ROS Security Efficieny Open-source Community support User freedom Distributions: Ubuntu , Linux Mint, Debian, etc. Terminal usage more dominant Suggestion Install Terminator terminal emulator: sudo apt update sudo apt install terminator","title":"Linux principles"},{"location":"02_linux_ros_principles/#linux-commands","text":"See some basic commands below: Run as administrator with sudo Manual of command man , e.g. man cp Package management apt , e.g. apt update , apt install Navigation cd List directory contents ls Create file touch Copy file cp Move file mv Remove file rm Make directory mkdir Remove directory rmdir Make a file executable chmod +x <filename> Safe restart: Crtl + Alt + PrtScr + REISUB If not sure, just google the command","title":"Linux commands"},{"location":"02_linux_ros_principles/#environmental-setup-file","text":"setup.bash generated during init process of a new workspace extends shell environment ROS can find any resources that have been installed or built to that location source ~/ros2_ws/install/setup.bash","title":"Environmental setup file"},{"location":"02_linux_ros_principles/#gyakorlat","text":"","title":"Gyakorlat"},{"location":"02_linux_ros_principles/#1-linux-gyakorlas","text":"Hozzunk l\u00e9tre egy \u00faj mapp\u00e1t a neveddel a Linux home k\u00f6nyvt\u00e1rban a mkdir parancs seg\u00edts\u00e9g\u00e9vel. mkdir ~/test_folder Navig\u00e1ljunk a l\u00e9trehozott mapp\u00e1ba a cd parancs haszn\u00e1lat\u00e1val. cd ~/test_folder Hozzunk l\u00e9tre egy \u00faj Python szkriptf\u00e1jlt a touch parancs seg\u00edts\u00e9g\u00e9vel, nevezz\u00fck el \"hello.py\"-nek. touch hello.py Nyissuk meg a \"hello.py\" f\u00e1jlt a Gedit sz\u00f6vegszerkeszt\u0151vel a gedit parancs seg\u00edts\u00e9g\u00e9vel. gedit hello.py \u00cdrj egy egyszer\u0171 Python programot a \"hello.py\" f\u00e1jlba, p\u00e9ld\u00e1ul: #!/usr/bin/python3 print ( \"Hello, World!\" ) Ment\u00e9s ut\u00e1n m\u00e1soljuk a \"hello.py\" f\u00e1jlt egy m\u00e1sik n\u00e9ven, p\u00e9ld\u00e1ul \"hello_copy.py\" a cp parancs seg\u00edts\u00e9g\u00e9vel. cp hello.py hello_copy.py Ellen\u0151rizz\u00fck, hogy a m\u00e1solat elk\u00e9sz\u00fclt-e az ls parancs haszn\u00e1lat\u00e1val. ls Futtassuk a \"hello.py\" f\u00e1jlt a python3 el\u0151taggal. python3 hello.py K\u00e9sz\u00edts\u00fcnk egy shell szkriptf\u00e1jlt, majd nyissuk is meg a Gedit seg\u00edts\u00e9g\u00e9vel, nevezz\u00fck el \"myscript.sh\"-nek. gedit myscript.sh \u00cdrjunk egy egyszer\u0171 shell szkriptet a \"myscript.sh\" f\u00e1jlba, p\u00e9ld\u00e1ul: #!/bin/bash echo \"I make another copy of hello.py!\" cp hello.py another_hello_copy.py Adjunk jogosults\u00e1got a \"myscript.sh\" f\u00e1jlnak a chmod parancs seg\u00edts\u00e9g\u00e9vel. chmod +x myscript.sh Futtassuk a \"myscript.sh\" f\u00e1jlt a ./ el\u0151taggal. ./myscript.sh Ellen\u0151rizz\u00fck, hogy az \u00fajabb m\u00e1solat elk\u00e9sz\u00fclt-e az ls parancs haszn\u00e1lat\u00e1val. ls","title":"1: Linux gyakorl\u00e1s"},{"location":"02_linux_ros_principles/#2-turtlesim","text":"Ind\u00edtsuk el a turtlesim_node -ot \u00e9s a turtle_teleop_key node-ot az al\u00e1bbi parancsokkal, k\u00fcl\u00f6-k\u00fcl\u00f6n termin\u00e1l ablakokban: ros2 run turtlesim turtlesim_node ros2 run turtlesim turtle_teleop_key Tip Terminator -ban Ctrl-Shift-O , Ctrl-Shift-E billenty\u0171 kombin\u00e1ci\u00f3kkal oszthatjuk tov\u00e1bb az adott ablakot. Ctrl-Shift-W bez\u00e1rja az akt\u00edv ablakot. Futtat\u00e1s megszak\u00edt\u00e1sa Ctrl-C Az al\u00e1bbi ROS parancsok futtat\u00e1sa hasznos inform\u00e1ci\u00f3kkal szolg\u00e1lhat: ros2 wtf ros2 node list ros2 node info /turtlesim ros2 topic list ros2 topic info /turtle1/cmd_vel ros2 interface show geometry_msgs/msg/Twist ros2 topic echo /turtle1/cmd_vel Az al\u00e1bbi paranccsal ind\u00edtsuk el az rqt_gui -t: ros2 run rqt_gui rqt_gui Jelen\u00edts\u00fck meg a fut\u00f3 node-okat \u00e9s topic-okat rqt_gui -ban: Plugins \u2192 Introspection \u2192 Node Graph. Publik\u00e1ljunk a /turtle1/cmd_vel topic-ba szint\u00e9n az rqt_gui felhaszn\u00e1l\u00e1s\u00e1val: Plugins \u2192 Topics \u2192 Message Publisher.","title":"2: Turtlesim"},{"location":"02_linux_ros_principles/#3-ros-2-workspace-letrehozasa","text":"Hozzunk l\u00e9tre \u00faj ROS2 workspace-t ros2_ws n\u00e9vvel. mkdir -p ~/ros2_ws/src","title":"3: ROS 2 workspace l\u00e9trehoz\u00e1sa"},{"location":"02_linux_ros_principles/#4-ros-2-package-letrehozasa","text":"Hozzunk l\u00e9tre \u00faj ROS2 package-et ros2_course n\u00e9vvel \u00e9s egy Hello World-del. cd ~/ros2_ws/src ros2 pkg create --build-type ament_python --node-name hello ros2_course Szintaxis ros2 pkg create --build-type ament_python <package_name> Build-elj\u00fck a workspace-t. cd ~/ros2_ws colcon build --symlink-install Symlink A --symlink-install opci\u00f3 az Install space-be belinkeli a forr\u00e1s script-eket, \u00edgy m\u00f3dos\u00edt\u00e1s ut\u00e1n nem kell \u00fajra build-eln\u00fcnk. A ~/.bashrc f\u00e1jl v\u00e9g\u00e9re illessz\u00fck be az al\u00e1bbi sort: source ~/ros2_ws/install/setup.bash Import\u00e1l\u00e1s QtCreator-ba New file or project \u2192 Other project \u2192 ROS Workspace. V\u00e1lasszuk ki a Colcon-t, mint Build System, \u00e9s a ros2_ws -t, mint Worksapce path. Import\u00e1l\u00e1s CLion-ba \u00c1ll\u00edtsuk be a Python interpretert Python 3.8-ra, /usr/bin/python3 . Adjuk hozz\u00e1 ak\u00f6vetkez\u0151 el\u00e9r\u00e9si utat: /opt/ros/foxy/lib/python3.8/site-packages . Hozzuk l\u00e9tre a compile_commands.json f\u00e1jlt a ~/ros2_ws/build k\u00f6nyvt\u00e1rban az al\u00e1bbi tartalommal: [ ] Tesztelj\u00fck a Hello World m\u0171k\u00f6d\u00e9s\u00e9t: ros2 run ros2_course hello","title":"4: ROS 2 package l\u00e9trehoz\u00e1sa"},{"location":"02_linux_ros_principles/#5-publisher-implementalasa-python-ban","text":"Navig\u00e1ljunk a ros2_ws/src/ros2_course/ros2_course mapp\u00e1ba \u00e9s hozzuk l\u00e9tre a talker.py f\u00e1jlt az al\u00e1bbi tartalommal. import rclpy from rclpy.node import Node from std_msgs.msg import String class MinimalPublisher ( Node ): def __init__ ( self ): super () . __init__ ( 'minimal_publisher' ) self . publisher_ = self . create_publisher ( String , 'chatter' , 10 ) timer_period = 0.5 # seconds self . timer = self . create_timer ( timer_period , self . timer_callback ) self . i = 0 def timer_callback ( self ): msg = String () msg . data = 'Hello World: %d ' % self . i self . publisher_ . publish ( msg ) self . get_logger () . info ( 'Publishing: \" %s \"' % msg . data ) self . i += 1 def main ( args = None ): rclpy . init ( args = args ) minimal_publisher = MinimalPublisher () rclpy . spin ( minimal_publisher ) # Destroy the node explicitly # (optional - otherwise it will be done automatically # when the garbage collector destroys the node object) minimal_publisher . destroy_node () rclpy . shutdown () if __name__ == '__main__' : main () A setup.py f\u00e1jlban adjunk meg egy \u00faj entry point-on: 'talker = ros2_course.talker:main' , Build-elj\u00fck \u00e9s futtassuk a node-ot: cd ~/ros2_ws colcon build --symlink-install ros2 run ros2_course talker Ellen\u0151rizz\u00fck le a node kimenet\u00e9t a ros2 topic echo parancs vagy az rqt_gui haszn\u00e1lat\u00e1val.","title":"5: Publisher implement\u00e1l\u00e1sa Python-ban"},{"location":"02_linux_ros_principles/#6-subscriber-implementalasa-python-ban","text":"Navig\u00e1ljunk a ros2_ws/src/ros2_course/ros2_course mapp\u00e1ba \u00e9s hozzuk l\u00e9tre a listener.py f\u00e1jlt az al\u00e1bbi tartalommal. import rclpy from rclpy.node import Node from std_msgs.msg import String class MinimalSubscriber ( Node ): def __init__ ( self ): super () . __init__ ( 'minimal_subscriber' ) self . subscription = self . create_subscription ( String , 'chatter' , self . listener_callback , 10 ) self . subscription # prevent unused variable warning def listener_callback ( self , msg ): self . get_logger () . info ( 'I heard msg: \" %s \"' % msg . data ) def main ( args = None ): rclpy . init ( args = args ) minimal_subscriber = MinimalSubscriber () rclpy . spin ( minimal_subscriber ) # Destroy the node explicitly # (optional - otherwise it will be done automatically # when the garbage collector destroys the node object) minimal_subscriber . destroy_node () rclpy . shutdown () if __name__ == '__main__' : main () A setup.py f\u00e1jlban adjunk meg egy \u00faj entry point-on: 'listener = ros2_course.listener:main' , Build-elj\u00fck \u00e9s futtassuk mind a 2 node-ot: cd ~/ros2_ws colcon build --symlink-install ros2 run ros2_course talker ros2 run ros2_course listener Az rqt_gui haszn\u00e1lat\u00e1val jelen\u00edttess\u00fck meg a fut\u00f3 rendszer node-jait \u00e9s topic-jait: ros2 run rqt_gui rqt_gui","title":"6: Subscriber implement\u00e1l\u00e1sa Python-ban"},{"location":"02_linux_ros_principles/#hasznos-linkek","text":"ROS 2 Tutorials What is a ROS 2 package?","title":"Hasznos linkek"},{"location":"03_python_principles/","text":"03. Python alapismeretek, ROS Publisher, ROS Subscriber Elm\u00e9let Python principles Interpreted, high-level programming language Name tribute to the comedy group Monty Python Powerful, still easy to learn, easy to use Readability Whitespace indentation Dynamically-typed Garbage colector and reference counting Object oriented programming Used in: AI, web applications, scientific computing, and many other areas python3 Python syntax import numpy as np import math class A : def __init__ ( self , name ): self . name = name def do_something ( self ): # will do something print ( self . name + \" is doing something.\" ) def count_to ( self , n ): # count to n, tell if the number is odd or even for i in range ( n ): if i % 2 == 0 : print ( i + \", it's even.\" ) else : print ( i + \", it's odd.\" ) if __name__ == \"__main__\" : a = A ( \"John\" ) a . do_something () a . count_to ( 10 ) Gyakorlat 1: Tekn\u0151c mozgat\u00e1sa egyenes ment\u00e9n \u00cdrjunk ROS node-ot, amely el\u0151re, egyenes ment\u00e9n megadott t\u00e1vols\u00e1gra mozgatja a tekn\u0151c\u00f6t. Nyissunk meg egy termin\u00e1lt. Huzzuk l\u00e9tre a ~/ros2_ws/src/ros2_course/ros2_course k\u00f6nyvt\u00e1runkban a turtlesim_controller.py f\u00e1jlt: cd ros2_ws/src/ros2_course/ros2_course touch turtlesim_controller.py A setup.py f\u00e1jlban adjunk meg egy \u00faj entry point-on: 'turtlesim_controller = ros2_course.turtlesim_controller:main' , M\u00e1soljuk be a turtlesim_controller.py -ba a program v\u00e1z\u00e1t: import math import rclpy from rclpy.node import Node class TurtlesimController ( Node ): def __init__ ( self ): super () . __init__ ( 'turtlesim_controller' ) def go_straight ( self , speed , distance ): # Implement straght motion here def main ( args = None ): rclpy . init ( args = args ) tc = TurtlesimController () # Destroy the node explicitly # (optional - otherwise it will be done automatically # when the garbage collector destroys the node object) tc . destroy_node () rclpy . shutdown () if __name__ == '__main__' : main () Ind\u00edtsunk egy egy turtlesim_node -ot, majd vizsg\u00e1ljuk meg a topic-ot, amellyel ir\u00e1ny\u00edthatjuk. K\u00e9t k\u00fcl\u00f6n termin\u00e1lablakban: ros2 run turtlesim turtlesim_node ros2 topic list ros2 topic info /turtle1/cmd_vel ros2 interface show geometry_msgs/msg/Twist Vagy haszn\u00e1ljuk az rqt_gui -t: ros2 run rqt_gui rqt_gui Import\u00e1ljuk a geometry_msgs/msg/Twist \u00fczenett\u00edpust \u00e9s hozzuk l\u00e9tre a publishert a turtlesim_controller.py -ban: from geometry_msgs.msg import Twist #... # In the constructor: self . twist_pub = self . create_publisher ( Twist , '/turtle1/cmd_vel' , 10 ) Implement\u00e1ljuk a go_straight met\u00f3dust. Sz\u00e1m\u00edtsuk ki, mennyi ideig tart, hogy a megadott t\u00e1vols\u00e1got a megadott sebess\u00e9ggel megtegye a tekn\u0151c. Publik\u00e1ljunk \u00fczenetet, amivel be\u00e1ll\u00edtjuk a sebess\u00e9get, majd v\u00e1rjunk a kisz\u00e1m\u00edtott ideig, ezut\u00e1n k\u00fcldj\u00fcnk \u00fajabb \u00fczenetet, amellyel null\u00e1zzuk a sebess\u00e9get. Egy kis seg\u00edts\u00e9g az API haszn\u00e1lat\u00e1hoz: # Create and publish msg vel_msg = Twist () if distance > 0 : vel_msg . linear . x = speed else : vel_msg . linear . x = - speed vel_msg . linear . y = 0.0 vel_msg . linear . z = 0.0 vel_msg . angular . x = 0.0 vel_msg . angular . y = 0.0 vel_msg . angular . z = 0.0 # Set loop rate loop_rate = self . create_rate ( 100 , self . get_clock ()) # Hz # Calculate time # T = ... # Publish first msg and note time when to stop self . twist_pub . publish ( vel_msg ) # self.get_logger().info('Turtle started.') when = self . get_clock () . now () + rclpy . time . Duration ( seconds = T ) # Publish msg while the calculated time is up while ( some condition ... ) and rclpy . ok (): self . twist_pub . publish ( vel_msg ) # self.get_logger().info('On its way...') rclpy . spin_once ( self ) # loop rate # turtle arrived, set velocity to 0 vel_msg . linear . x = 0.0 self . twist_pub . publish ( vel_msg ) # self.get_logger().info('Arrived to destination.') Build-elj\u00fck \u00e9s futtassuk a node-ot: cd ros2_ws colcon build --symlink-install ros2 run ros2_course turtlesim_controller 2: Alakzatok rajol\u00e1sa Implement\u00e1ljunk adott sz\u00f6ggel t\u00f6rt\u00e9n\u0151 elfordul\u00e1st megval\u00f3s\u00edt\u00f3 met\u00f3dust a turtlesim_controller.py -ban, az egyenes mozg\u00e1sshoz hasonl\u00f3 m\u00f3don. def turn ( self , omega , angle ): # Implement rotation here Implement\u00e1ljunk a tekn\u0151ccel n\u00e9gyzetet rajzoltat\u00f3 met\u00f3dust az egyenes mozg\u00e1st \u00e9s a fordul\u00e1st v\u00e9grehajt\u00f3 met\u00f3dusok felhaszn\u00e1l\u00e1s\u00e1val. def draw_square ( self , speed , omega , a ): Implement\u00e1ljunk a tekn\u0151ccel tetsz\u0151leges szab\u00e1lyos alakzatot rajzoltat\u00f3 met\u00f3dust az egyenes mozg\u00e1st \u00e9s a fordul\u00e1st v\u00e9grehajt\u00f3 met\u00f3dusok felhaszn\u00e1l\u00e1s\u00e1val. def draw_poly ( self , speed , omega , N , a ): 3: Go to funkci\u00f3 implement\u00e1l\u00e1sa Vizsg\u00e1ljuk meg a topic-ot, amelyen a turtlesim_node a pillanatnyi poz\u00edci\u00f3j\u00e1t publik\u00e1lja. ros2 topic list ros2 topic info /turtle1/pose ros2 interface show turtlesim/msg/Pose Vagy haszn\u00e1ljuk az rqt_gui -t: ros2 run rqt_gui rqt_gui Defini\u00e1ljunk subscriber-t a topichoz \u00e9s \u00edrjuk meg a callback f\u00fcggv\u00e9nyt. # Imports from turtlesim.msg import Pose # Constructor self . pose = None self . subscription = self . create_subscription ( Pose , '/turtle1/pose' , self . cb_pose , 10 ) # New method for TurtlesimController def cb_pose ( self , msg ): self . pose = msg Implement\u00e1ljuk a go_to met\u00f3dust. Tesztelj\u00fck, h\u00edvjuk meg a main-b\u0151l. # ... # Go to method def go_to ( self , speed , omega , x , y ): # Wait for position to be received loop_rate = self . create_rate ( 100 , self . get_clock ()) # Hz while self . pose is None and rclpy . ok (): self . get_logger () . info ( 'Waiting for pose...' ) rclpy . spin_once ( self ) # Stuff with atan2 # Main def main ( args = None ): rclpy . init ( args = args ) tc = TurtlesimController () tc . go_to ( 1.0 , 20.0 , 2 , 8 ) tc . go_to ( 1.0 , 20.0 , 2 , 2 ) tc . go_to ( 1.0 , 20.0 , 3 , 4 ) tc . go_to ( 1.0 , 20.0 , 6 , 2 ) # Destroy the node explicitly # (optional - otherwise it will be done automatically # when the garbage collector destroys the node object) tc . destroy_node () rclpy . shutdown () B\u00f3nusz: Advanced go to \u00cdrjunk ar\u00e1nyos szab\u00e1lyoz\u00f3t haszn\u00e1l\u00f3 go to funcki\u00f3t. Hasznos linkek For loops in python Some python functions Turtlesim help atan2","title":"3. Python alapismeretek,  ROS Publisher, ROS Subscriber"},{"location":"03_python_principles/#03-python-alapismeretek-ros-publisher-ros-subscriber","text":"","title":"03. Python alapismeretek, ROS Publisher, ROS Subscriber"},{"location":"03_python_principles/#elmelet","text":"","title":"Elm\u00e9let"},{"location":"03_python_principles/#python-principles","text":"Interpreted, high-level programming language Name tribute to the comedy group Monty Python Powerful, still easy to learn, easy to use Readability Whitespace indentation Dynamically-typed Garbage colector and reference counting Object oriented programming Used in: AI, web applications, scientific computing, and many other areas python3","title":"Python principles"},{"location":"03_python_principles/#python-syntax","text":"import numpy as np import math class A : def __init__ ( self , name ): self . name = name def do_something ( self ): # will do something print ( self . name + \" is doing something.\" ) def count_to ( self , n ): # count to n, tell if the number is odd or even for i in range ( n ): if i % 2 == 0 : print ( i + \", it's even.\" ) else : print ( i + \", it's odd.\" ) if __name__ == \"__main__\" : a = A ( \"John\" ) a . do_something () a . count_to ( 10 )","title":"Python syntax"},{"location":"03_python_principles/#gyakorlat","text":"","title":"Gyakorlat"},{"location":"03_python_principles/#1-teknoc-mozgatasa-egyenes-menten","text":"\u00cdrjunk ROS node-ot, amely el\u0151re, egyenes ment\u00e9n megadott t\u00e1vols\u00e1gra mozgatja a tekn\u0151c\u00f6t. Nyissunk meg egy termin\u00e1lt. Huzzuk l\u00e9tre a ~/ros2_ws/src/ros2_course/ros2_course k\u00f6nyvt\u00e1runkban a turtlesim_controller.py f\u00e1jlt: cd ros2_ws/src/ros2_course/ros2_course touch turtlesim_controller.py A setup.py f\u00e1jlban adjunk meg egy \u00faj entry point-on: 'turtlesim_controller = ros2_course.turtlesim_controller:main' , M\u00e1soljuk be a turtlesim_controller.py -ba a program v\u00e1z\u00e1t: import math import rclpy from rclpy.node import Node class TurtlesimController ( Node ): def __init__ ( self ): super () . __init__ ( 'turtlesim_controller' ) def go_straight ( self , speed , distance ): # Implement straght motion here def main ( args = None ): rclpy . init ( args = args ) tc = TurtlesimController () # Destroy the node explicitly # (optional - otherwise it will be done automatically # when the garbage collector destroys the node object) tc . destroy_node () rclpy . shutdown () if __name__ == '__main__' : main () Ind\u00edtsunk egy egy turtlesim_node -ot, majd vizsg\u00e1ljuk meg a topic-ot, amellyel ir\u00e1ny\u00edthatjuk. K\u00e9t k\u00fcl\u00f6n termin\u00e1lablakban: ros2 run turtlesim turtlesim_node ros2 topic list ros2 topic info /turtle1/cmd_vel ros2 interface show geometry_msgs/msg/Twist Vagy haszn\u00e1ljuk az rqt_gui -t: ros2 run rqt_gui rqt_gui Import\u00e1ljuk a geometry_msgs/msg/Twist \u00fczenett\u00edpust \u00e9s hozzuk l\u00e9tre a publishert a turtlesim_controller.py -ban: from geometry_msgs.msg import Twist #... # In the constructor: self . twist_pub = self . create_publisher ( Twist , '/turtle1/cmd_vel' , 10 ) Implement\u00e1ljuk a go_straight met\u00f3dust. Sz\u00e1m\u00edtsuk ki, mennyi ideig tart, hogy a megadott t\u00e1vols\u00e1got a megadott sebess\u00e9ggel megtegye a tekn\u0151c. Publik\u00e1ljunk \u00fczenetet, amivel be\u00e1ll\u00edtjuk a sebess\u00e9get, majd v\u00e1rjunk a kisz\u00e1m\u00edtott ideig, ezut\u00e1n k\u00fcldj\u00fcnk \u00fajabb \u00fczenetet, amellyel null\u00e1zzuk a sebess\u00e9get. Egy kis seg\u00edts\u00e9g az API haszn\u00e1lat\u00e1hoz: # Create and publish msg vel_msg = Twist () if distance > 0 : vel_msg . linear . x = speed else : vel_msg . linear . x = - speed vel_msg . linear . y = 0.0 vel_msg . linear . z = 0.0 vel_msg . angular . x = 0.0 vel_msg . angular . y = 0.0 vel_msg . angular . z = 0.0 # Set loop rate loop_rate = self . create_rate ( 100 , self . get_clock ()) # Hz # Calculate time # T = ... # Publish first msg and note time when to stop self . twist_pub . publish ( vel_msg ) # self.get_logger().info('Turtle started.') when = self . get_clock () . now () + rclpy . time . Duration ( seconds = T ) # Publish msg while the calculated time is up while ( some condition ... ) and rclpy . ok (): self . twist_pub . publish ( vel_msg ) # self.get_logger().info('On its way...') rclpy . spin_once ( self ) # loop rate # turtle arrived, set velocity to 0 vel_msg . linear . x = 0.0 self . twist_pub . publish ( vel_msg ) # self.get_logger().info('Arrived to destination.') Build-elj\u00fck \u00e9s futtassuk a node-ot: cd ros2_ws colcon build --symlink-install ros2 run ros2_course turtlesim_controller","title":"1: Tekn\u0151c mozgat\u00e1sa egyenes ment\u00e9n"},{"location":"03_python_principles/#2-alakzatok-rajolasa","text":"Implement\u00e1ljunk adott sz\u00f6ggel t\u00f6rt\u00e9n\u0151 elfordul\u00e1st megval\u00f3s\u00edt\u00f3 met\u00f3dust a turtlesim_controller.py -ban, az egyenes mozg\u00e1sshoz hasonl\u00f3 m\u00f3don. def turn ( self , omega , angle ): # Implement rotation here Implement\u00e1ljunk a tekn\u0151ccel n\u00e9gyzetet rajzoltat\u00f3 met\u00f3dust az egyenes mozg\u00e1st \u00e9s a fordul\u00e1st v\u00e9grehajt\u00f3 met\u00f3dusok felhaszn\u00e1l\u00e1s\u00e1val. def draw_square ( self , speed , omega , a ): Implement\u00e1ljunk a tekn\u0151ccel tetsz\u0151leges szab\u00e1lyos alakzatot rajzoltat\u00f3 met\u00f3dust az egyenes mozg\u00e1st \u00e9s a fordul\u00e1st v\u00e9grehajt\u00f3 met\u00f3dusok felhaszn\u00e1l\u00e1s\u00e1val. def draw_poly ( self , speed , omega , N , a ):","title":"2: Alakzatok rajol\u00e1sa"},{"location":"03_python_principles/#3-go-to-funkcio-implementalasa","text":"Vizsg\u00e1ljuk meg a topic-ot, amelyen a turtlesim_node a pillanatnyi poz\u00edci\u00f3j\u00e1t publik\u00e1lja. ros2 topic list ros2 topic info /turtle1/pose ros2 interface show turtlesim/msg/Pose Vagy haszn\u00e1ljuk az rqt_gui -t: ros2 run rqt_gui rqt_gui Defini\u00e1ljunk subscriber-t a topichoz \u00e9s \u00edrjuk meg a callback f\u00fcggv\u00e9nyt. # Imports from turtlesim.msg import Pose # Constructor self . pose = None self . subscription = self . create_subscription ( Pose , '/turtle1/pose' , self . cb_pose , 10 ) # New method for TurtlesimController def cb_pose ( self , msg ): self . pose = msg Implement\u00e1ljuk a go_to met\u00f3dust. Tesztelj\u00fck, h\u00edvjuk meg a main-b\u0151l. # ... # Go to method def go_to ( self , speed , omega , x , y ): # Wait for position to be received loop_rate = self . create_rate ( 100 , self . get_clock ()) # Hz while self . pose is None and rclpy . ok (): self . get_logger () . info ( 'Waiting for pose...' ) rclpy . spin_once ( self ) # Stuff with atan2 # Main def main ( args = None ): rclpy . init ( args = args ) tc = TurtlesimController () tc . go_to ( 1.0 , 20.0 , 2 , 8 ) tc . go_to ( 1.0 , 20.0 , 2 , 2 ) tc . go_to ( 1.0 , 20.0 , 3 , 4 ) tc . go_to ( 1.0 , 20.0 , 6 , 2 ) # Destroy the node explicitly # (optional - otherwise it will be done automatically # when the garbage collector destroys the node object) tc . destroy_node () rclpy . shutdown ()","title":"3: Go to funkci\u00f3 implement\u00e1l\u00e1sa"},{"location":"03_python_principles/#bonusz-advanced-go-to","text":"\u00cdrjunk ar\u00e1nyos szab\u00e1lyoz\u00f3t haszn\u00e1l\u00f3 go to funcki\u00f3t.","title":"B\u00f3nusz: Advanced go to"},{"location":"03_python_principles/#hasznos-linkek","text":"For loops in python Some python functions Turtlesim help atan2","title":"Hasznos linkek"},{"location":"04_da_vinci/","text":"04. Robotikai alapfogalmak, da Vinci seb\u00e9szrobot programoz\u00e1sa szimul\u00e1lt k\u00f6rnyezetben Elm\u00e9let Merev test mozg\u00e1sa Def. Merev test Merevnek tekinthet\u0151 az a test, mely pontjainak t\u00e1vols\u00e1ga mozg\u00e1s sor\u00e1n nem v\u00e1ltozik, vagyis b\u00e1rmely k\u00e9t pontj\u00e1nak t\u00e1vols\u00e1ga id\u0151ben \u00e1lland\u00f3. Merev test alakja, t\u00e9rfogata szint\u00e9n \u00e1lland\u00f3. Merev test t\u00e9rbeli helyzete megadhat\u00f3 b\u00e1rmely 3 nem egy egyenesbe es\u0151 pontj\u00e1nak helyzet\u00e9vel. A test helyzet\u00e9t szeml\u00e9letesebben megadhatjuk egy tetsz\u0151leges pontj\u00e1nak 3 koordin\u00e1t\u00e1j\u00e1val (poz\u00edci\u00f3) \u00e9s a test orient\u00e1ci\u00f3j\u00e1val. Merev testek mozg\u00e1sai k\u00e9t elemi mozg\u00e1sfajt\u00e1b\u00f3l tev\u0151dnek \u00f6ssze: halad\u00f3 mozg\u00e1s (transzl\u00e1ci\u00f3) \u00e9s tengely k\u00f6r\u00fcli forg\u00e1s (rot\u00e1ci\u00f3) Transzl\u00e1ci\u00f3s mozg\u00e1s sor\u00e1n a test minden pontja egym\u00e1ssal p\u00e1rhuzamos, egybev\u00e1g\u00f3 p\u00e1ly\u00e1t \u00edr le, a test orient\u00e1ci\u00f3ja pedig nem v\u00e1ltozik. Rot\u00e1ci\u00f3 sor\u00e1n a forg\u00e1stengelyen l\u00e9v\u0151 pontok poz\u00edci\u00f3ja nem v\u00e1ltozik, a test t\u00f6bbi pontja pedig a forg\u00e1stengelyre mer\u0151leges s\u00edkokban k\u00f6rp\u00e1ly\u00e1n mozog. A merev test szabad mozg\u00e1sa is le\u00edrhat\u00f3 mint egyidej\u0171leg egy bizonyos tengely k\u00f6r\u00fcli forg\u00e1s \u00e9s egy halad\u00f3 mozg\u00e1s . 3D transzform\u00e1ci\u00f3k Poz\u00edci\u00f3: 3 elem\u0171 offszet vektor Orient\u00e1ci\u00f3: 3 x 3 rot\u00e1ci\u00f3s matrix tov\u00e1bbi orient\u00e1ci\u00f3 reprezent\u00e1ci\u00f3k: Euler-sz\u00f6gek, RPY, angle axis, quaternion Helyzet (pose): 4 \u00d7 4 transzform\u00e1ci\u00f3s m\u00e1rtrix Koordin\u00e1ta rendszer (frame): null pont, 3 tengely, 3 b\u00e1zis vektor, jobbk\u00e9z-szab\u00e1ly Homog\u00e9n transzform\u00e1ci\u00f3k: rot\u00e1ci\u00f3 \u00e9s transzl\u00e1ci\u00f3 egy\u00fctt pl. \\(\\mathbf{R}\\) rot\u00e1ci\u00f3 \u00e9s \\(\\mathbf{v}\\) transzl\u00e1ci\u00f3 eset\u00e9n: \\[ \\mathbf{T} = \\left[\\matrix{\\mathbf{R} & \\mathbf{v}\\\\\\mathbf{0} & 1 }\\right] = \\left[\\matrix{r_{1,1} & r_{1,2} & r_{1,3} & v_x\\\\r_{2,1} & r_{2,2} & r_{2,3} & v_y\\\\r_{3,1} & r_{3,2} & r_{3,3} & v_z\\\\\\ 0 & 0 & 0 & 1 }\\right] \\] Homog\u00e9n koordin\u00e1t\u00e1k: Vektor: 0-val eg\u00e9sz\u00edtj\u00fck ki, \\(\\mathbf{a_H}=\\left[\\matrix{\\mathbf{a} \\\\ 0}\\right]=\\left[\\matrix{a_x \\\\ a_y \\\\ a_z \\\\ 0}\\right]\\) Pont: 1-gyel eg\u00e9sz\u00edtj\u00fck ki, \\(\\mathbf{p_H}=\\left[\\matrix{\\mathbf{p} \\\\ 1}\\right]=\\left[\\matrix{p_x \\\\ p_y \\\\ p_z \\\\ 1}\\right]\\) Transzform\u00e1ci\u00f3k alkalmaz\u00e1sa egyszer\u0171bb: \\[ \\mathbf{q} = \\mathbf{R}\\mathbf{p} + \\mathbf{v} \\to \\left[\\matrix{\\mathbf{q} \\\\ 1}\\right] = \\left[\\matrix{\\mathbf{R} & \\mathbf{v}\\\\\\mathbf{0} & 1 }\\right]\\left[\\matrix{\\mathbf{p} \\\\ 1}\\right] \\] Szabads\u00e1gi fok (DoF): egym\u00e1st\u00f3l f\u00fcggetlen mennyis\u00e9gek sz\u00e1ma. Robotikai alapok Robotok fel\u00e9p\u00edt\u00e9se: szegmensek (segment, link) \u00e9s csukl\u00f3k (joints) Munkat\u00e9r (task space, cartesian space): H\u00e1romdimenzi\u00f3s t\u00e9r, ahol a feladat, trajekt\u00f3ri\u00e1k, akad\u00e1lyok, stb. defini\u00e1l\u00e1sra ker\u00fclnek. TCP (Tool Center Point): az end effektorhoz r\u00f6gz\u00edtett koordin\u00e1ta rendszer (frame) Base/world frame Csukl\u00f3t\u00e9r (joint space): A robot csukl\u00f3ihoz rendelt mennyis\u00e9gek, melyeket a robot alacsony szint\u0171 ir\u00e1ny\u00edt\u00f3 rendszere \u00e9rtelmezni k\u00e9pes. csukl\u00f3 koordin\u00e1t\u00e1k, sebess\u00e9gek, gyorsul\u00e1sok, nyomat\u00e9kok... Python libraries Numpy Python library High dimension arrays and matrices Mathematical functions import numpy as np # Creating ndarrays a = np . zeros ( 3 ) a . shape a . shape = ( 3 , 1 ) a = np . ones ( 5 ) a = np . empty ( 10 ) l = np . linspace ( 5 , 10 , 6 ) r = np . array ([ 1 , 2 ]) # ndarray from python list r = np . array ([[ 1 , 2 ],[ 3 , 4 ]]) type ( r ) # Indexing l [ 0 ] l [ 0 : 2 ] l [ - 1 ] r [:, 0 ] # Operations on ndarrays r_sin = np . sin ( r ) np . max ( r ) np . min ( r ) np . sum ( r ) np . mean ( r ) np . std ( r ) l < 7 l [ l < 7 ] np . where ( l < 7 ) p = np . linspace ( 1 , 5 , 6 ) q = np . linspace ( 10 , 14 , 6 ) s = p + q s = p * q s = p * 10 s = p + 10 s = p @ q # dot product s = r . T If not installed: pip3 install numpy Matplotlib Visualization in python Syntax similar to Matlab import numpy as np from matplotlib import pyplot as plt X = np . linspace ( - np . pi , np . pi , 24 ) C , S = np . cos ( X ), np . sin ( X ) plt . plot ( X , C , label = 'y=cos(x)' , marker = '.' ) plt . plot ( X , S label = 'y=sin(x)' , marker = '.' ) plt . xlabel ( 'x' ) plt . ylabel ( 'y' ) plt . legend () plt . show () If not installed: pip3 install matplotlib Gyakorlat 1: dVRK ROS 2 install Kl\u00f3nozzuk a dVRK-t (da Vinci Reserach Kit) vcs seg\u00edts\u00e9g\u00e9vel egy \u00faj workspace-be, majd build-elj\u00fck: mkdir -p ~/dvrk2_ws/src cd ~/dvrk2_ws/src vcs import --input https://raw.githubusercontent.com/jhu-dvrk/dvrk_robot_ros2/main/dvrk.vcs --recursive cd ~/dvrk2_ws colcon build --cmake-args -DCMAKE_BUILD_TYPE = Release source ~/dvrk2_ws/install/setup.bash A .bashrc f\u00e1jl v\u00e9g\u00e9re illessz\u00fck be az al\u00e1bbi sort: source ~/dvrk2_ws/install/setup.bash Ind\u00edtsuk el a PSM1 (Patient Side Manipulator) RViz szimul\u00e1ci\u00f3j\u00e1t. A dVRK konzolon ne felejts\u00fcnk el HOME-olni. Tanulm\u00e1nyozzuk a szimul\u00e1tor m\u0171k\u00f6d\u00e9s\u00e9t a tanult parancsok ( ros2 topic list , ros2 topic echo ros2 run rqt_gui rqt_gui , stb.) haszn\u00e1lat\u00e1val. # dVRK main console ros2 run dvrk_robot dvrk_console_json -j ~/dvrk2_ws/install/sawIntuitiveResearchKitAll/share/sawIntuitiveResearchKit/share/console/console-PSM1_KIN_SIMULATED.json # ROS 2 joint and robot state publishers ros2 launch dvrk_model dvrk_state_publisher.launch.py arm: = PSM1 # RViz ros2 run rviz2 rviz2 -d ~/dvrk2_ws/install/dvrk_model/share/dvrk_model/rviz/PSM1.rviz # rqt_gui ros2 run rqt_gui rqt_gui 2: PSM subscriber implement\u00e1l\u00e1sa Hozzunk l\u00e9tre \u00faj python forr\u00e1sf\u00e1jlt psm_grasp.py n\u00e9vvel a ~/ros2_ws/src/ros2_course/ros2_course mapp\u00e1ban. Adjuk meg az \u00faj entry point-ot a setup.py -ban a megszokott m\u00f3don. Iratkozzunk fel a PSM TCP (Tool Center Point) poz\u00edci\u00f3j\u00e1t \u00e9s a csipesz pof\u00e1i \u00e1ltal bez\u00e1rt sz\u00f6g\u00e9t publik\u00e1l\u00f3 topic-okra. /PSM1/measured_cp /PSM1/jaw/measured_js Build-elj\u00fcnk \u00e9s futtassuk a node-ot: cd ~/ros2_ws colcon build --symlink-install ros2 run ros2_course psm_grasp 3. PSM TCP mozgat\u00e1sa line\u00e1ris trajekt\u00f3ria ment\u00e9n A PSM a lenti topicok-ban v\u00e1rja a k\u00edv\u00e1nt TCP poz\u00edci\u00f3t \u00e9s a csipesz pof\u00e1i \u00e1ltal bez\u00e1rt sz\u00f6get. Hozzunk l\u00e9tre publishereket a psm_grasp.py f\u00e1jlban ezekhez a topicokhoz. /PSM1/servo_cp /PSM1/jaw/servo_jp \u00cdrjunk f\u00fcggv\u00e9nyt, amely line\u00e1ris trajekt\u00f3ria ment\u00e9n a k\u00edv\u00e1nt poz\u00edci\u00f3ba mozgatja a TCP-t. K\u00fcldj\u00fck az csipeszt a (0.0, 0.05, -0.12) poz\u00edci\u00f3ba, az orient\u00e1ci\u00f3t hagyjuk v\u00e1ltozatlanul. 0.01s legyen a mintav\u00e9teli id\u0151. Matplotlib haszn\u00e1lat\u00e1val plotoljuk a tervezett trajekt\u00f3ria x, y \u00e9s z komponens\u00e9t id\u0151 f\u00fcggv\u00e9ny\u00e9ben. def move_tcp_to ( self , target , v , dt ): \u00cdrjunk f\u00fcggv\u00e9nyt, amellyel a csipeszt tudjuk nyitni-z\u00e1rni, szint\u00e9n line\u00e1ris trajekt\u00f3ria haszn\u00e1lat\u00e1val. def move_jaw_to ( self , target , omega , dt ): 4. Dummy marker l\u00e9trehoz\u00e1sa Hozzunk l\u00e9tre \u00faj python forr\u00e1sf\u00e1jlt dummy_marker.py n\u00e9vvel. Adjuk meg az entry point-ot a setup.py -ban a megszokott m\u00f3don. Implement\u00e1junk python programot, amely markert publik\u00e1l (-0.05, 0.08, -0.14) poz\u00edci\u00f3val dummy_target_marker nev\u0171 topic-ban. A frame_id addattag \u00e9rt\u00e9ke legyen PSM1_psm_base_link . M\u00e1soljuk az al\u00e1bbi k\u00f3dot a dummy_marker.py f\u00e1jlba: import rclpy from rclpy.node import Node from visualization_msgs.msg import Marker class DummyMarker ( Node ): def __init__ ( self , position ): super () . __init__ ( 'minimal_publisher' ) self . position = position self . publisher_ = self . create_publisher ( Marker , 'dummy_target_marker' , 10 ) timer_period = 0.1 # seconds self . timer = self . create_timer ( timer_period , self . timer_callback ) self . i = 0 i = 0 def timer_callback ( self ): marker = Marker () marker . header . frame_id = 'PSM1_psm_base_link' marker . header . stamp = self . get_clock () . now () . to_msg () marker . ns = \"dvrk_viz\" marker . id = self . i marker . type = Marker . SPHERE marker . action = Marker . MODIFY marker . pose . position . x = self . position [ 0 ] marker . pose . position . y = self . position [ 1 ] marker . pose . position . z = self . position [ 2 ] marker . pose . orientation . x = 0.0 marker . pose . orientation . y = 0.0 marker . pose . orientation . z = 0.0 marker . pose . orientation . w = 1.0 marker . scale . x = 0.008 marker . scale . y = 0.008 marker . scale . z = 0.008 marker . color . a = 1.0 # Don't forget to set the alpha! marker . color . r = 0.0 marker . color . g = 1.0 marker . color . b = 0.0 ; self . publisher_ . publish ( marker ) self . i += 1 def main ( args = None ): rclpy . init ( args = args ) marker_publisher = DummyMarker ([ - 0.05 , 0.08 , - 0.12 ]) rclpy . spin ( marker_publisher ) # Destroy the node explicitly # (optional - otherwise it will be done automatically # when the garbage collector destroys the node object) marker_publisher . destroy_node () rclpy . shutdown () if __name__ == '__main__' : main () Futtassuk a node-ot \u00e9s jelen\u00edts\u00fck meg a markert RViz-ben. 5. Marker megfog\u00e1sa Iratkozzunk fel a marker poz\u00edci\u00f3j\u00e1t k\u00fcld\u0151 topic-ra a psm_grasp.py -ban. M\u00f3dos\u00edtsuk a psm_grasp.py programot \u00fagy, hogy a csipesszel fogjuk meg a gener\u00e1lt markert. Note A haszn\u00e1lt szimul\u00e1tor hajlamos r\u00e1, hogy bizonyos \u00e9rt\u00e9kek \"beragadjanak\", ez\u00e9rt a program elej\u00e9n \u00e9rdemes az al\u00e1bbi sorok haszn\u00e1lat\u00e1val resetelni a kart: #Reset the arm psm . move_tcp_to ([ 0.0 , 0.0 , - 0.12 ], 0.01 , 0.01 ) psm . move_jaw_to ( 0.0 , 0.1 , 0.01 ) 6. TCP mozgat\u00e1sa k\u00f6r\u00edv ment\u00e9n Implement\u00e1ljunk met\u00f3dust, amely r sugr\u00fa k\u00f6r\u00edv ment\u00e9n mozgatja a megfog\u00f3t. Hasznos linkek Download and compile dVRK 2 Marker examples Numpy vector magnitude Numpy linspace","title":"4. Robotikai alapismeretek, Seb\u00e9szrobot programoz\u00e1sa"},{"location":"04_da_vinci/#04-robotikai-alapfogalmak-da-vinci-sebeszrobot-programozasa-szimulalt-kornyezetben","text":"","title":"04. Robotikai alapfogalmak, da Vinci seb\u00e9szrobot programoz\u00e1sa szimul\u00e1lt k\u00f6rnyezetben"},{"location":"04_da_vinci/#elmelet","text":"","title":"Elm\u00e9let"},{"location":"04_da_vinci/#merev-test-mozgasa","text":"Def. Merev test Merevnek tekinthet\u0151 az a test, mely pontjainak t\u00e1vols\u00e1ga mozg\u00e1s sor\u00e1n nem v\u00e1ltozik, vagyis b\u00e1rmely k\u00e9t pontj\u00e1nak t\u00e1vols\u00e1ga id\u0151ben \u00e1lland\u00f3. Merev test alakja, t\u00e9rfogata szint\u00e9n \u00e1lland\u00f3. Merev test t\u00e9rbeli helyzete megadhat\u00f3 b\u00e1rmely 3 nem egy egyenesbe es\u0151 pontj\u00e1nak helyzet\u00e9vel. A test helyzet\u00e9t szeml\u00e9letesebben megadhatjuk egy tetsz\u0151leges pontj\u00e1nak 3 koordin\u00e1t\u00e1j\u00e1val (poz\u00edci\u00f3) \u00e9s a test orient\u00e1ci\u00f3j\u00e1val. Merev testek mozg\u00e1sai k\u00e9t elemi mozg\u00e1sfajt\u00e1b\u00f3l tev\u0151dnek \u00f6ssze: halad\u00f3 mozg\u00e1s (transzl\u00e1ci\u00f3) \u00e9s tengely k\u00f6r\u00fcli forg\u00e1s (rot\u00e1ci\u00f3) Transzl\u00e1ci\u00f3s mozg\u00e1s sor\u00e1n a test minden pontja egym\u00e1ssal p\u00e1rhuzamos, egybev\u00e1g\u00f3 p\u00e1ly\u00e1t \u00edr le, a test orient\u00e1ci\u00f3ja pedig nem v\u00e1ltozik. Rot\u00e1ci\u00f3 sor\u00e1n a forg\u00e1stengelyen l\u00e9v\u0151 pontok poz\u00edci\u00f3ja nem v\u00e1ltozik, a test t\u00f6bbi pontja pedig a forg\u00e1stengelyre mer\u0151leges s\u00edkokban k\u00f6rp\u00e1ly\u00e1n mozog. A merev test szabad mozg\u00e1sa is le\u00edrhat\u00f3 mint egyidej\u0171leg egy bizonyos tengely k\u00f6r\u00fcli forg\u00e1s \u00e9s egy halad\u00f3 mozg\u00e1s .","title":"Merev test mozg\u00e1sa"},{"location":"04_da_vinci/#3d-transzformaciok","text":"Poz\u00edci\u00f3: 3 elem\u0171 offszet vektor Orient\u00e1ci\u00f3: 3 x 3 rot\u00e1ci\u00f3s matrix tov\u00e1bbi orient\u00e1ci\u00f3 reprezent\u00e1ci\u00f3k: Euler-sz\u00f6gek, RPY, angle axis, quaternion Helyzet (pose): 4 \u00d7 4 transzform\u00e1ci\u00f3s m\u00e1rtrix Koordin\u00e1ta rendszer (frame): null pont, 3 tengely, 3 b\u00e1zis vektor, jobbk\u00e9z-szab\u00e1ly Homog\u00e9n transzform\u00e1ci\u00f3k: rot\u00e1ci\u00f3 \u00e9s transzl\u00e1ci\u00f3 egy\u00fctt pl. \\(\\mathbf{R}\\) rot\u00e1ci\u00f3 \u00e9s \\(\\mathbf{v}\\) transzl\u00e1ci\u00f3 eset\u00e9n: \\[ \\mathbf{T} = \\left[\\matrix{\\mathbf{R} & \\mathbf{v}\\\\\\mathbf{0} & 1 }\\right] = \\left[\\matrix{r_{1,1} & r_{1,2} & r_{1,3} & v_x\\\\r_{2,1} & r_{2,2} & r_{2,3} & v_y\\\\r_{3,1} & r_{3,2} & r_{3,3} & v_z\\\\\\ 0 & 0 & 0 & 1 }\\right] \\] Homog\u00e9n koordin\u00e1t\u00e1k: Vektor: 0-val eg\u00e9sz\u00edtj\u00fck ki, \\(\\mathbf{a_H}=\\left[\\matrix{\\mathbf{a} \\\\ 0}\\right]=\\left[\\matrix{a_x \\\\ a_y \\\\ a_z \\\\ 0}\\right]\\) Pont: 1-gyel eg\u00e9sz\u00edtj\u00fck ki, \\(\\mathbf{p_H}=\\left[\\matrix{\\mathbf{p} \\\\ 1}\\right]=\\left[\\matrix{p_x \\\\ p_y \\\\ p_z \\\\ 1}\\right]\\) Transzform\u00e1ci\u00f3k alkalmaz\u00e1sa egyszer\u0171bb: \\[ \\mathbf{q} = \\mathbf{R}\\mathbf{p} + \\mathbf{v} \\to \\left[\\matrix{\\mathbf{q} \\\\ 1}\\right] = \\left[\\matrix{\\mathbf{R} & \\mathbf{v}\\\\\\mathbf{0} & 1 }\\right]\\left[\\matrix{\\mathbf{p} \\\\ 1}\\right] \\] Szabads\u00e1gi fok (DoF): egym\u00e1st\u00f3l f\u00fcggetlen mennyis\u00e9gek sz\u00e1ma.","title":"3D transzform\u00e1ci\u00f3k"},{"location":"04_da_vinci/#robotikai-alapok","text":"Robotok fel\u00e9p\u00edt\u00e9se: szegmensek (segment, link) \u00e9s csukl\u00f3k (joints) Munkat\u00e9r (task space, cartesian space): H\u00e1romdimenzi\u00f3s t\u00e9r, ahol a feladat, trajekt\u00f3ri\u00e1k, akad\u00e1lyok, stb. defini\u00e1l\u00e1sra ker\u00fclnek. TCP (Tool Center Point): az end effektorhoz r\u00f6gz\u00edtett koordin\u00e1ta rendszer (frame) Base/world frame Csukl\u00f3t\u00e9r (joint space): A robot csukl\u00f3ihoz rendelt mennyis\u00e9gek, melyeket a robot alacsony szint\u0171 ir\u00e1ny\u00edt\u00f3 rendszere \u00e9rtelmezni k\u00e9pes. csukl\u00f3 koordin\u00e1t\u00e1k, sebess\u00e9gek, gyorsul\u00e1sok, nyomat\u00e9kok...","title":"Robotikai alapok"},{"location":"04_da_vinci/#python-libraries","text":"","title":"Python libraries"},{"location":"04_da_vinci/#numpy","text":"Python library High dimension arrays and matrices Mathematical functions import numpy as np # Creating ndarrays a = np . zeros ( 3 ) a . shape a . shape = ( 3 , 1 ) a = np . ones ( 5 ) a = np . empty ( 10 ) l = np . linspace ( 5 , 10 , 6 ) r = np . array ([ 1 , 2 ]) # ndarray from python list r = np . array ([[ 1 , 2 ],[ 3 , 4 ]]) type ( r ) # Indexing l [ 0 ] l [ 0 : 2 ] l [ - 1 ] r [:, 0 ] # Operations on ndarrays r_sin = np . sin ( r ) np . max ( r ) np . min ( r ) np . sum ( r ) np . mean ( r ) np . std ( r ) l < 7 l [ l < 7 ] np . where ( l < 7 ) p = np . linspace ( 1 , 5 , 6 ) q = np . linspace ( 10 , 14 , 6 ) s = p + q s = p * q s = p * 10 s = p + 10 s = p @ q # dot product s = r . T If not installed: pip3 install numpy","title":"Numpy"},{"location":"04_da_vinci/#matplotlib","text":"Visualization in python Syntax similar to Matlab import numpy as np from matplotlib import pyplot as plt X = np . linspace ( - np . pi , np . pi , 24 ) C , S = np . cos ( X ), np . sin ( X ) plt . plot ( X , C , label = 'y=cos(x)' , marker = '.' ) plt . plot ( X , S label = 'y=sin(x)' , marker = '.' ) plt . xlabel ( 'x' ) plt . ylabel ( 'y' ) plt . legend () plt . show () If not installed: pip3 install matplotlib","title":"Matplotlib"},{"location":"04_da_vinci/#gyakorlat","text":"","title":"Gyakorlat"},{"location":"04_da_vinci/#1-dvrk-ros-2-install","text":"Kl\u00f3nozzuk a dVRK-t (da Vinci Reserach Kit) vcs seg\u00edts\u00e9g\u00e9vel egy \u00faj workspace-be, majd build-elj\u00fck: mkdir -p ~/dvrk2_ws/src cd ~/dvrk2_ws/src vcs import --input https://raw.githubusercontent.com/jhu-dvrk/dvrk_robot_ros2/main/dvrk.vcs --recursive cd ~/dvrk2_ws colcon build --cmake-args -DCMAKE_BUILD_TYPE = Release source ~/dvrk2_ws/install/setup.bash A .bashrc f\u00e1jl v\u00e9g\u00e9re illessz\u00fck be az al\u00e1bbi sort: source ~/dvrk2_ws/install/setup.bash Ind\u00edtsuk el a PSM1 (Patient Side Manipulator) RViz szimul\u00e1ci\u00f3j\u00e1t. A dVRK konzolon ne felejts\u00fcnk el HOME-olni. Tanulm\u00e1nyozzuk a szimul\u00e1tor m\u0171k\u00f6d\u00e9s\u00e9t a tanult parancsok ( ros2 topic list , ros2 topic echo ros2 run rqt_gui rqt_gui , stb.) haszn\u00e1lat\u00e1val. # dVRK main console ros2 run dvrk_robot dvrk_console_json -j ~/dvrk2_ws/install/sawIntuitiveResearchKitAll/share/sawIntuitiveResearchKit/share/console/console-PSM1_KIN_SIMULATED.json # ROS 2 joint and robot state publishers ros2 launch dvrk_model dvrk_state_publisher.launch.py arm: = PSM1 # RViz ros2 run rviz2 rviz2 -d ~/dvrk2_ws/install/dvrk_model/share/dvrk_model/rviz/PSM1.rviz # rqt_gui ros2 run rqt_gui rqt_gui","title":"1: dVRK ROS 2 install"},{"location":"04_da_vinci/#2-psm-subscriber-implementalasa","text":"Hozzunk l\u00e9tre \u00faj python forr\u00e1sf\u00e1jlt psm_grasp.py n\u00e9vvel a ~/ros2_ws/src/ros2_course/ros2_course mapp\u00e1ban. Adjuk meg az \u00faj entry point-ot a setup.py -ban a megszokott m\u00f3don. Iratkozzunk fel a PSM TCP (Tool Center Point) poz\u00edci\u00f3j\u00e1t \u00e9s a csipesz pof\u00e1i \u00e1ltal bez\u00e1rt sz\u00f6g\u00e9t publik\u00e1l\u00f3 topic-okra. /PSM1/measured_cp /PSM1/jaw/measured_js Build-elj\u00fcnk \u00e9s futtassuk a node-ot: cd ~/ros2_ws colcon build --symlink-install ros2 run ros2_course psm_grasp","title":"2: PSM subscriber implement\u00e1l\u00e1sa"},{"location":"04_da_vinci/#3-psm-tcp-mozgatasa-linearis-trajektoria-menten","text":"A PSM a lenti topicok-ban v\u00e1rja a k\u00edv\u00e1nt TCP poz\u00edci\u00f3t \u00e9s a csipesz pof\u00e1i \u00e1ltal bez\u00e1rt sz\u00f6get. Hozzunk l\u00e9tre publishereket a psm_grasp.py f\u00e1jlban ezekhez a topicokhoz. /PSM1/servo_cp /PSM1/jaw/servo_jp \u00cdrjunk f\u00fcggv\u00e9nyt, amely line\u00e1ris trajekt\u00f3ria ment\u00e9n a k\u00edv\u00e1nt poz\u00edci\u00f3ba mozgatja a TCP-t. K\u00fcldj\u00fck az csipeszt a (0.0, 0.05, -0.12) poz\u00edci\u00f3ba, az orient\u00e1ci\u00f3t hagyjuk v\u00e1ltozatlanul. 0.01s legyen a mintav\u00e9teli id\u0151. Matplotlib haszn\u00e1lat\u00e1val plotoljuk a tervezett trajekt\u00f3ria x, y \u00e9s z komponens\u00e9t id\u0151 f\u00fcggv\u00e9ny\u00e9ben. def move_tcp_to ( self , target , v , dt ): \u00cdrjunk f\u00fcggv\u00e9nyt, amellyel a csipeszt tudjuk nyitni-z\u00e1rni, szint\u00e9n line\u00e1ris trajekt\u00f3ria haszn\u00e1lat\u00e1val. def move_jaw_to ( self , target , omega , dt ):","title":"3. PSM TCP mozgat\u00e1sa line\u00e1ris trajekt\u00f3ria ment\u00e9n"},{"location":"04_da_vinci/#4-dummy-marker-letrehozasa","text":"Hozzunk l\u00e9tre \u00faj python forr\u00e1sf\u00e1jlt dummy_marker.py n\u00e9vvel. Adjuk meg az entry point-ot a setup.py -ban a megszokott m\u00f3don. Implement\u00e1junk python programot, amely markert publik\u00e1l (-0.05, 0.08, -0.14) poz\u00edci\u00f3val dummy_target_marker nev\u0171 topic-ban. A frame_id addattag \u00e9rt\u00e9ke legyen PSM1_psm_base_link . M\u00e1soljuk az al\u00e1bbi k\u00f3dot a dummy_marker.py f\u00e1jlba: import rclpy from rclpy.node import Node from visualization_msgs.msg import Marker class DummyMarker ( Node ): def __init__ ( self , position ): super () . __init__ ( 'minimal_publisher' ) self . position = position self . publisher_ = self . create_publisher ( Marker , 'dummy_target_marker' , 10 ) timer_period = 0.1 # seconds self . timer = self . create_timer ( timer_period , self . timer_callback ) self . i = 0 i = 0 def timer_callback ( self ): marker = Marker () marker . header . frame_id = 'PSM1_psm_base_link' marker . header . stamp = self . get_clock () . now () . to_msg () marker . ns = \"dvrk_viz\" marker . id = self . i marker . type = Marker . SPHERE marker . action = Marker . MODIFY marker . pose . position . x = self . position [ 0 ] marker . pose . position . y = self . position [ 1 ] marker . pose . position . z = self . position [ 2 ] marker . pose . orientation . x = 0.0 marker . pose . orientation . y = 0.0 marker . pose . orientation . z = 0.0 marker . pose . orientation . w = 1.0 marker . scale . x = 0.008 marker . scale . y = 0.008 marker . scale . z = 0.008 marker . color . a = 1.0 # Don't forget to set the alpha! marker . color . r = 0.0 marker . color . g = 1.0 marker . color . b = 0.0 ; self . publisher_ . publish ( marker ) self . i += 1 def main ( args = None ): rclpy . init ( args = args ) marker_publisher = DummyMarker ([ - 0.05 , 0.08 , - 0.12 ]) rclpy . spin ( marker_publisher ) # Destroy the node explicitly # (optional - otherwise it will be done automatically # when the garbage collector destroys the node object) marker_publisher . destroy_node () rclpy . shutdown () if __name__ == '__main__' : main () Futtassuk a node-ot \u00e9s jelen\u00edts\u00fck meg a markert RViz-ben.","title":"4. Dummy marker l\u00e9trehoz\u00e1sa"},{"location":"04_da_vinci/#5-marker-megfogasa","text":"Iratkozzunk fel a marker poz\u00edci\u00f3j\u00e1t k\u00fcld\u0151 topic-ra a psm_grasp.py -ban. M\u00f3dos\u00edtsuk a psm_grasp.py programot \u00fagy, hogy a csipesszel fogjuk meg a gener\u00e1lt markert. Note A haszn\u00e1lt szimul\u00e1tor hajlamos r\u00e1, hogy bizonyos \u00e9rt\u00e9kek \"beragadjanak\", ez\u00e9rt a program elej\u00e9n \u00e9rdemes az al\u00e1bbi sorok haszn\u00e1lat\u00e1val resetelni a kart: #Reset the arm psm . move_tcp_to ([ 0.0 , 0.0 , - 0.12 ], 0.01 , 0.01 ) psm . move_jaw_to ( 0.0 , 0.1 , 0.01 )","title":"5. Marker megfog\u00e1sa"},{"location":"04_da_vinci/#6-tcp-mozgatasa-koriv-menten","text":"Implement\u00e1ljunk met\u00f3dust, amely r sugr\u00fa k\u00f6r\u00edv ment\u00e9n mozgatja a megfog\u00f3t.","title":"6. TCP mozgat\u00e1sa k\u00f6r\u00edv ment\u00e9n"},{"location":"04_da_vinci/#hasznos-linkek","text":"Download and compile dVRK 2 Marker examples Numpy vector magnitude Numpy linspace","title":"Hasznos linkek"},{"location":"05_git/","text":"05. Verzi\u00f3k\u00f6vet\u00e9s, Git Elm\u00e9let Warning ZH1 (ROS alapok, publisher, subscriber. Python alapok. Robotikai alapfogalmak.) okt\u00f3ber 17. Version control, Git Track changes in a set of files Coordinating work among developers Who made what changes and when Revert back at any time Local and remote repos Take snapshots of files by making a commit Install sudo apt install git Basic commands git init # Initialize local git repo git add <file> # Add file/files to staging area git status # Check status of working tree and staging area git commit -m \"What I've done\" # Commit changes in index git push # Push to remote repository git pull # Pull latest changes from remote repo git branch <new_branch_name> git checkout <branch_name> git merge <branch_name> # Merge the branch into the current branch git config --global user.name \"Istvan Szabo\" git config --global user.email \"istvan.szabo@gmail.com\" GitHub git remote git clone <link> # Copy repo into a new directory # Add remote to repository: git remote add origin <link> git push -u origin master Some alternatives to GitHub GitLab, BitBucket, Launchpad, Phabricator Markdown Markup language, easy to read Text file \u2192 Formatted document Widespread usag, e.g., blogs, forums, documentations, readme files, GitHub Markdown Cheatsheet Gyakorlat 0: GitHub repo l\u00e9trehoz\u00e1sa Regisztr\u00e1ljunk GitHub-ra, k\u00e9sz\u00edts\u00fcnk egy tokent. Hozzunk l\u00e9tre egy private repo-t GitHub-on a ros2_course package sz\u00e1m\u00e1ra. Tip Personal token megjegyz\u00e9se: git config --global credential.helper store Hozzuk l\u00e9tre a local repo-t, \u00e1ll\u00edtsuk be a remote-ot, majd push-oljuk a package tartalm\u00e1t GitHUb-ra (a GitHub is seg\u00edt a repo l\u00e9trehoz\u00e1sa ut\u00e1n): cd ~/ros2_ws/src/ros2_course git init git add . git commit -m \"Initial commit\" git branch -M main git remote add origin <REPO_GITHUB_ADDRESS>.git git push -u origin main Adjunk hozz\u00e1 egy README.md-t a ros2_course csomaghoz az al\u00e1bbi tartalommal: # ros2_course ## About Something about the package. ## Usage How to *build* and use the package. cd ~/ros2_ws colcon build --symlink-install Commit-oljunk \u00e9s push-oljuk a v\u00e1ltoztat\u00e1sokat: git add . git commit -m \"Add README\" git push VCS Clion-ban A GitHub haszn\u00e1lata CLion-ban is be\u00e1ll\u00edthat\u00f3, \u00edgy grafikus fel\u00fcleten kezelhetj\u00fck a verzi\u00f3kat. Tip Windows \u00e9s Linux \u00f3ra probl\u00e9ma megold\u00e1sa: timedatectl set-local-rtc 1 --adjust-system-clock Hasznos linkek Markdown Cheatsheet","title":"5. Verzi\u00f3k\u00f6vet\u00e9s, Git"},{"location":"05_git/#05-verziokovetes-git","text":"","title":"05. Verzi\u00f3k\u00f6vet\u00e9s, Git"},{"location":"05_git/#elmelet","text":"Warning ZH1 (ROS alapok, publisher, subscriber. Python alapok. Robotikai alapfogalmak.) okt\u00f3ber 17.","title":"Elm\u00e9let"},{"location":"05_git/#version-control-git","text":"Track changes in a set of files Coordinating work among developers Who made what changes and when Revert back at any time Local and remote repos Take snapshots of files by making a commit","title":"Version control, Git"},{"location":"05_git/#install","text":"sudo apt install git","title":"Install"},{"location":"05_git/#basic-commands","text":"git init # Initialize local git repo git add <file> # Add file/files to staging area git status # Check status of working tree and staging area git commit -m \"What I've done\" # Commit changes in index git push # Push to remote repository git pull # Pull latest changes from remote repo git branch <new_branch_name> git checkout <branch_name> git merge <branch_name> # Merge the branch into the current branch git config --global user.name \"Istvan Szabo\" git config --global user.email \"istvan.szabo@gmail.com\"","title":"Basic commands"},{"location":"05_git/#github","text":"git remote git clone <link> # Copy repo into a new directory # Add remote to repository: git remote add origin <link> git push -u origin master Some alternatives to GitHub GitLab, BitBucket, Launchpad, Phabricator","title":"GitHub"},{"location":"05_git/#markdown","text":"Markup language, easy to read Text file \u2192 Formatted document Widespread usag, e.g., blogs, forums, documentations, readme files, GitHub Markdown Cheatsheet","title":"Markdown"},{"location":"05_git/#gyakorlat","text":"","title":"Gyakorlat"},{"location":"05_git/#0-github-repo-letrehozasa","text":"Regisztr\u00e1ljunk GitHub-ra, k\u00e9sz\u00edts\u00fcnk egy tokent. Hozzunk l\u00e9tre egy private repo-t GitHub-on a ros2_course package sz\u00e1m\u00e1ra. Tip Personal token megjegyz\u00e9se: git config --global credential.helper store Hozzuk l\u00e9tre a local repo-t, \u00e1ll\u00edtsuk be a remote-ot, majd push-oljuk a package tartalm\u00e1t GitHUb-ra (a GitHub is seg\u00edt a repo l\u00e9trehoz\u00e1sa ut\u00e1n): cd ~/ros2_ws/src/ros2_course git init git add . git commit -m \"Initial commit\" git branch -M main git remote add origin <REPO_GITHUB_ADDRESS>.git git push -u origin main Adjunk hozz\u00e1 egy README.md-t a ros2_course csomaghoz az al\u00e1bbi tartalommal: # ros2_course ## About Something about the package. ## Usage How to *build* and use the package. cd ~/ros2_ws colcon build --symlink-install Commit-oljunk \u00e9s push-oljuk a v\u00e1ltoztat\u00e1sokat: git add . git commit -m \"Add README\" git push VCS Clion-ban A GitHub haszn\u00e1lata CLion-ban is be\u00e1ll\u00edthat\u00f3, \u00edgy grafikus fel\u00fcleten kezelhetj\u00fck a verzi\u00f3kat. Tip Windows \u00e9s Linux \u00f3ra probl\u00e9ma megold\u00e1sa: timedatectl set-local-rtc 1 --adjust-system-clock","title":"0: GitHub repo l\u00e9trehoz\u00e1sa"},{"location":"05_git/#hasznos-linkek","text":"Markdown Cheatsheet","title":"Hasznos linkek"},{"location":"06_roslaunch/","text":"04. ROS 2 Launch, Param, Bag Elm\u00e9let ROS 2 Launch Launch multiple nodes Set arguments Monitor running nodes React on changes in the state of nodes Python, XML and YAML file formats Usage ros2 launch package_name file.launch ros2 launch irob_robot dvrk_server.launch arm_typ: = PSM1 ROS 2 Parameters Configure nodes at startup or during runtime without changing the code Associated with individual nodes Consists of: key, value, descriptor Available data types: bool, int64, float64, string, byte[], bool[], int64[], float64[] or string[]. Useful command: ros2 param ROS 2 Bag Record and playback ROS topics Command line tool API for C++ and Python ros2 bag record -o <file_name> <topic_name> ros2 bag record --all ros2 bag info <filename.bag> ros2 bag play <filename.bag> Gyakorlat 1: Launch Turtlesim Mimic Hozzuk l\u00e9tre a launch mapp\u00e1t a ros2_course package-en bel\u00fcl, ahol a launch f\u00e1jlokat t\u00e1rolhatjuk majd: cd ~/ros2_ws/src/ros2_course mkdir launch Az \u00faj launch mapp\u00e1ban hozzuk l\u00e9tre a turtlesim_mimic_launch.py f\u00e1jlt a k\u00f6vetkez\u0151 taralommal: from launch import LaunchDescription from launch_ros.actions import Node def generate_launch_description (): return LaunchDescription ([ Node ( package = 'turtlesim' , namespace = 'turtlesim1' , executable = 'turtlesim_node' , name = 'sim' ), Node ( package = 'turtlesim' , namespace = 'turtlesim2' , executable = 'turtlesim_node' , name = 'sim' ), Node ( package = 'turtlesim' , executable = 'mimic' , name = 'mimic' , remappings = [ ( '/input/pose' , '/turtlesim1/turtle1/pose' ), ( '/output/cmd_vel' , '/turtlesim2/turtle1/cmd_vel' ), ] ) ]) Eg\u00e9sz\u00edts\u00fck ki a setup.py f\u00e1jlt az al\u00e1bbiakkal: import os from glob import glob # ... data_files =[ ( 'share/ament_index/resource_index/packages' , [ 'resource/' + package_name ]) , ( 'share/' + package_name, [ 'package.xml' ]) , # Include all launch files. ( os.path.join ( 'share' , package_name ) , glob ( 'launch/*launch.[pxy][yma]*' )) ] , Adjuk hozz\u00e1 a ros2launch dependency-t a package.xml f\u00e1jlhoz: <exec_depend>ros2launch</exec_depend> Build-elj\u00fck a workspace-t: cd ros2_ws colcon build --symlink-install Ind\u00edtsuk el a launch f\u00e1jlt: ros2 launch ros2_course turtlesim_mimic_launch.py Publik\u00e1ljunk a topic-ba a parancssorb\u00f3l, \u00faj temin\u00e1l ablakban: ros2 topic pub -r 1 /turtlesim1/turtle1/cmd_vel geometry_msgs/msg/Twist \"{linear: {x: 2.0, y: 0.0, z: 0.0}, angular: {x: 0.0, y: 0.0, z: -1.8}}\" Vizsg\u00e1ljuk a rendszer m\u0171k\u00f6d\u00e9s\u00e9t rqt_gui seg\u00edts\u00e9g\u00e9vel: ros2 run rqt_gui rqt_gui 2: Launch Turtlesim Goto K\u00e9sz\u00edts\u00fcnk m\u00e1solatot a turtlesim_mimic_launch.py f\u00e1jlr\u00f3l turtlesim_controller_launch.py n\u00e9vvel. Adjuk hozz\u00e1 az el\u0151z\u0151 \u00f3r\u00e1n meg\u00edrt turtlesim_controller node-ot a launch f\u00e1jlhoz. Az \u00edr\u00e1ny\u00edtand\u00f3 tekn\u0151st a namespace vagy a remappings seg\u00edts\u00e9g\u00e9vel tudjuk be\u00e1ll\u00edtani. Build-elj\u00fck a workspace-t: cd ros2_ws colcon build --symlink-install Ind\u00edtsuk el az \u00faj launch f\u00e1jlt: ros2 launch ros2_course turtlesim_controller_launch.py 3: Turtlesim controller params M\u00f3dos\u00edtsuk a turtlesim_controller -t \u00fagy, hogy a line\u00e1ris sebess\u00e9g \u00e9s a sz\u00f6gsebess\u00e9g ROS param\u00e9tereken kereszt\u00fcl legyen \u00e1ll\u00edthat\u00f3. API p\u00e9lda a param\u00e9terekhez: import rclpy import rclpy.node class MinimalParam ( rclpy . node . Node ): def __init__ ( self ): super () . __init__ ( 'minimal_param_node' ) # Declare parameter named 'my_parameter' and # set default value to 'world' self . declare_parameter ( 'my_parameter' , 'world' ) self . timer = self . create_timer ( 1 , self . timer_callback ) def timer_callback ( self ): my_param = self . get_parameter ( 'my_parameter' ) . get_parameter_value () . string_value self . get_logger () . info ( 'Hello %s !' % my_param ) def main (): rclpy . init () node = MinimalParam () rclpy . spin ( node ) if __name__ == '__main__' : main () Futtassuk a turtlesim_controller.py -t a kor\u00e1bban meg\u00edrt launch file seg\u00edts\u00e9g\u00e9vel. List\u00e1zzuk ki a param\u00e9tereket. ros2 launch ros2_course turtlesim_controller_launch.py ros2 param list M\u00f3dos\u00edtsuk a sebess\u00e9g \u00e9s sz\u00f6gsebess\u00e9g param\u00e9tereket parancssorb\u00f3l az al\u00e1bbi parancs seg\u00edts\u00e9g\u00e9vel: ros2 param set <NODE_NAME> <PARAM_NAME> <NEW_VALUE> ros2 param set controller speed 100 .0 4: Turtlesim controller launch and substitutions K\u00e9sz\u00edts\u00fcnk m\u00e1solatot a turtlesim_controller_launch.py -r\u00f3l turtlesim_controller_param_launch.py n\u00e9ven. M\u00f3dos\u00edtsuk az \u00faj launch f\u00e1jlt az al\u00e1bbi p\u00e9lda alapj\u00e1n \u00fagy, hogy a sebss\u00e9g \u00e9s a sz\u00f6gsebess\u00e9g param\u00e9terek a launch f\u00e1jl argumentumaik\u00e9nt legyenek megadhat\u00f3ak. from launch_ros.actions import Node from launch import LaunchDescription from launch.actions import DeclareLaunchArgument , ExecuteProcess , TimerAction from launch.conditions import IfCondition from launch.substitutions import LaunchConfiguration , PythonExpression def generate_launch_description (): turtlesim_ns_launch_arg = DeclareLaunchArgument ( 'turtlesim_ns' , default_value = 'turtlesim1' , description = 'Namespace for turtle 1' ) use_provided_red_launch_arg = DeclareLaunchArgument ( 'use_provided_red' , default_value = 'False' ) new_background_r_launch_arg = DeclareLaunchArgument ( 'new_background_r' , default_value = '200' ) background_g_launch_arg = DeclareLaunchArgument ( 'background_g' , default_value = '100' ) background_b_launch_arg = DeclareLaunchArgument ( 'background_b' , default_value = '100' ) turtlesim_ns_value = LaunchConfiguration ( 'turtlesim_ns' ) use_provided_red_value = LaunchConfiguration ( 'use_provided_red' ) new_background_r_value = LaunchConfiguration ( 'new_background_r' ) background_g_value = LaunchConfiguration ( 'background_g' ) background_b_value = LaunchConfiguration ( 'background_b' ) turtlesim_node = Node ( package = 'turtlesim' , namespace = turtlesim_ns_value , executable = 'turtlesim_node' , name = 'sim' , parameters = [{ 'background_g' : background_g_value , 'background_b' : background_b_value , }] ) spawn_turtle = ExecuteProcess ( cmd = [[ 'ros2 service call ' , turtlesim_ns , '/spawn ' , 'turtlesim/srv/Spawn ' , '\"{x: 2, y: 2, theta: 0.2}\"' ]], shell = True ) change_background_r = ExecuteProcess ( cmd = [[ 'ros2 param set ' , turtlesim_ns , '/sim background_r ' , '120' ]], shell = True ) change_background_r_conditioned = ExecuteProcess ( condition = IfCondition ( PythonExpression ([ new_background_r_value , ' == 200' , ' and ' , use_provided_red ]) ), cmd = [[ 'ros2 param set ' , turtlesim_ns_value , '/sim background_r ' , new_background_r ]], shell = True ) return LaunchDescription ([ turtlesim_ns_launch_arg , use_provided_red_launch_arg , new_background_r_launch_arg , turtlesim_node , spawn_turtle , change_background_r , TimerAction ( period = 2.0 , actions = [ change_background_r_conditioned ], ) ]) Build-elj\u00fck a workspace-t \u00e9s futtassuk a turtlesim_controller_param_launch.py -t: cd ros2_ws colcon build --symlink-install ros2 launch ros2_course turtlesim_controller_param_launch.py List\u00e1zzuk ki az \u00faj launch f\u00e1jl argumentumait: ros2 launch ros2_course turtlesim_controller_param_launch.py --show-args Futtassuk a launch f\u00e1jlt az argumentumok be\u00e1ll\u00edt\u00e1s\u00e1val: ros2 launch ros2_course turtlesim_controller_param_launch.py speed: = 100 .0 omega: = 60 .0 A fenti p\u00e9lda seg\u00edts\u00e9g\u00e9vel \u00e1ll\u00edtsuk a h\u00e1tt\u00e9r sz\u00edn\u00e9t szint\u00e9n parancssori argumentum(ok) felhaszn\u00e1l\u00e1s\u00e1val. 5: Rosbag Az el\u0151z\u0151 feladatban implement\u00e1lt program fut\u00e1sa k\u00f6zben r\u00f6gz\u00edts\u00fck a topic-ok tartalm\u00e1t egy rosbag f\u00e1jlba. ros2 bag record --all Syntax The filename and the topics to record can also be set, e.g.: ros2 bag record -o turtle_bagfile_1 /turtle1/cmd_vel /turtle1/pose Haszn\u00e1ljuk az al\u00e1bbi parancsot a bag f\u00e1jl tulajdons\u00e1gainak lek\u00e9rdez\u00e9s\u00e9re: ros2 bag info <PATH_TO_BAGFILE> J\u00e1tsszuk vissza a bag f\u00e1jlt \u00e9s jelen\u00edts\u00fck meg az egyik tekn\u0151c pose/x \u00e9rt\u00e9k\u00e9t grafikonon rqt_gui seg\u00edts\u00e9g\u00e9vel. ros2 bag info <PATH_TO_BAGFILE> ros2 run rqt_gui rqt_gui Hasznos linkek ROS 2 Launch Tutorial ROS 2 Parameters Using ROS 2 parameters in a Class ROS 2 Bag","title":"6. ROS 2 Launch, Param, Bag"},{"location":"06_roslaunch/#04-ros-2-launch-param-bag","text":"","title":"04. ROS 2 Launch, Param, Bag"},{"location":"06_roslaunch/#elmelet","text":"","title":"Elm\u00e9let"},{"location":"06_roslaunch/#ros-2-launch","text":"Launch multiple nodes Set arguments Monitor running nodes React on changes in the state of nodes Python, XML and YAML file formats","title":"ROS 2 Launch"},{"location":"06_roslaunch/#usage","text":"ros2 launch package_name file.launch ros2 launch irob_robot dvrk_server.launch arm_typ: = PSM1","title":"Usage"},{"location":"06_roslaunch/#ros-2-parameters","text":"Configure nodes at startup or during runtime without changing the code Associated with individual nodes Consists of: key, value, descriptor Available data types: bool, int64, float64, string, byte[], bool[], int64[], float64[] or string[]. Useful command: ros2 param","title":"ROS 2 Parameters"},{"location":"06_roslaunch/#ros-2-bag","text":"Record and playback ROS topics Command line tool API for C++ and Python ros2 bag record -o <file_name> <topic_name> ros2 bag record --all ros2 bag info <filename.bag> ros2 bag play <filename.bag>","title":"ROS 2 Bag"},{"location":"06_roslaunch/#gyakorlat","text":"","title":"Gyakorlat"},{"location":"06_roslaunch/#1-launch-turtlesim-mimic","text":"Hozzuk l\u00e9tre a launch mapp\u00e1t a ros2_course package-en bel\u00fcl, ahol a launch f\u00e1jlokat t\u00e1rolhatjuk majd: cd ~/ros2_ws/src/ros2_course mkdir launch Az \u00faj launch mapp\u00e1ban hozzuk l\u00e9tre a turtlesim_mimic_launch.py f\u00e1jlt a k\u00f6vetkez\u0151 taralommal: from launch import LaunchDescription from launch_ros.actions import Node def generate_launch_description (): return LaunchDescription ([ Node ( package = 'turtlesim' , namespace = 'turtlesim1' , executable = 'turtlesim_node' , name = 'sim' ), Node ( package = 'turtlesim' , namespace = 'turtlesim2' , executable = 'turtlesim_node' , name = 'sim' ), Node ( package = 'turtlesim' , executable = 'mimic' , name = 'mimic' , remappings = [ ( '/input/pose' , '/turtlesim1/turtle1/pose' ), ( '/output/cmd_vel' , '/turtlesim2/turtle1/cmd_vel' ), ] ) ]) Eg\u00e9sz\u00edts\u00fck ki a setup.py f\u00e1jlt az al\u00e1bbiakkal: import os from glob import glob # ... data_files =[ ( 'share/ament_index/resource_index/packages' , [ 'resource/' + package_name ]) , ( 'share/' + package_name, [ 'package.xml' ]) , # Include all launch files. ( os.path.join ( 'share' , package_name ) , glob ( 'launch/*launch.[pxy][yma]*' )) ] , Adjuk hozz\u00e1 a ros2launch dependency-t a package.xml f\u00e1jlhoz: <exec_depend>ros2launch</exec_depend> Build-elj\u00fck a workspace-t: cd ros2_ws colcon build --symlink-install Ind\u00edtsuk el a launch f\u00e1jlt: ros2 launch ros2_course turtlesim_mimic_launch.py Publik\u00e1ljunk a topic-ba a parancssorb\u00f3l, \u00faj temin\u00e1l ablakban: ros2 topic pub -r 1 /turtlesim1/turtle1/cmd_vel geometry_msgs/msg/Twist \"{linear: {x: 2.0, y: 0.0, z: 0.0}, angular: {x: 0.0, y: 0.0, z: -1.8}}\" Vizsg\u00e1ljuk a rendszer m\u0171k\u00f6d\u00e9s\u00e9t rqt_gui seg\u00edts\u00e9g\u00e9vel: ros2 run rqt_gui rqt_gui","title":"1: Launch Turtlesim Mimic"},{"location":"06_roslaunch/#2-launch-turtlesim-goto","text":"K\u00e9sz\u00edts\u00fcnk m\u00e1solatot a turtlesim_mimic_launch.py f\u00e1jlr\u00f3l turtlesim_controller_launch.py n\u00e9vvel. Adjuk hozz\u00e1 az el\u0151z\u0151 \u00f3r\u00e1n meg\u00edrt turtlesim_controller node-ot a launch f\u00e1jlhoz. Az \u00edr\u00e1ny\u00edtand\u00f3 tekn\u0151st a namespace vagy a remappings seg\u00edts\u00e9g\u00e9vel tudjuk be\u00e1ll\u00edtani. Build-elj\u00fck a workspace-t: cd ros2_ws colcon build --symlink-install Ind\u00edtsuk el az \u00faj launch f\u00e1jlt: ros2 launch ros2_course turtlesim_controller_launch.py","title":"2: Launch Turtlesim Goto"},{"location":"06_roslaunch/#3-turtlesim-controller-params","text":"M\u00f3dos\u00edtsuk a turtlesim_controller -t \u00fagy, hogy a line\u00e1ris sebess\u00e9g \u00e9s a sz\u00f6gsebess\u00e9g ROS param\u00e9tereken kereszt\u00fcl legyen \u00e1ll\u00edthat\u00f3. API p\u00e9lda a param\u00e9terekhez: import rclpy import rclpy.node class MinimalParam ( rclpy . node . Node ): def __init__ ( self ): super () . __init__ ( 'minimal_param_node' ) # Declare parameter named 'my_parameter' and # set default value to 'world' self . declare_parameter ( 'my_parameter' , 'world' ) self . timer = self . create_timer ( 1 , self . timer_callback ) def timer_callback ( self ): my_param = self . get_parameter ( 'my_parameter' ) . get_parameter_value () . string_value self . get_logger () . info ( 'Hello %s !' % my_param ) def main (): rclpy . init () node = MinimalParam () rclpy . spin ( node ) if __name__ == '__main__' : main () Futtassuk a turtlesim_controller.py -t a kor\u00e1bban meg\u00edrt launch file seg\u00edts\u00e9g\u00e9vel. List\u00e1zzuk ki a param\u00e9tereket. ros2 launch ros2_course turtlesim_controller_launch.py ros2 param list M\u00f3dos\u00edtsuk a sebess\u00e9g \u00e9s sz\u00f6gsebess\u00e9g param\u00e9tereket parancssorb\u00f3l az al\u00e1bbi parancs seg\u00edts\u00e9g\u00e9vel: ros2 param set <NODE_NAME> <PARAM_NAME> <NEW_VALUE> ros2 param set controller speed 100 .0","title":"3: Turtlesim controller params"},{"location":"06_roslaunch/#4-turtlesim-controller-launch-and-substitutions","text":"K\u00e9sz\u00edts\u00fcnk m\u00e1solatot a turtlesim_controller_launch.py -r\u00f3l turtlesim_controller_param_launch.py n\u00e9ven. M\u00f3dos\u00edtsuk az \u00faj launch f\u00e1jlt az al\u00e1bbi p\u00e9lda alapj\u00e1n \u00fagy, hogy a sebss\u00e9g \u00e9s a sz\u00f6gsebess\u00e9g param\u00e9terek a launch f\u00e1jl argumentumaik\u00e9nt legyenek megadhat\u00f3ak. from launch_ros.actions import Node from launch import LaunchDescription from launch.actions import DeclareLaunchArgument , ExecuteProcess , TimerAction from launch.conditions import IfCondition from launch.substitutions import LaunchConfiguration , PythonExpression def generate_launch_description (): turtlesim_ns_launch_arg = DeclareLaunchArgument ( 'turtlesim_ns' , default_value = 'turtlesim1' , description = 'Namespace for turtle 1' ) use_provided_red_launch_arg = DeclareLaunchArgument ( 'use_provided_red' , default_value = 'False' ) new_background_r_launch_arg = DeclareLaunchArgument ( 'new_background_r' , default_value = '200' ) background_g_launch_arg = DeclareLaunchArgument ( 'background_g' , default_value = '100' ) background_b_launch_arg = DeclareLaunchArgument ( 'background_b' , default_value = '100' ) turtlesim_ns_value = LaunchConfiguration ( 'turtlesim_ns' ) use_provided_red_value = LaunchConfiguration ( 'use_provided_red' ) new_background_r_value = LaunchConfiguration ( 'new_background_r' ) background_g_value = LaunchConfiguration ( 'background_g' ) background_b_value = LaunchConfiguration ( 'background_b' ) turtlesim_node = Node ( package = 'turtlesim' , namespace = turtlesim_ns_value , executable = 'turtlesim_node' , name = 'sim' , parameters = [{ 'background_g' : background_g_value , 'background_b' : background_b_value , }] ) spawn_turtle = ExecuteProcess ( cmd = [[ 'ros2 service call ' , turtlesim_ns , '/spawn ' , 'turtlesim/srv/Spawn ' , '\"{x: 2, y: 2, theta: 0.2}\"' ]], shell = True ) change_background_r = ExecuteProcess ( cmd = [[ 'ros2 param set ' , turtlesim_ns , '/sim background_r ' , '120' ]], shell = True ) change_background_r_conditioned = ExecuteProcess ( condition = IfCondition ( PythonExpression ([ new_background_r_value , ' == 200' , ' and ' , use_provided_red ]) ), cmd = [[ 'ros2 param set ' , turtlesim_ns_value , '/sim background_r ' , new_background_r ]], shell = True ) return LaunchDescription ([ turtlesim_ns_launch_arg , use_provided_red_launch_arg , new_background_r_launch_arg , turtlesim_node , spawn_turtle , change_background_r , TimerAction ( period = 2.0 , actions = [ change_background_r_conditioned ], ) ]) Build-elj\u00fck a workspace-t \u00e9s futtassuk a turtlesim_controller_param_launch.py -t: cd ros2_ws colcon build --symlink-install ros2 launch ros2_course turtlesim_controller_param_launch.py List\u00e1zzuk ki az \u00faj launch f\u00e1jl argumentumait: ros2 launch ros2_course turtlesim_controller_param_launch.py --show-args Futtassuk a launch f\u00e1jlt az argumentumok be\u00e1ll\u00edt\u00e1s\u00e1val: ros2 launch ros2_course turtlesim_controller_param_launch.py speed: = 100 .0 omega: = 60 .0 A fenti p\u00e9lda seg\u00edts\u00e9g\u00e9vel \u00e1ll\u00edtsuk a h\u00e1tt\u00e9r sz\u00edn\u00e9t szint\u00e9n parancssori argumentum(ok) felhaszn\u00e1l\u00e1s\u00e1val.","title":"4: Turtlesim controller launch and substitutions"},{"location":"06_roslaunch/#5-rosbag","text":"Az el\u0151z\u0151 feladatban implement\u00e1lt program fut\u00e1sa k\u00f6zben r\u00f6gz\u00edts\u00fck a topic-ok tartalm\u00e1t egy rosbag f\u00e1jlba. ros2 bag record --all Syntax The filename and the topics to record can also be set, e.g.: ros2 bag record -o turtle_bagfile_1 /turtle1/cmd_vel /turtle1/pose Haszn\u00e1ljuk az al\u00e1bbi parancsot a bag f\u00e1jl tulajdons\u00e1gainak lek\u00e9rdez\u00e9s\u00e9re: ros2 bag info <PATH_TO_BAGFILE> J\u00e1tsszuk vissza a bag f\u00e1jlt \u00e9s jelen\u00edts\u00fck meg az egyik tekn\u0151c pose/x \u00e9rt\u00e9k\u00e9t grafikonon rqt_gui seg\u00edts\u00e9g\u00e9vel. ros2 bag info <PATH_TO_BAGFILE> ros2 run rqt_gui rqt_gui","title":"5: Rosbag"},{"location":"06_roslaunch/#hasznos-linkek","text":"ROS 2 Launch Tutorial ROS 2 Parameters Using ROS 2 parameters in a Class ROS 2 Bag","title":"Hasznos linkek"},{"location":"07_robotics_principles/","text":"07. Kinematika, inverz kienamtika, Szimul\u00e1lt robotkar programoz\u00e1sa csukl\u00f3-, \u00e9s munkat\u00e9rben Ism\u00e9tl\u00e9s 3D transzform\u00e1ci\u00f3k Poz\u00edci\u00f3: 3 elem\u0171 offszet vektor Orient\u00e1ci\u00f3: 3 x 3 rot\u00e1ci\u00f3s matrix tov\u00e1bbi orient\u00e1ci\u00f3 reprezent\u00e1ci\u00f3k: Euler-sz\u00f6gek, RPY, angle axis, quaternion Helyzet (pose): 4 \u00d7 4 transzform\u00e1ci\u00f3s m\u00e1rtrix Koordin\u00e1ta rendszer (frame): null pont, 3 tengely, 3 b\u00e1zis vektor, jobbk\u00e9z-szab\u00e1ly Homog\u00e9n transzform\u00e1ci\u00f3k: rot\u00e1ci\u00f3 \u00e9s transzl\u00e1ci\u00f3 egy\u00fctt pl. \\(\\mathbf{R}\\) rot\u00e1ci\u00f3 \u00e9s \\(\\mathbf{v}\\) transzl\u00e1ci\u00f3 eset\u00e9n: \\[ \\mathbf{T} = \\left[\\matrix{\\mathbf{R} & \\mathbf{v}\\\\\\mathbf{0} & 1 }\\right] = \\left[\\matrix{r_{1,1} & r_{1,2} & r_{1,3} & v_x\\\\r_{2,1} & r_{2,2} & r_{2,3} & v_y\\\\r_{3,1} & r_{3,2} & r_{3,3} & v_z\\\\\\ 0 & 0 & 0 & 1 }\\right] \\] Homog\u00e9n koordin\u00e1t\u00e1k: Vektor: 0-val eg\u00e9sz\u00edtj\u00fck ki, \\(\\mathbf{a_H}=\\left[\\matrix{\\mathbf{a} \\\\ 0}\\right]=\\left[\\matrix{a_x \\\\ a_y \\\\ a_z \\\\ 0}\\right]\\) Pont: 1-gyel eg\u00e9sz\u00edtj\u00fck ki, \\(\\mathbf{p_H}=\\left[\\matrix{\\mathbf{p} \\\\ 1}\\right]=\\left[\\matrix{p_x \\\\ p_y \\\\ p_z \\\\ 1}\\right]\\) Transzform\u00e1ci\u00f3k alkalmaz\u00e1sa egyszer\u0171bb: \\[ \\mathbf{q} = \\mathbf{R}\\mathbf{p} + \\mathbf{v} \\to \\left[\\matrix{\\mathbf{q} \\\\ 1}\\right] = \\left[\\matrix{\\mathbf{R} & \\mathbf{v}\\\\\\mathbf{0} & 1 }\\right]\\left[\\matrix{\\mathbf{p} \\\\ 1}\\right] \\] Szabads\u00e1gi fok (DoF): egym\u00e1st\u00f3l f\u00fcggetlen mennyis\u00e9gek sz\u00e1ma. Robotikai alapok Robotok fel\u00e9p\u00edt\u00e9se: szegmensek (segment, link) \u00e9s csukl\u00f3k (joints) Munkat\u00e9r (task space, cartesian space): H\u00e1romdimenzi\u00f3s t\u00e9r, ahol a feladat, trajekt\u00f3ri\u00e1k, akad\u00e1lyok, stb. defini\u00e1l\u00e1sra ker\u00fclnek. TCP (Tool Center Point): az end effektorhoz r\u00f6gz\u00edtett koordin\u00e1ta rendszer (frame) Base/world frame Csukl\u00f3t\u00e9r (joint space): A robot csukl\u00f3ihoz rendelt mennyis\u00e9gek, melyeket a robot alacsony szint\u0171 ir\u00e1ny\u00edt\u00f3 rendszere \u00e9rtelmezni k\u00e9pes. csukl\u00f3 koordin\u00e1t\u00e1k, sebess\u00e9gek, gyorsul\u00e1sok, nyomat\u00e9kok... Elm\u00e9let Kinematika, inverz kinematika Kinematika Def. Kinematika A TCP (vagy b\u00e1rmi m\u00e1s) helyzet\u00e9nek kisz\u00e1m\u00edt\u00e1sa a csukl\u00f3 koordin\u00e1t\u00e1kb\u00f3l. Kinematikai modell Denavit--Hartenberg (HD) konvenci\u00f3 URDF (Unified Robotics Description Format, XML-alap\u00fa) Ha a segmensekhez rendelt koordin\u00e1ta rendszerek rendre \\(base, 1, 2, 3, ..., TCP\\) , a szomsz\u00e9dos \\(i\\) and \\(i+1\\) szegmensek k\u00f6z\u00f6tti transzfomr\u00e1ci\u00f3k \\(T_{i+1,i}(q_{i+1})\\) (mely a k\u00f6zbez\u00e1rt csukl\u00f3 sz\u00f6g\u00e9nek f\u00fcggv\u00e9nye), a transzfomr\u00e1ci\u00f3 a base frame \u00e9s a TCP k\u00f6z\u00f6tt fel\u00edrhat\u00f3 ( \\(n\\) csukl\u00f3s robotra): \\[ T_{TCP,base}(q_1, \\cdots, q_n) = T_{TCP,n-1}(q_{n}) \\cdot T_{n-1,n-2}(q_{n-1}) \\cdots T_{2,1}(q_2) \\cdot T_{1,base}(q_1) \\cdot base \\] Inverz kinematika Def. Inverz kinematika Csukl\u00f3 koordin\u00e1t\u00e1k kisz\u00e1m\u00edt\u00e1sa a (k\u00edv\u00e1nt) TCP (vagy b\u00e1rmi m\u00e1s) pose el\u00e9r\u00e9s\u00e9hez. Differenci\u00e1lis inverz kinematika Def. Differenci\u00e1lis inverz kinematika A csukl\u00f3 koordin\u00e1t\u00e1k mely v\u00e1ltoztat\u00e1sa \u00e9ri el a k\u00edv\u00e1nt, kis m\u00e9rt\u00e9k\u0171 v\u00e1ltoz\u00e1st a TCP helyzet\u00e9ben (rot\u00e1ci\u00f3 \u00e9s transzl\u00e1ci\u00f3). Jacobi-m\u00e1trix (Jacobian): egy vektor\u00e9rt\u00e9k\u0171 f\u00fcggv\u00e9ny els\u0151rend\u0171 parci\u00e1lis deriv\u00e1ltjait tartalmaz\u00f3 m\u00e1trix. \\[ \\mathbf{J} = \\left[\\matrix{\\frac{\\partial x_1}{\\partial q_1} & \\frac{\\partial x_1}{\\partial q_2} &\\frac{\\partial x_1}{\\partial q_3} & \\dots &\\frac{\\partial x_1}{\\partial q_n} \\\\ \\frac{\\partial x_2}{\\partial q_1} & \\frac{\\partial x_2}{\\partial q_2} &\\frac{\\partial x_2} {\\partial q_3} & \\dots &\\frac{\\partial x_2}{\\partial q_n} \\\\ \\frac{\\partial x_3}{\\partial q_1} & \\frac{\\partial x_3}{\\partial q_2} &\\frac{\\partial x_3}{\\partial q_3} & \\dots &\\frac{\\partial x_3}{\\partial q_n} \\\\ \\vdots &\\vdots &\\vdots &\\ddots &\\vdots \\\\ \\frac{\\partial x_m}{\\partial q_1} & \\frac{\\partial x_m}{\\partial q_2} &\\frac{\\partial x_m}{\\partial q_3} & \\dots &\\frac{\\partial x_m}{\\partial q_n} \\\\}\\right] \\] Jacobi-m\u00e1trix jelent\u0151s\u00e9ge robotik\u00e1ban : megadja az \u00f6sszef\u00fcgg\u00e9st a csukl\u00f3sebess\u00e9gek \u00e9s a TCP sebess\u00e9ge k\u00f6z\u00f6tt. \\[ \\left[\\matrix{\\mathbf{v} \\\\ \\mathbf{\\omega}}\\right] =\\mathbf{J}(\\mathbf{q})\\cdot \\mathbf{\\dot{q}} \\] Inverz kinematika Jacobi inverz felhaszn\u00e1l\u00e1s\u00e1val Sz\u00e1m\u00edtsuk ki a k\u00edv\u00e1nt \u00e9s az aktu\u00e1lis poz\u00edci\u00f3 k\u00fcl\u00f6nbs\u00e9g\u00e9t: \\(\\Delta\\mathbf{r} = \\mathbf{r}_{desired} - \\mathbf{r}_0\\) Sz\u00e1m\u00edtsuk ki a rot\u00e1ci\u00f3k k\u00fcl\u00f6nbs\u00e9g\u00e9t: \\(\\Delta\\mathbf{R} = \\mathbf{R}_{desired}\\mathbf{R}_{0}^{T}\\) , majd konvert\u00e1ljuk \u00e1t axis angle reprezent\u00e1ci\u00f3ba \\((\\mathbf{t},\\phi)\\) Sz\u00e1m\u00edtsuk ki \\(\\Delta\\mathbf{ q}=\\mathbf{J}^{-1}(\\mathbf{q_0})\\cdot \\left[\\matrix{k_1 \\cdot \\Delta\\mathbf{r} \\\\ k_2 \\cdot \\mathbf{\\omega}}\\right]\\) , ahol az inverz lehet pszeudo-inverz, vagy transzpon\u00e1lt \\(\\mathbf{q}_{better} = \\mathbf{q}_{0} + \\Delta\\mathbf{q}\\) Gyakorlat 1: UR install Telep\u00edts\u00fck a dependency-ket \u00e9s a UR driver-t. sudo apt update sudo apt upgrade sudo apt-get install ros-humble-ur python3-pip pip3 install kinpy Tip A kinpy csomag forr\u00e1s\u00e1t is t\u00f6lts\u00fck le, hasznos lehet az API meg\u00e9rt\u00e9se szempontj\u00e1b\u00f3l: https://pypi.org/project/kinpy/ Tesztelj\u00fck a szimul\u00e1tort, \u00faj temin\u00e1l ablakban: ros2 launch dsr_launcher2 single_robot_rviz_topic.launch.py model: = a0912 color: = blue 2: Robot mozgat\u00e1sa csukl\u00f3t\u00e9rben Hozzunk l\u00e9tre \u00faj python forr\u00e1sf\u00e1jlt doosan2_controller.py n\u00e9vvel a ~/ros2_ws/src/ros2_course/ros2_course mapp\u00e1ban. Adjuk meg az \u00faj entry point-ot a setup.py -ban a megszokott m\u00f3don. Iratkozzunk fel a robot csukl\u00f3sz\u00f6geit (konfigur\u00e1ci\u00f3j\u00e1t) publik\u00e1l\u00f3 topicra. Hozzunk l\u00e9tre publisher-t a csukl\u00f3k sz\u00f6geinek be\u00e1ll\u00edt\u00e1s\u00e1ra haszn\u00e1lhat\u00f3 topic-hoz. /joint_states /joint_cmd Mozgassuk a robotot q = [0.24, -0.3, 1.55, 0.03, 1.8, 0.5] konfigur\u00e1ci\u00f3ba. 3. Kinematika Import\u00e1ljuk a kinpy csomagot \u00e9s olvassuk be a robotot le\u00edr\u00f3 urdf f\u00e1jlt: import kinpy as kp self . chain = kp . build_serial_chain_from_urdf ( open ( \"/home/<USERNAME>/doosan2_ws/src/doosan-robot2/dsr_description2/urdf/a0912.blue.urdf\" ) . read (), \"link6\" ) print ( self . chain . get_joint_parameter_names ()) print ( self . chain ) Sz\u00e1m\u00edtsuk ki, majd irassuk ki a TCP poz\u00edci\u00f3j\u00e1t az adott konfigur\u00e1ci\u00f3ban a kinpy csomag seg\u00edts\u00e9g\u00e9vel. tg = chain . forward_kinematics ( th1 ) 4: Inverz kinematika Jacobi inverz m\u00f3dszerrel \u00cdrjunk met\u00f3dust, amely az el\u0151ad\u00e1sban bemutatott Jakobi inverz m\u00f3dszerrel val\u00f3s\u00edtja meg az inverz kinematikai feladatot a roboton. Az orient\u00e1ci\u00f3t hagyjuk figyelmen k\u00edv\u00fcl. Mozgassuk a TCP-t a (0.55, 0.05, 0.45) poz\u00edci\u00f3ba. \u00c1br\u00e1zoljuk a TCP trajekt\u00f3ri\u00e1j\u00e1t Matplotlib seg\u00edts\u00e9g\u00e9vel. \u00cdrjunk egy ciklust, melynek meg\u00e1ll\u00e1si felt\u00e9tele a delta_r megfelel\u0151 nagys\u00e1ga \u00e9s rclpy.ok() . Sz\u00e1m\u00edtsuk ki a k\u00edv\u00e1nt \u00e9s a pillanatnyi TCP poz\u00edci\u00f3k k\u00fcl\u00f6nbs\u00e9g\u00e9t ( delta_r ). Sk\u00e1l\u00e1zzuk k_1 konstanssal. omega legyen [0.0, 0.0, 0.0] (ignor\u00e1ljuk az orient\u00e1ci\u00f3t). Konkaten\u00e1ljuk delta_r \u00e9s omega -t. Sz\u00e1m\u00edtsuk ki a Jacobi m\u00e1trixot az adott konfigur\u00e1ci\u00f3ban a kp.jacobian.calc_jacobian(...) f\u00fcggv\u00e9ny seg\u00edts\u00e9g\u00e9vel. Sz\u00e1m\u00edtsuk ki Jacobi m\u00e1trix pszeudo-inverz\u00e9t np.linalg.pinv(...) . A fenti k\u00e9plet seg\u00edts\u00e9g\u00e9vel sz\u00e1m\u00edts\u00fck ki delta_q -t. N\u00f6velj\u00fck a csukl\u00f3sz\u00f6geket a kapott \u00e9rt\u00e9kekkel. B\u00f3nusz: Inverz kinematika orient\u00e1ci\u00f3val Eg\u00e9sz\u00edts\u00fck ki az el\u0151z\u0151 feladat megold\u00e1s\u00e1t \u00fagy, hogy az orient\u00e1ci\u00f3t is figyelembe vessz\u00fck az inverz kinematikai sz\u00e1m\u00edt\u00e1s sor\u00e1n. Hasznos linkek doosan-robot2 github https://pypi.org/project/kinpy/ https://en.wikipedia.org/wiki/Axis%E2%80%93angle_representation https://www.rosroboticslearning.com/jacobian","title":"7. Kinematika, inverz kinematika"},{"location":"07_robotics_principles/#07-kinematika-inverz-kienamtika-szimulalt-robotkar-programozasa-csuklo-es-munkaterben","text":"","title":"07. Kinematika, inverz kienamtika, Szimul\u00e1lt robotkar programoz\u00e1sa csukl\u00f3-, \u00e9s munkat\u00e9rben"},{"location":"07_robotics_principles/#ismetles","text":"","title":"Ism\u00e9tl\u00e9s"},{"location":"07_robotics_principles/#3d-transzformaciok","text":"Poz\u00edci\u00f3: 3 elem\u0171 offszet vektor Orient\u00e1ci\u00f3: 3 x 3 rot\u00e1ci\u00f3s matrix tov\u00e1bbi orient\u00e1ci\u00f3 reprezent\u00e1ci\u00f3k: Euler-sz\u00f6gek, RPY, angle axis, quaternion Helyzet (pose): 4 \u00d7 4 transzform\u00e1ci\u00f3s m\u00e1rtrix Koordin\u00e1ta rendszer (frame): null pont, 3 tengely, 3 b\u00e1zis vektor, jobbk\u00e9z-szab\u00e1ly Homog\u00e9n transzform\u00e1ci\u00f3k: rot\u00e1ci\u00f3 \u00e9s transzl\u00e1ci\u00f3 egy\u00fctt pl. \\(\\mathbf{R}\\) rot\u00e1ci\u00f3 \u00e9s \\(\\mathbf{v}\\) transzl\u00e1ci\u00f3 eset\u00e9n: \\[ \\mathbf{T} = \\left[\\matrix{\\mathbf{R} & \\mathbf{v}\\\\\\mathbf{0} & 1 }\\right] = \\left[\\matrix{r_{1,1} & r_{1,2} & r_{1,3} & v_x\\\\r_{2,1} & r_{2,2} & r_{2,3} & v_y\\\\r_{3,1} & r_{3,2} & r_{3,3} & v_z\\\\\\ 0 & 0 & 0 & 1 }\\right] \\] Homog\u00e9n koordin\u00e1t\u00e1k: Vektor: 0-val eg\u00e9sz\u00edtj\u00fck ki, \\(\\mathbf{a_H}=\\left[\\matrix{\\mathbf{a} \\\\ 0}\\right]=\\left[\\matrix{a_x \\\\ a_y \\\\ a_z \\\\ 0}\\right]\\) Pont: 1-gyel eg\u00e9sz\u00edtj\u00fck ki, \\(\\mathbf{p_H}=\\left[\\matrix{\\mathbf{p} \\\\ 1}\\right]=\\left[\\matrix{p_x \\\\ p_y \\\\ p_z \\\\ 1}\\right]\\) Transzform\u00e1ci\u00f3k alkalmaz\u00e1sa egyszer\u0171bb: \\[ \\mathbf{q} = \\mathbf{R}\\mathbf{p} + \\mathbf{v} \\to \\left[\\matrix{\\mathbf{q} \\\\ 1}\\right] = \\left[\\matrix{\\mathbf{R} & \\mathbf{v}\\\\\\mathbf{0} & 1 }\\right]\\left[\\matrix{\\mathbf{p} \\\\ 1}\\right] \\] Szabads\u00e1gi fok (DoF): egym\u00e1st\u00f3l f\u00fcggetlen mennyis\u00e9gek sz\u00e1ma.","title":"3D transzform\u00e1ci\u00f3k"},{"location":"07_robotics_principles/#robotikai-alapok","text":"Robotok fel\u00e9p\u00edt\u00e9se: szegmensek (segment, link) \u00e9s csukl\u00f3k (joints) Munkat\u00e9r (task space, cartesian space): H\u00e1romdimenzi\u00f3s t\u00e9r, ahol a feladat, trajekt\u00f3ri\u00e1k, akad\u00e1lyok, stb. defini\u00e1l\u00e1sra ker\u00fclnek. TCP (Tool Center Point): az end effektorhoz r\u00f6gz\u00edtett koordin\u00e1ta rendszer (frame) Base/world frame Csukl\u00f3t\u00e9r (joint space): A robot csukl\u00f3ihoz rendelt mennyis\u00e9gek, melyeket a robot alacsony szint\u0171 ir\u00e1ny\u00edt\u00f3 rendszere \u00e9rtelmezni k\u00e9pes. csukl\u00f3 koordin\u00e1t\u00e1k, sebess\u00e9gek, gyorsul\u00e1sok, nyomat\u00e9kok...","title":"Robotikai alapok"},{"location":"07_robotics_principles/#elmelet","text":"","title":"Elm\u00e9let"},{"location":"07_robotics_principles/#kinematika-inverz-kinematika","text":"","title":"Kinematika, inverz kinematika"},{"location":"07_robotics_principles/#kinematika","text":"Def. Kinematika A TCP (vagy b\u00e1rmi m\u00e1s) helyzet\u00e9nek kisz\u00e1m\u00edt\u00e1sa a csukl\u00f3 koordin\u00e1t\u00e1kb\u00f3l. Kinematikai modell Denavit--Hartenberg (HD) konvenci\u00f3 URDF (Unified Robotics Description Format, XML-alap\u00fa) Ha a segmensekhez rendelt koordin\u00e1ta rendszerek rendre \\(base, 1, 2, 3, ..., TCP\\) , a szomsz\u00e9dos \\(i\\) and \\(i+1\\) szegmensek k\u00f6z\u00f6tti transzfomr\u00e1ci\u00f3k \\(T_{i+1,i}(q_{i+1})\\) (mely a k\u00f6zbez\u00e1rt csukl\u00f3 sz\u00f6g\u00e9nek f\u00fcggv\u00e9nye), a transzfomr\u00e1ci\u00f3 a base frame \u00e9s a TCP k\u00f6z\u00f6tt fel\u00edrhat\u00f3 ( \\(n\\) csukl\u00f3s robotra): \\[ T_{TCP,base}(q_1, \\cdots, q_n) = T_{TCP,n-1}(q_{n}) \\cdot T_{n-1,n-2}(q_{n-1}) \\cdots T_{2,1}(q_2) \\cdot T_{1,base}(q_1) \\cdot base \\]","title":"Kinematika"},{"location":"07_robotics_principles/#inverz-kinematika","text":"Def. Inverz kinematika Csukl\u00f3 koordin\u00e1t\u00e1k kisz\u00e1m\u00edt\u00e1sa a (k\u00edv\u00e1nt) TCP (vagy b\u00e1rmi m\u00e1s) pose el\u00e9r\u00e9s\u00e9hez.","title":"Inverz kinematika"},{"location":"07_robotics_principles/#differencialis-inverz-kinematika","text":"Def. Differenci\u00e1lis inverz kinematika A csukl\u00f3 koordin\u00e1t\u00e1k mely v\u00e1ltoztat\u00e1sa \u00e9ri el a k\u00edv\u00e1nt, kis m\u00e9rt\u00e9k\u0171 v\u00e1ltoz\u00e1st a TCP helyzet\u00e9ben (rot\u00e1ci\u00f3 \u00e9s transzl\u00e1ci\u00f3). Jacobi-m\u00e1trix (Jacobian): egy vektor\u00e9rt\u00e9k\u0171 f\u00fcggv\u00e9ny els\u0151rend\u0171 parci\u00e1lis deriv\u00e1ltjait tartalmaz\u00f3 m\u00e1trix. \\[ \\mathbf{J} = \\left[\\matrix{\\frac{\\partial x_1}{\\partial q_1} & \\frac{\\partial x_1}{\\partial q_2} &\\frac{\\partial x_1}{\\partial q_3} & \\dots &\\frac{\\partial x_1}{\\partial q_n} \\\\ \\frac{\\partial x_2}{\\partial q_1} & \\frac{\\partial x_2}{\\partial q_2} &\\frac{\\partial x_2} {\\partial q_3} & \\dots &\\frac{\\partial x_2}{\\partial q_n} \\\\ \\frac{\\partial x_3}{\\partial q_1} & \\frac{\\partial x_3}{\\partial q_2} &\\frac{\\partial x_3}{\\partial q_3} & \\dots &\\frac{\\partial x_3}{\\partial q_n} \\\\ \\vdots &\\vdots &\\vdots &\\ddots &\\vdots \\\\ \\frac{\\partial x_m}{\\partial q_1} & \\frac{\\partial x_m}{\\partial q_2} &\\frac{\\partial x_m}{\\partial q_3} & \\dots &\\frac{\\partial x_m}{\\partial q_n} \\\\}\\right] \\] Jacobi-m\u00e1trix jelent\u0151s\u00e9ge robotik\u00e1ban : megadja az \u00f6sszef\u00fcgg\u00e9st a csukl\u00f3sebess\u00e9gek \u00e9s a TCP sebess\u00e9ge k\u00f6z\u00f6tt. \\[ \\left[\\matrix{\\mathbf{v} \\\\ \\mathbf{\\omega}}\\right] =\\mathbf{J}(\\mathbf{q})\\cdot \\mathbf{\\dot{q}} \\]","title":"Differenci\u00e1lis inverz kinematika"},{"location":"07_robotics_principles/#inverz-kinematika-jacobi-inverz-felhasznalasaval","text":"Sz\u00e1m\u00edtsuk ki a k\u00edv\u00e1nt \u00e9s az aktu\u00e1lis poz\u00edci\u00f3 k\u00fcl\u00f6nbs\u00e9g\u00e9t: \\(\\Delta\\mathbf{r} = \\mathbf{r}_{desired} - \\mathbf{r}_0\\) Sz\u00e1m\u00edtsuk ki a rot\u00e1ci\u00f3k k\u00fcl\u00f6nbs\u00e9g\u00e9t: \\(\\Delta\\mathbf{R} = \\mathbf{R}_{desired}\\mathbf{R}_{0}^{T}\\) , majd konvert\u00e1ljuk \u00e1t axis angle reprezent\u00e1ci\u00f3ba \\((\\mathbf{t},\\phi)\\) Sz\u00e1m\u00edtsuk ki \\(\\Delta\\mathbf{ q}=\\mathbf{J}^{-1}(\\mathbf{q_0})\\cdot \\left[\\matrix{k_1 \\cdot \\Delta\\mathbf{r} \\\\ k_2 \\cdot \\mathbf{\\omega}}\\right]\\) , ahol az inverz lehet pszeudo-inverz, vagy transzpon\u00e1lt \\(\\mathbf{q}_{better} = \\mathbf{q}_{0} + \\Delta\\mathbf{q}\\)","title":"Inverz kinematika Jacobi inverz felhaszn\u00e1l\u00e1s\u00e1val"},{"location":"07_robotics_principles/#gyakorlat","text":"","title":"Gyakorlat"},{"location":"07_robotics_principles/#1-ur-install","text":"Telep\u00edts\u00fck a dependency-ket \u00e9s a UR driver-t. sudo apt update sudo apt upgrade sudo apt-get install ros-humble-ur python3-pip pip3 install kinpy Tip A kinpy csomag forr\u00e1s\u00e1t is t\u00f6lts\u00fck le, hasznos lehet az API meg\u00e9rt\u00e9se szempontj\u00e1b\u00f3l: https://pypi.org/project/kinpy/ Tesztelj\u00fck a szimul\u00e1tort, \u00faj temin\u00e1l ablakban: ros2 launch dsr_launcher2 single_robot_rviz_topic.launch.py model: = a0912 color: = blue","title":"1: UR install"},{"location":"07_robotics_principles/#2-robot-mozgatasa-csukloterben","text":"Hozzunk l\u00e9tre \u00faj python forr\u00e1sf\u00e1jlt doosan2_controller.py n\u00e9vvel a ~/ros2_ws/src/ros2_course/ros2_course mapp\u00e1ban. Adjuk meg az \u00faj entry point-ot a setup.py -ban a megszokott m\u00f3don. Iratkozzunk fel a robot csukl\u00f3sz\u00f6geit (konfigur\u00e1ci\u00f3j\u00e1t) publik\u00e1l\u00f3 topicra. Hozzunk l\u00e9tre publisher-t a csukl\u00f3k sz\u00f6geinek be\u00e1ll\u00edt\u00e1s\u00e1ra haszn\u00e1lhat\u00f3 topic-hoz. /joint_states /joint_cmd Mozgassuk a robotot q = [0.24, -0.3, 1.55, 0.03, 1.8, 0.5] konfigur\u00e1ci\u00f3ba.","title":"2: Robot mozgat\u00e1sa csukl\u00f3t\u00e9rben"},{"location":"07_robotics_principles/#3-kinematika","text":"Import\u00e1ljuk a kinpy csomagot \u00e9s olvassuk be a robotot le\u00edr\u00f3 urdf f\u00e1jlt: import kinpy as kp self . chain = kp . build_serial_chain_from_urdf ( open ( \"/home/<USERNAME>/doosan2_ws/src/doosan-robot2/dsr_description2/urdf/a0912.blue.urdf\" ) . read (), \"link6\" ) print ( self . chain . get_joint_parameter_names ()) print ( self . chain ) Sz\u00e1m\u00edtsuk ki, majd irassuk ki a TCP poz\u00edci\u00f3j\u00e1t az adott konfigur\u00e1ci\u00f3ban a kinpy csomag seg\u00edts\u00e9g\u00e9vel. tg = chain . forward_kinematics ( th1 )","title":"3. Kinematika"},{"location":"07_robotics_principles/#4-inverz-kinematika-jacobi-inverz-modszerrel","text":"\u00cdrjunk met\u00f3dust, amely az el\u0151ad\u00e1sban bemutatott Jakobi inverz m\u00f3dszerrel val\u00f3s\u00edtja meg az inverz kinematikai feladatot a roboton. Az orient\u00e1ci\u00f3t hagyjuk figyelmen k\u00edv\u00fcl. Mozgassuk a TCP-t a (0.55, 0.05, 0.45) poz\u00edci\u00f3ba. \u00c1br\u00e1zoljuk a TCP trajekt\u00f3ri\u00e1j\u00e1t Matplotlib seg\u00edts\u00e9g\u00e9vel. \u00cdrjunk egy ciklust, melynek meg\u00e1ll\u00e1si felt\u00e9tele a delta_r megfelel\u0151 nagys\u00e1ga \u00e9s rclpy.ok() . Sz\u00e1m\u00edtsuk ki a k\u00edv\u00e1nt \u00e9s a pillanatnyi TCP poz\u00edci\u00f3k k\u00fcl\u00f6nbs\u00e9g\u00e9t ( delta_r ). Sk\u00e1l\u00e1zzuk k_1 konstanssal. omega legyen [0.0, 0.0, 0.0] (ignor\u00e1ljuk az orient\u00e1ci\u00f3t). Konkaten\u00e1ljuk delta_r \u00e9s omega -t. Sz\u00e1m\u00edtsuk ki a Jacobi m\u00e1trixot az adott konfigur\u00e1ci\u00f3ban a kp.jacobian.calc_jacobian(...) f\u00fcggv\u00e9ny seg\u00edts\u00e9g\u00e9vel. Sz\u00e1m\u00edtsuk ki Jacobi m\u00e1trix pszeudo-inverz\u00e9t np.linalg.pinv(...) . A fenti k\u00e9plet seg\u00edts\u00e9g\u00e9vel sz\u00e1m\u00edts\u00fck ki delta_q -t. N\u00f6velj\u00fck a csukl\u00f3sz\u00f6geket a kapott \u00e9rt\u00e9kekkel.","title":"4: Inverz kinematika Jacobi inverz m\u00f3dszerrel"},{"location":"07_robotics_principles/#bonusz-inverz-kinematika-orientacioval","text":"Eg\u00e9sz\u00edts\u00fck ki az el\u0151z\u0151 feladat megold\u00e1s\u00e1t \u00fagy, hogy az orient\u00e1ci\u00f3t is figyelembe vessz\u00fck az inverz kinematikai sz\u00e1m\u00edt\u00e1s sor\u00e1n.","title":"B\u00f3nusz: Inverz kinematika orient\u00e1ci\u00f3val"},{"location":"07_robotics_principles/#hasznos-linkek","text":"doosan-robot2 github https://pypi.org/project/kinpy/ https://en.wikipedia.org/wiki/Axis%E2%80%93angle_representation https://www.rosroboticslearning.com/jacobian","title":"Hasznos linkek"},{"location":"08_service_action/","text":"08. ROS service, ROS action fogalma, felhaszn\u00e1l\u00e1sa Elm\u00e9let Warning ZH2 m\u00e1jus 26. 10:45 F.05 terem ROS Service Request/reply communication Use a client-server model Similar to Remote Procedure Calls (RPC) Blocking behavior by default (can be async) ROS .srv files int a int b --- int sum #request constants int8 FOO = 1 int8 BAR = 2 #request fields int8 foobar another_pkg/AnotherMessage msg --- #response constants uint32 SECRET = 123456 #response fields another_pkg/YetAnotherMessage val CustomMessageDefinedInThisPackage value uint32 an_integer ROS Action Image source: https://docs.ros.org/ Ideal for communication with slower processes, e.g. environmental inetarcion Asynchronous communication (non-blocking) Actions consist of a goal, feedback, and a result Built on topics and services and function similarly to services Actions are preemptable, (can be canceled while executing) Provide steady feedback, unlike services which return a single response Actions use a client-server model, similar to the publisher-subscriber model An action client node sends a goal to an action server node that acknowledges the goal and returns a stream of feedback and a result. ROS .action files # Define the goal uint32 dishwasher_id # Specify which dishwasher we want to use --- # Define the result uint32 total_dishes_cleaned --- # Define a feedback message float32 percent_complete Building custom interfaces ( .msg , .srv and .action files) CMakeList.txt and package.xml need to be modified For messages and services, see https://docs.ros.org/en/foxy/Tutorials/Beginner-Client-Libraries/Custom-ROS2-Interfaces.html For actions, see https://docs.ros.org/en/foxy/Tutorials/Intermediate/Creating-an-Action.html Gyakorlat 1: Actions with Turtlesim Ind\u00edtsunk el egy turtlesim node -ot \u00e9s egy turtle_teleop_key -t. Figyelj\u00fck megy a G|B|V|C|D|E|R|T billenty\u0171k lenyom\u00e1s\u00e1nak hat\u00e1s\u00e1t. ros2 run turtlesim turtlesim_node ros2 run turtlesim turtle_teleop_key Tanulm\u00e1nyozzuk a rendszer m\u0171k\u00f6d\u00e9s\u00e9t az al\u00e1bbi parancsok seg\u00edts\u00e9g\u00e9vel: ros2 node info /turtlesim ros2 node info /teleop_turtle ros2 action list -t ros2 action info /turtle1/rotate_absolute ros2 interface show turtlesim/action/RotateAbsolute K\u00fcldj\u00fcnk action goal-t a parancssorb\u00f3l: ros2 action send_goal /turtle1/rotate_absolute turtlesim/action/RotateAbsolute \"{theta: 3.14}\" 2: PSM grasp action A k\u00f6vetkez\u0151kben ROS action server--client architekt\u00far\u00e1t fogunk implement\u00e1lni. A kor\u00e1bban implement\u00e1lt psm_grasp.py funkcionalit\u00e1s\u00e1t fogjuk k\u00e9t k\u00fcl\u00f6n node-ra bontani az al\u00e1bb \u00e1bra szerint. 2.1: dVRK ROS2 install Ubuntu 20.04-en az al\u00e1bbi csomagokra lesz s\u00fcks\u00e9g: sudo apt install python3-vcstool python3-colcon-common-extensions python3-pykdl libxml2-dev libraw1394-dev libncurses5-dev qtcreator swig sox espeak cmake-curses-gui cmake-qt-gui git subversion gfortran libcppunit-dev libqt5xmlpatterns5-dev libbluetooth-dev ros-foxy-joint-state-publisher* ros-foxy-xacro Clone-ozzuk a dVRK ROS2 csomagokat vcs -sel, majd build-elj\u00fck: cd ~/ros2_ws/src vcs import --input https://raw.githubusercontent.com/jhu-dvrk/dvrk_robot_ros2/main/dvrk.vcs --recursive cd ~/ros2_ws colcon build --symlink-install --cmake-args -DCMAKE_BUILD_TYPE = Release source ~/ros2_ws/install/setup.bash Ind\u00edtsuk el a PSM1 RViz szimul\u00e1ci\u00f3j\u00e1t. A dVRK konzolon ne felejts\u00fcnk el HOME-olni. # dVRK main console ros2 run dvrk_robot dvrk_console_json -j ~/ros2_ws/install/sawIntuitiveResearchKitAll/share/sawIntuitiveResearchKit/share/console/console-PSM1_KIN_SIMULATED.json # ROS 2 joint and robot state publishers ros2 launch dvrk_model dvrk_state_publisher.launch.py arm: = PSM1 # RViz ros2 run rviz2 rviz2 -d ~/ros2_ws/install/dvrk_model/share/dvrk_model/rviz/PSM1.rviz URDF-fel kapcsolatos hib\u00e1k eset\u00e9n locale # check for UTF-8 sudo apt update && sudo apt install locales sudo locale-gen en_US en_US.UTF-8 sudo update-locale LC_ALL = en_US.UTF-8 LANG = en_US.UTF-8 export LANG = en_US.UTF-8 locale # verify settings Tanulm\u00e1nyozzuk a szimul\u00e1tor m\u0171k\u00f6d\u00e9s\u00e9t ROS 2-b\u0151l a tanult prancsok ( ros2 topic list , ros2 topic echo ros2 run rqt_gui rqt_gui , stb.) haszn\u00e1lat\u00e1val. 2.2: Grasp action l\u00e9trehoz\u00e1sa Hozzunk l\u00e9tre \u00faj csomagot ros2_course_msgs n\u00e9vvel: cd ros2_ws/src ros2 pkg create --build-type ament_cmake ros2_course_msgs --dependencies action_msgs std_msgs geometry_msgs rosidl_default_generators Hozzuk l\u00e9tre a ros2_course_msgs/action/Grasp.action f\u00e1jlt az al\u00e1bbi tartalommal: # Goal geometry_msgs/Point grasp_pos --- # Result bool success --- # Feedback string status Adjuk hozz\u00e1 a k\u00f6vetkez\u0151t a CMakeLists.txt -hez: rosidl_generate_interfaces ( ${ PROJECT_NAME } \"action/Grasp.action\" DEPENDENCIES geometry_msgs ) Adjuk hozz\u00e1 a dependency-ket a package.xml -hez: <buildtool_depend> rosidl_default_generators </buildtool_depend> <member_of_group> rosidl_interface_packages </member_of_group> Build-elj\u00fck a workspace-t: cd ~/ros2_ws colcon build --symlink-install --cmake-args -DCMAKE_BUILD_TYPE = Release Ellen\u0151rizz\u00fck, hogy l\u00e9trej\u00f6tt-e a Grasp action: source ~/ros2_ws/install/setup.bash ros2 interface show ros2_course_msgs/action/Grasp A ros2_course csomag package.xml -j\u00e9hez adjuk hozz\u00e1 a k\u00f6vetkez\u0151 sort a ros2_course_msgs dependency be\u00e1ll\u00edt\u00e1s\u00e1hoz: <exec_depend> ros2_course_msgs </exec_depend> 2.2: Grasp server implement\u00e1l\u00e1sa Hozzunk l\u00e9tre \u00faj python forr\u00e1sf\u00e1jlt grasp_server.py n\u00e9vvel a ~/ros2_ws/src/ros2_course/ros2_course mapp\u00e1ban. Adjuk meg az \u00faj entry point-ot a setup.py -ban a megszokott m\u00f3don. Implement\u00e1ljuk az action server-t. Induljunk ki a p\u00e9ld\u00e1b\u00f3l: https://docs.ros.org/en/foxy/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.html . A node funkcionalit\u00e1sa \u00e1temelhet\u0151 a psm_grasp.py -b\u00f3l. A node egy Grasp action-t v\u00e1r, melynek hat\u00e1s\u00e1ra megragadja a goal-ban szerepl\u00f3 koordin\u00e1t\u00e1kon tal\u00e1lhat\u00f3 t\u00e1rgyat (a dummy markert). CLion interpreter CLion-ban az interpreterhez adjuk hozz\u00e1 a /home/tamas/ros2_ws/install/ros2_course_msgs/lib/python3.8/site-packages el\u00e9r\u00e9si utat. measured_cp \u00e9s servo_cp topic-ok dVRK ROS 2-ben DVRK ROS 2-ben v\u00e1ltozott a topic-ok t\u00edpusa: geometry_msgs/msg/PoseStamped . Futtassuk az action server-t \u00e9s tesztelj\u00fck a m\u0171k\u00f6d\u00e9s\u00e9t parancssorb\u00f3l: ros2 run ros2_course grasp_server ros2 node info grasp_server ros2 action list -t ros2 action info /grasp ros2 interface show ros2_course_msgs/action/Grasp ros2 action send_goal --feedback /grasp ros2_course_msgs/action/Grasp \"{grasp_pos: {x: 0.0, y: 0.0, z: -0.18}}\" 2.3: Grasp client implement\u00e1l\u00e1sa Hozzunk l\u00e9tre \u00faj python forr\u00e1sf\u00e1jlt grasp_client.py n\u00e9vvel a ~/ros2_ws/src/ros2_course/ros2_course mapp\u00e1ban. Adjuk meg az \u00faj entry point-ot a setup.py -ban a megszokott m\u00f3don. Implement\u00e1ljuk az action client-et. Induljunk ki a p\u00e9ld\u00e1b\u00f3l: https://docs.ros.org/en/foxy/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.html . A node funkcionalit\u00e1sa \u00e1temelhet\u0151 a psm_grasp.py -b\u00f3l. A node feliratkozik a /dummy_target_marker topic-ra, \u00e9s egy Grasp action request-et k\u00fcld az action server-nek (`grasp_server') a marker megragad\u00e1s\u00e1ra. Futtassuk az action client-et ( grasp_client ) \u00e9s a dummy_marker -t: ros2 run ros2_course dummy_marker ros2 run ros2_course grasp_client 3. IsPrime service Implement\u00e1ljunk ROS Service-t, amely egy kapott term\u00e9szetes sz\u00e1mr\u00f3l meg\u00e1llap\u00edtja, pr\u00edm-e. Haszn\u00e1ljuk az implement\u00e1lt service-t. Kiindulhatunk ebb\u0151l a p\u00e9ld\u00e1b\u00f3l: https://docs.ros.org/en/foxy/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.html . Hasznos linkek Build dVRK2 on ROS2 ROS 2 examples Understanding ROS actions Creating an action Writing an Action Server and Client https://docs.ros.org/en/foxy/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.html","title":"8. ROS 2 Service, ROS 2 Action"},{"location":"08_service_action/#08-ros-service-ros-action-fogalma-felhasznalasa","text":"","title":"08. ROS service, ROS action fogalma, felhaszn\u00e1l\u00e1sa"},{"location":"08_service_action/#elmelet","text":"Warning ZH2 m\u00e1jus 26. 10:45 F.05 terem","title":"Elm\u00e9let"},{"location":"08_service_action/#ros-service","text":"Request/reply communication Use a client-server model Similar to Remote Procedure Calls (RPC) Blocking behavior by default (can be async)","title":"ROS Service"},{"location":"08_service_action/#ros-srv-files","text":"int a int b --- int sum #request constants int8 FOO = 1 int8 BAR = 2 #request fields int8 foobar another_pkg/AnotherMessage msg --- #response constants uint32 SECRET = 123456 #response fields another_pkg/YetAnotherMessage val CustomMessageDefinedInThisPackage value uint32 an_integer","title":"ROS .srv files"},{"location":"08_service_action/#ros-action","text":"Image source: https://docs.ros.org/ Ideal for communication with slower processes, e.g. environmental inetarcion Asynchronous communication (non-blocking) Actions consist of a goal, feedback, and a result Built on topics and services and function similarly to services Actions are preemptable, (can be canceled while executing) Provide steady feedback, unlike services which return a single response Actions use a client-server model, similar to the publisher-subscriber model An action client node sends a goal to an action server node that acknowledges the goal and returns a stream of feedback and a result.","title":"ROS Action"},{"location":"08_service_action/#ros-action-files","text":"# Define the goal uint32 dishwasher_id # Specify which dishwasher we want to use --- # Define the result uint32 total_dishes_cleaned --- # Define a feedback message float32 percent_complete","title":"ROS .action files"},{"location":"08_service_action/#building-custom-interfaces-msg-srv-and-action-files","text":"CMakeList.txt and package.xml need to be modified For messages and services, see https://docs.ros.org/en/foxy/Tutorials/Beginner-Client-Libraries/Custom-ROS2-Interfaces.html For actions, see https://docs.ros.org/en/foxy/Tutorials/Intermediate/Creating-an-Action.html","title":"Building custom interfaces (.msg , .srv and .action files)"},{"location":"08_service_action/#gyakorlat","text":"","title":"Gyakorlat"},{"location":"08_service_action/#1-actions-with-turtlesim","text":"Ind\u00edtsunk el egy turtlesim node -ot \u00e9s egy turtle_teleop_key -t. Figyelj\u00fck megy a G|B|V|C|D|E|R|T billenty\u0171k lenyom\u00e1s\u00e1nak hat\u00e1s\u00e1t. ros2 run turtlesim turtlesim_node ros2 run turtlesim turtle_teleop_key Tanulm\u00e1nyozzuk a rendszer m\u0171k\u00f6d\u00e9s\u00e9t az al\u00e1bbi parancsok seg\u00edts\u00e9g\u00e9vel: ros2 node info /turtlesim ros2 node info /teleop_turtle ros2 action list -t ros2 action info /turtle1/rotate_absolute ros2 interface show turtlesim/action/RotateAbsolute K\u00fcldj\u00fcnk action goal-t a parancssorb\u00f3l: ros2 action send_goal /turtle1/rotate_absolute turtlesim/action/RotateAbsolute \"{theta: 3.14}\"","title":"1: Actions with Turtlesim"},{"location":"08_service_action/#2-psm-grasp-action","text":"A k\u00f6vetkez\u0151kben ROS action server--client architekt\u00far\u00e1t fogunk implement\u00e1lni. A kor\u00e1bban implement\u00e1lt psm_grasp.py funkcionalit\u00e1s\u00e1t fogjuk k\u00e9t k\u00fcl\u00f6n node-ra bontani az al\u00e1bb \u00e1bra szerint.","title":"2: PSM grasp action"},{"location":"08_service_action/#21-dvrk-ros2-install","text":"Ubuntu 20.04-en az al\u00e1bbi csomagokra lesz s\u00fcks\u00e9g: sudo apt install python3-vcstool python3-colcon-common-extensions python3-pykdl libxml2-dev libraw1394-dev libncurses5-dev qtcreator swig sox espeak cmake-curses-gui cmake-qt-gui git subversion gfortran libcppunit-dev libqt5xmlpatterns5-dev libbluetooth-dev ros-foxy-joint-state-publisher* ros-foxy-xacro Clone-ozzuk a dVRK ROS2 csomagokat vcs -sel, majd build-elj\u00fck: cd ~/ros2_ws/src vcs import --input https://raw.githubusercontent.com/jhu-dvrk/dvrk_robot_ros2/main/dvrk.vcs --recursive cd ~/ros2_ws colcon build --symlink-install --cmake-args -DCMAKE_BUILD_TYPE = Release source ~/ros2_ws/install/setup.bash Ind\u00edtsuk el a PSM1 RViz szimul\u00e1ci\u00f3j\u00e1t. A dVRK konzolon ne felejts\u00fcnk el HOME-olni. # dVRK main console ros2 run dvrk_robot dvrk_console_json -j ~/ros2_ws/install/sawIntuitiveResearchKitAll/share/sawIntuitiveResearchKit/share/console/console-PSM1_KIN_SIMULATED.json # ROS 2 joint and robot state publishers ros2 launch dvrk_model dvrk_state_publisher.launch.py arm: = PSM1 # RViz ros2 run rviz2 rviz2 -d ~/ros2_ws/install/dvrk_model/share/dvrk_model/rviz/PSM1.rviz URDF-fel kapcsolatos hib\u00e1k eset\u00e9n locale # check for UTF-8 sudo apt update && sudo apt install locales sudo locale-gen en_US en_US.UTF-8 sudo update-locale LC_ALL = en_US.UTF-8 LANG = en_US.UTF-8 export LANG = en_US.UTF-8 locale # verify settings Tanulm\u00e1nyozzuk a szimul\u00e1tor m\u0171k\u00f6d\u00e9s\u00e9t ROS 2-b\u0151l a tanult prancsok ( ros2 topic list , ros2 topic echo ros2 run rqt_gui rqt_gui , stb.) haszn\u00e1lat\u00e1val.","title":"2.1: dVRK ROS2 install"},{"location":"08_service_action/#22-grasp-action-letrehozasa","text":"Hozzunk l\u00e9tre \u00faj csomagot ros2_course_msgs n\u00e9vvel: cd ros2_ws/src ros2 pkg create --build-type ament_cmake ros2_course_msgs --dependencies action_msgs std_msgs geometry_msgs rosidl_default_generators Hozzuk l\u00e9tre a ros2_course_msgs/action/Grasp.action f\u00e1jlt az al\u00e1bbi tartalommal: # Goal geometry_msgs/Point grasp_pos --- # Result bool success --- # Feedback string status Adjuk hozz\u00e1 a k\u00f6vetkez\u0151t a CMakeLists.txt -hez: rosidl_generate_interfaces ( ${ PROJECT_NAME } \"action/Grasp.action\" DEPENDENCIES geometry_msgs ) Adjuk hozz\u00e1 a dependency-ket a package.xml -hez: <buildtool_depend> rosidl_default_generators </buildtool_depend> <member_of_group> rosidl_interface_packages </member_of_group> Build-elj\u00fck a workspace-t: cd ~/ros2_ws colcon build --symlink-install --cmake-args -DCMAKE_BUILD_TYPE = Release Ellen\u0151rizz\u00fck, hogy l\u00e9trej\u00f6tt-e a Grasp action: source ~/ros2_ws/install/setup.bash ros2 interface show ros2_course_msgs/action/Grasp A ros2_course csomag package.xml -j\u00e9hez adjuk hozz\u00e1 a k\u00f6vetkez\u0151 sort a ros2_course_msgs dependency be\u00e1ll\u00edt\u00e1s\u00e1hoz: <exec_depend> ros2_course_msgs </exec_depend>","title":"2.2: Grasp action l\u00e9trehoz\u00e1sa"},{"location":"08_service_action/#22-grasp-server-implementalasa","text":"Hozzunk l\u00e9tre \u00faj python forr\u00e1sf\u00e1jlt grasp_server.py n\u00e9vvel a ~/ros2_ws/src/ros2_course/ros2_course mapp\u00e1ban. Adjuk meg az \u00faj entry point-ot a setup.py -ban a megszokott m\u00f3don. Implement\u00e1ljuk az action server-t. Induljunk ki a p\u00e9ld\u00e1b\u00f3l: https://docs.ros.org/en/foxy/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.html . A node funkcionalit\u00e1sa \u00e1temelhet\u0151 a psm_grasp.py -b\u00f3l. A node egy Grasp action-t v\u00e1r, melynek hat\u00e1s\u00e1ra megragadja a goal-ban szerepl\u00f3 koordin\u00e1t\u00e1kon tal\u00e1lhat\u00f3 t\u00e1rgyat (a dummy markert). CLion interpreter CLion-ban az interpreterhez adjuk hozz\u00e1 a /home/tamas/ros2_ws/install/ros2_course_msgs/lib/python3.8/site-packages el\u00e9r\u00e9si utat. measured_cp \u00e9s servo_cp topic-ok dVRK ROS 2-ben DVRK ROS 2-ben v\u00e1ltozott a topic-ok t\u00edpusa: geometry_msgs/msg/PoseStamped . Futtassuk az action server-t \u00e9s tesztelj\u00fck a m\u0171k\u00f6d\u00e9s\u00e9t parancssorb\u00f3l: ros2 run ros2_course grasp_server ros2 node info grasp_server ros2 action list -t ros2 action info /grasp ros2 interface show ros2_course_msgs/action/Grasp ros2 action send_goal --feedback /grasp ros2_course_msgs/action/Grasp \"{grasp_pos: {x: 0.0, y: 0.0, z: -0.18}}\"","title":"2.2: Grasp server implement\u00e1l\u00e1sa"},{"location":"08_service_action/#23-grasp-client-implementalasa","text":"Hozzunk l\u00e9tre \u00faj python forr\u00e1sf\u00e1jlt grasp_client.py n\u00e9vvel a ~/ros2_ws/src/ros2_course/ros2_course mapp\u00e1ban. Adjuk meg az \u00faj entry point-ot a setup.py -ban a megszokott m\u00f3don. Implement\u00e1ljuk az action client-et. Induljunk ki a p\u00e9ld\u00e1b\u00f3l: https://docs.ros.org/en/foxy/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.html . A node funkcionalit\u00e1sa \u00e1temelhet\u0151 a psm_grasp.py -b\u00f3l. A node feliratkozik a /dummy_target_marker topic-ra, \u00e9s egy Grasp action request-et k\u00fcld az action server-nek (`grasp_server') a marker megragad\u00e1s\u00e1ra. Futtassuk az action client-et ( grasp_client ) \u00e9s a dummy_marker -t: ros2 run ros2_course dummy_marker ros2 run ros2_course grasp_client","title":"2.3: Grasp client implement\u00e1l\u00e1sa"},{"location":"08_service_action/#3-isprime-service","text":"Implement\u00e1ljunk ROS Service-t, amely egy kapott term\u00e9szetes sz\u00e1mr\u00f3l meg\u00e1llap\u00edtja, pr\u00edm-e. Haszn\u00e1ljuk az implement\u00e1lt service-t. Kiindulhatunk ebb\u0151l a p\u00e9ld\u00e1b\u00f3l: https://docs.ros.org/en/foxy/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.html .","title":"3. IsPrime service"},{"location":"08_service_action/#hasznos-linkek","text":"Build dVRK2 on ROS2 ROS 2 examples Understanding ROS actions Creating an action Writing an Action Server and Client https://docs.ros.org/en/foxy/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.html","title":"Hasznos linkek"},{"location":"09_sensory_data/","text":"08. Szenzoros adatok gy\u0171jt\u00e9se \u00e9s feldolgoz\u00e1sa Gyakorlat Thing may change here... Ezt a gyakorlatot lehet, hogy le fogjuk cser\u00e9lni. 1: Leo rover Install\u00e1ljuk a Leo rover ROS package-eit: sudo apt update sudo apt install ros-noetic-leo* A http://wiki.ros.org/leo_gazebo le\u00edr\u00e1s seg\u00edts\u00e9g\u00e9vel ind\u00edtsuk el a gazebo szimul\u00e1tort a Mars landscape-pel. Ind\u00edtsunk teleop node-ot, \u00e9s mozgassuk meg a robotot. 2: K\u00e1v\u00e9 a Marson -- k\u00e9pek r\u00f6gz\u00edt\u00e9se Warning A Mars rover k\u00e9pet k\u00fcld\u00f6tt egy k\u00fcl\u00f6n\u00f6s, k\u00e1v\u00e9s b\u00f6gr\u00e9nek t\u0171n\u0151 t\u00e1rgyr\u00f3l! A feladat, hogy ford\u00edtsuk a rovert a b\u00f6gre fel\u00e9, majd k\u00f6zel\u00edts\u00fck meg, hogy r\u00e9szletesen megvizsg\u00e1lhassuk. Ind\u00edtsuk el a Gazebo-t: gazebo Az insert panelen keress\u00fck ki a googleresearch/models/cole_hardware_mug_classic_blue modellt, majd helyezz\u00fck el a szimul\u00e1ci\u00f3ban. Ez az\u00e9rt kell, hogy k\u00e9s\u0151bb meglegyen a b\u00f6gre modellje a f\u00e1ljrendszer\u00fcnkben. Z\u00e1rjuk be a Gazebo-t T\u00f6lts\u00fck le a leo_masryard_coffee.launch \u00e9s a marsyard_coffe.world f\u00e1jlokat, majd m\u00e1soljuk be rendre a catkin_ws/src/ros_course/launch \u00e9s catkin_ws/src/ros_course/worlds mapp\u00e1kba. A .world f\u00e1jlokban \u00edrjuk \u00e1t a /home/tamas/.ignition/fuel/fuel... el\u00e9r\u00e9si utakat (f\u00e1jlonk\u00e9nt 2x) a saj\u00e1tunkra. Ind\u00edtsuk el a szimul\u00e1tort: roslaunch ros_course leo_marsyard_coffee.launch Ind\u00edtsuk el a teleopot \u00e9s az rqt_image_view -t: rosrun leo_teleop key_teleop rosrun rqt_image_view rqt_image_view Tip Ha a szimul\u00e1tor futtat\u00e1sa t\u00fals\u00e1gosan megterhel\u0151 a PC sz\u00e1m\u00e1ra, dolgozhatunk a terrain n\u00e9lk\u00fcli leo_gazebo_coffee.launch \u00e9s gazebo_coffe.world f\u00e1jlokkal is. Ments\u00fcnk le egy-egy k\u00e9pet, amin l\u00e1that\u00f3, illetve nem l\u00e1that\u00f3 a k\u00e1v\u00e9s b\u00f6gre. 3: K\u00e1v\u00e9 a Marson -- offline k\u00e9pfeldolgoz\u00e1s \u00cdrjunk Python szkriptet, amely beolvassa \u00e9s megjelen\u00edti a lementett k\u00e9peket. Sz\u00edn alap\u00fa szegment\u00e1l\u00e1ssal (vagy b\u00e1rhogy m\u00e1shogy) szegment\u00e1ljuk a k\u00e1v\u00e9s b\u00f6gr\u00e9t. Hat\u00e1rozzuk meg a b\u00f6gre k\u00f6z\u00e9ppontj\u00e1t k\u00e9pi koordin\u00e1t\u00e1kban. A szegment\u00e1l\u00e1s zaja gondot okozhat, pr\u00f3b\u00e1ljuk meg lesz\u0171rni. 4: K\u00e1v\u00e9 a Marson -- online perception node Iratkozzunk fel a /camera/image_raw topicra, majd a cv.imshow() f\u00fcggv\u00e9ny seg\u00edts\u00e9g\u00e9val jelen\u00edts\u00fck meg a kapott k\u00e9peket. Dolgozzuk be a m\u0171k\u00f6d\u0151 computer vision algoritmusunkat egy ROS node-ba. Publik\u00e1ljuk \u00faj topicban a detekt\u00e1lt b\u00f6gre k\u00f6z\u00e9ppontj\u00e1nak k\u00e9pi koordin\u00e1t\u00e1t. Haszn\u00e1lhatjuk pl. az Int32MultiArray, Point2D t\u00edpusokat, vagy defini\u00e1lhatunk saj\u00e1tot (k\u00e9s\u0151bb sz\u00fcks\u00e9g lesz a b\u00f6gre m\u00e9ret\u00e9re is). B\u00f3nusz: publik\u00e1ljuk a maszkot \u00e9s a maszkolt k\u00e9pet egy-egy Image topicban 5: K\u00e1v\u00e9 a Marson -- operation logic node \u00cdrjunk \u00faj ROS node-ot, amely fogadja a perception node \u00fczeneteit, illetve k\u00e9pes a rover mozg\u00e1s\u00e1nak ir\u00e1ny\u00edt\u00e1s\u00e1ra. Forgassuk a rovert egy helyben, am\u00edg a b\u00f6gre a k\u00e9p k\u00f6zep\u00e9re nem ker\u00fcl. K\u00f6zel\u00edts\u00fck meg a b\u00f6gr\u00e9t annyira, hogy a l\u00e1tsz\u00f3lagos m\u00e9rete a k\u00e9p m\u00e9ret\u00e9nek 50%-\u00e1t el nem \u00e9ri. Ments\u00fcnk le k\u00e9pet a gyan\u00fas objektumr\u00f3l. 5+1: B\u00f3nusz N\u00e9zz\u00fcnk sz\u00e9t Gazebo-ban a beilleszthet\u0151 modellek k\u00f6z\u00f6tt ( insert panel) \u00e9s v\u00e1lasszunk egyet, amely valamilyen m\u00e1s m\u00f3dszerrel detekt\u00e1lhat\u00f3 a kamera k\u00e9p\u00e9n (pl. template matching). M\u00f3dos\u00edtsuk \u00fagy a node-okat, hogy ezt az objektumot k\u00f6zel\u00edtse meg a rover. Figyelem! Az \u00f3ra v\u00e9g\u00e9n a forr\u00e1sk\u00f3dokat mindenkinek fel kell t\u00f6lteni Moodle-re egy zip arch\u00edvumba csomagolva! Hasznos linkek http://wiki.ros.org/leo_gazebo http://wiki.ros.org/cv_bridge/Tutorials/ConvertingBetweenROSImagesAndOpenCVImagesPython https://realpython.com/python-opencv-color-spaces/ https://stackoverflow.com/questions/59164192/how-to-find-the-contour-of-a-blob-using-opencv-python - Turtlebot export TURTLEBOT3_MODEL = burger export ROS_DOMAIN_ID = 11 export GAZEBO_MODEL_PATH = $GAZEBO_MODEL_PATH : ` ros2 pkg prefix turtlebot3_gazebo ` /share/ turtlebot3_gazebo/models/ https://ros2-industrial-workshop.readthedocs.io/en/latest/_source/navigation/ROS2-Cartographer.html","title":"Szenzoros adatok gy\u0171jt\u00e9se \u00e9s feldolgoz\u00e1sa"},{"location":"09_sensory_data/#08-szenzoros-adatok-gyujtese-es-feldolgozasa","text":"","title":"08. Szenzoros adatok gy\u0171jt\u00e9se \u00e9s feldolgoz\u00e1sa"},{"location":"09_sensory_data/#gyakorlat","text":"Thing may change here... Ezt a gyakorlatot lehet, hogy le fogjuk cser\u00e9lni.","title":"Gyakorlat"},{"location":"09_sensory_data/#1-leo-rover","text":"Install\u00e1ljuk a Leo rover ROS package-eit: sudo apt update sudo apt install ros-noetic-leo* A http://wiki.ros.org/leo_gazebo le\u00edr\u00e1s seg\u00edts\u00e9g\u00e9vel ind\u00edtsuk el a gazebo szimul\u00e1tort a Mars landscape-pel. Ind\u00edtsunk teleop node-ot, \u00e9s mozgassuk meg a robotot.","title":"1: Leo rover"},{"location":"09_sensory_data/#2-kave-a-marson-kepek-rogzitese","text":"Warning A Mars rover k\u00e9pet k\u00fcld\u00f6tt egy k\u00fcl\u00f6n\u00f6s, k\u00e1v\u00e9s b\u00f6gr\u00e9nek t\u0171n\u0151 t\u00e1rgyr\u00f3l! A feladat, hogy ford\u00edtsuk a rovert a b\u00f6gre fel\u00e9, majd k\u00f6zel\u00edts\u00fck meg, hogy r\u00e9szletesen megvizsg\u00e1lhassuk. Ind\u00edtsuk el a Gazebo-t: gazebo Az insert panelen keress\u00fck ki a googleresearch/models/cole_hardware_mug_classic_blue modellt, majd helyezz\u00fck el a szimul\u00e1ci\u00f3ban. Ez az\u00e9rt kell, hogy k\u00e9s\u0151bb meglegyen a b\u00f6gre modellje a f\u00e1ljrendszer\u00fcnkben. Z\u00e1rjuk be a Gazebo-t T\u00f6lts\u00fck le a leo_masryard_coffee.launch \u00e9s a marsyard_coffe.world f\u00e1jlokat, majd m\u00e1soljuk be rendre a catkin_ws/src/ros_course/launch \u00e9s catkin_ws/src/ros_course/worlds mapp\u00e1kba. A .world f\u00e1jlokban \u00edrjuk \u00e1t a /home/tamas/.ignition/fuel/fuel... el\u00e9r\u00e9si utakat (f\u00e1jlonk\u00e9nt 2x) a saj\u00e1tunkra. Ind\u00edtsuk el a szimul\u00e1tort: roslaunch ros_course leo_marsyard_coffee.launch Ind\u00edtsuk el a teleopot \u00e9s az rqt_image_view -t: rosrun leo_teleop key_teleop rosrun rqt_image_view rqt_image_view Tip Ha a szimul\u00e1tor futtat\u00e1sa t\u00fals\u00e1gosan megterhel\u0151 a PC sz\u00e1m\u00e1ra, dolgozhatunk a terrain n\u00e9lk\u00fcli leo_gazebo_coffee.launch \u00e9s gazebo_coffe.world f\u00e1jlokkal is. Ments\u00fcnk le egy-egy k\u00e9pet, amin l\u00e1that\u00f3, illetve nem l\u00e1that\u00f3 a k\u00e1v\u00e9s b\u00f6gre.","title":"2: K\u00e1v\u00e9 a Marson -- k\u00e9pek r\u00f6gz\u00edt\u00e9se"},{"location":"09_sensory_data/#3-kave-a-marson-offline-kepfeldolgozas","text":"\u00cdrjunk Python szkriptet, amely beolvassa \u00e9s megjelen\u00edti a lementett k\u00e9peket. Sz\u00edn alap\u00fa szegment\u00e1l\u00e1ssal (vagy b\u00e1rhogy m\u00e1shogy) szegment\u00e1ljuk a k\u00e1v\u00e9s b\u00f6gr\u00e9t. Hat\u00e1rozzuk meg a b\u00f6gre k\u00f6z\u00e9ppontj\u00e1t k\u00e9pi koordin\u00e1t\u00e1kban. A szegment\u00e1l\u00e1s zaja gondot okozhat, pr\u00f3b\u00e1ljuk meg lesz\u0171rni.","title":"3: K\u00e1v\u00e9 a Marson -- offline k\u00e9pfeldolgoz\u00e1s"},{"location":"09_sensory_data/#4-kave-a-marson-online-perception-node","text":"Iratkozzunk fel a /camera/image_raw topicra, majd a cv.imshow() f\u00fcggv\u00e9ny seg\u00edts\u00e9g\u00e9val jelen\u00edts\u00fck meg a kapott k\u00e9peket. Dolgozzuk be a m\u0171k\u00f6d\u0151 computer vision algoritmusunkat egy ROS node-ba. Publik\u00e1ljuk \u00faj topicban a detekt\u00e1lt b\u00f6gre k\u00f6z\u00e9ppontj\u00e1nak k\u00e9pi koordin\u00e1t\u00e1t. Haszn\u00e1lhatjuk pl. az Int32MultiArray, Point2D t\u00edpusokat, vagy defini\u00e1lhatunk saj\u00e1tot (k\u00e9s\u0151bb sz\u00fcks\u00e9g lesz a b\u00f6gre m\u00e9ret\u00e9re is). B\u00f3nusz: publik\u00e1ljuk a maszkot \u00e9s a maszkolt k\u00e9pet egy-egy Image topicban","title":"4: K\u00e1v\u00e9 a Marson -- online perception node"},{"location":"09_sensory_data/#5-kave-a-marson-operation-logic-node","text":"\u00cdrjunk \u00faj ROS node-ot, amely fogadja a perception node \u00fczeneteit, illetve k\u00e9pes a rover mozg\u00e1s\u00e1nak ir\u00e1ny\u00edt\u00e1s\u00e1ra. Forgassuk a rovert egy helyben, am\u00edg a b\u00f6gre a k\u00e9p k\u00f6zep\u00e9re nem ker\u00fcl. K\u00f6zel\u00edts\u00fck meg a b\u00f6gr\u00e9t annyira, hogy a l\u00e1tsz\u00f3lagos m\u00e9rete a k\u00e9p m\u00e9ret\u00e9nek 50%-\u00e1t el nem \u00e9ri. Ments\u00fcnk le k\u00e9pet a gyan\u00fas objektumr\u00f3l.","title":"5: K\u00e1v\u00e9 a Marson -- operation logic node"},{"location":"09_sensory_data/#51-bonusz","text":"N\u00e9zz\u00fcnk sz\u00e9t Gazebo-ban a beilleszthet\u0151 modellek k\u00f6z\u00f6tt ( insert panel) \u00e9s v\u00e1lasszunk egyet, amely valamilyen m\u00e1s m\u00f3dszerrel detekt\u00e1lhat\u00f3 a kamera k\u00e9p\u00e9n (pl. template matching). M\u00f3dos\u00edtsuk \u00fagy a node-okat, hogy ezt az objektumot k\u00f6zel\u00edtse meg a rover. Figyelem! Az \u00f3ra v\u00e9g\u00e9n a forr\u00e1sk\u00f3dokat mindenkinek fel kell t\u00f6lteni Moodle-re egy zip arch\u00edvumba csomagolva!","title":"5+1: B\u00f3nusz"},{"location":"09_sensory_data/#hasznos-linkek","text":"http://wiki.ros.org/leo_gazebo http://wiki.ros.org/cv_bridge/Tutorials/ConvertingBetweenROSImagesAndOpenCVImagesPython https://realpython.com/python-opencv-color-spaces/ https://stackoverflow.com/questions/59164192/how-to-find-the-contour-of-a-blob-using-opencv-python - Turtlebot export TURTLEBOT3_MODEL = burger export ROS_DOMAIN_ID = 11 export GAZEBO_MODEL_PATH = $GAZEBO_MODEL_PATH : ` ros2 pkg prefix turtlebot3_gazebo ` /share/ turtlebot3_gazebo/models/ https://ros2-industrial-workshop.readthedocs.io/en/latest/_source/navigation/ROS2-Cartographer.html","title":"Hasznos linkek"},{"location":"projects/","text":"K\u00f6telez\u0151 Program \u00dctemez\u00e9s Okt. h\u00e9t D\u00e1tum Sz\u00e1monk\u00e9r\u00e9s 6. m\u00e1rc. 22 K\u00f6telez\u0151 programok ismertet\u00e9se. Projekt labor I. 12. m\u00e1j. 3 Projekt labor II. 13. m\u00e1j. 10 K\u00f6telez\u0151 programok bemutat\u00e1sa. Neh\u00e9zs\u00e9gi fokozatok \u00e9s \u00e9rdemjegyek A k\u00f6telez\u0151 programok h\u00e1rom neh\u00e9zs\u00e9gi fokozatban teljes\u00edthet\u0151k. A neh\u00e9zs\u00e9gi fok meghat\u00e1rozza a legjobb \u00e9rdemjegyet, amely a teljes\u00edt\u00e9s\u00e9\u00e9rt kaphat\u00f3! Neh\u00e9zs\u00e9gi fok Legjobb megszerezhet\u0151 \u00e9rdemjegy Basic 3 Advanced 4 Epic 5 Tip A feladatok \u00fagy vannak megadva, hogy \u00e9rdemes a Basic szinttel kezdeni, \u00e9s onnan fokozatosan \u00e9p\u00edtkezni az Epic szintig. A k\u00f6telez\u0151 programok a k\u00f6vetkez\u0151 szempontok szerint ker\u00fclnek \u00e9rt\u00e9kel\u00e9sre: Bizony\u00edtottan saj\u00e1t munka \u00c9rt\u00e9kelhet\u0151 eredm\u00e9nyeket produk\u00e1ljon Verzi\u00f3k\u00f6vet\u00e9s haszn\u00e1lata, felt\u00f6lt\u00e9s GitHub/GitLab/egy\u00e9b repoba Launch f\u00e1jlok Megold\u00e1s teljess\u00e9ge Megfelel\u0151 ROS kommunik\u00e1ci\u00f3 alkalmaz\u00e1sa Program c\u00e9lszer\u0171 ROS strukt\u00far\u00e1ja Implement\u00e1ci\u00f3 min\u0151s\u00e9ge K\u00f3d dokument\u00e1l\u00e1sa Tip ChatGPT \u00e9s egy\u00e9b MI eszk\u00f6z\u00f6k haszn\u00e1lata megengedett. \u00c9vk\u00f6zi jegy A f\u00e9l\u00e9v elfogad\u00e1s\u00e1nak felt\u00e9tele, hogy mind a k\u00e9t ZH, mind a k\u00f6telez\u0151 program \u00e9rt\u00e9kel\u00e9se legal\u00e1bb el\u00e9gs\u00e9ges. A k\u00e9t ZH k\u00f6z\u00fcl az egyik az utols\u00f3 \u00f3ra alkalm\u00e1val p\u00f3tolhat\u00f3. F\u00e9l\u00e9v v\u00e9gi jegy \\(Jegy = (ZH1 + ZH2 + 2 \\times K\u00f6tProg) / 4\\) K\u00f6telez\u0151 program t\u00e9m\u00e1k 1. Mobil robot A. Playground Robot Gazebo install Setting up a robot simulation (Gazebo) B. TurtleBot4 TurtleBot4 Simulator Tutorial TurtleBot4 GUI Docs C. PlatypOUs (ROS 1) PlatypOUs GitHub D. B\u00e1rmilyen mobil robot 1.1. Mobil robot akad\u00e1ly elker\u00fcl\u00e9s Basic: Szimul\u00e1tor \u00e9leszt\u00e9se. ROS node/node-ok implement\u00e1l\u00e1sa szenzorok adatainak beolvas\u00e1s\u00e1ra \u00e9s a a robot mozgat\u00e1s\u00e1ra. Advanced: ROS rendszer implement\u00e1l\u00e1sa akad\u00e1ly felismer\u00e9s\u00e9re \u00e9s az akad\u00e1lyt kiker\u00fcl\u0151 trajekt\u00f3ria tervez\u00e9s\u00e9re \u00e9s megval\u00f3s\u00edt\u00e1s\u00e1ra szimul\u00e1lt k\u00f6rnyezetben b\u00e1rmely szenzor felhaszn\u00e1l\u00e1s\u00e1val. Epic: Ny\u0171g\u00f6zz le! 1.2. Mobil robot p\u00e1lyak\u00f6vet\u00e9s Basic: Szimul\u00e1tor \u00e9leszt\u00e9se. ROS node/node-ok implement\u00e1l\u00e1sa szenzorok adatainak beolvas\u00e1s\u00e1ra \u00e9s a a robot mozgat\u00e1s\u00e1ra. Advanced: ROS rendszer implement\u00e1l\u00e1sa p\u00e1lyak\u00f6vet\u00e9sre szimul\u00e1lt k\u00f6rnyezetben b\u00e1rmely szenzor felhaszn\u00e1l\u00e1s\u00e1val(pl. fal mellett halad\u00e1s adott t\u00e1vols\u00e1gra LIDAR seg\u00edts\u00e9g\u00e9vel). Epic: Ny\u0171g\u00f6zz le! 1.3. Mobil robot objektum k\u00f6vet\u00e9s/visual servoing Basic: Szimul\u00e1tor \u00e9leszt\u00e9se. ROS node/node-ok implement\u00e1l\u00e1sa szenzorok adatainak beolvas\u00e1s\u00e1ra \u00e9s a a robot mozgat\u00e1s\u00e1ra. Advanced: ROS rendszer implement\u00e1l\u00e1sa objektum megkeres\u00e9s\u00e9re/felismer\u00e9s\u00e9re \u00e9s k\u00f6vet\u00e9s\u00e9re/megk\u00f6zel\u00edt\u00e9s\u00e9re szimul\u00e1lt k\u00f6rnyezetben b\u00e1rmely szenzor felhaszn\u00e1l\u00e1s\u00e1val (pl. visual servoing). Epic: Ny\u0171g\u00f6zz le! 1.4. Mobil robot action library Basic: Szimul\u00e1tor \u00e9leszt\u00e9se. ROS node/node-ok implement\u00e1l\u00e1sa szenzorok adatainak beolvas\u00e1s\u00e1ra \u00e9s a a robot mozgat\u00e1s\u00e1ra. Advanced: Egyszer\u0171 m\u0171veleteket tartalmaz\u00f3, ROS action alap\u00fa k\u00f6nyvt\u00e1r \u00e9s ezeket v\u00e9grehajt\u00f3 rendszer implement\u00e1l\u00e1sa (pl. push object, move to object, turn around). Epic: Ny\u0171g\u00f6zz le! 2. Quadcopter Gazebo install Setting up a robot simulation (Gazebo) ign gazebo -v 4 -r quadcopter.sdf Basic: Szimul\u00e1tor \u00e9leszt\u00e9se. ROS node/node-ok implement\u00e1l\u00e1sa szenzorok adatainak beolvas\u00e1s\u00e1ra \u00e9s a a robot mozgat\u00e1s\u00e1ra. Advanced: ROS rendszer implement\u00e1l\u00e1sa magass\u00e1g/sebess\u00e9g szab\u00e1lyoz\u00e1s\u00e1ra. Epic: Ny\u0171g\u00f6zz le! 3. Szabadon v\u00e1lasztott Gazebo szimul\u00e1ci\u00f3 Gazebo install Setting up a robot simulation (Gazebo) Gazebo World Examples Megegyez\u00e9s alapj\u00e1n. 4. Gazebo szimul\u00e1ci\u00f3 \u00f6ssze\u00e1ll\u00edt\u00e1sa Gazebo install Setting up a robot simulation (Gazebo) Gazebo World Examples Megegyez\u00e9s alapj\u00e1n. 5. TurtleSim Turtlesim Tutorial Koch G\u00f6rbe 5.1 Turtlesim Frakt\u00e1l/Sz\u00f6veg Basic: Ar\u00e1nyos szab\u00e1lyoz\u00f3 implement\u00e1l\u00e1sa. Advanced: Frakt\u00e1l/sz\u00f6veg rajzol\u00e1sa. Epic: Ny\u0171g\u00f6zz le! 6. DVRK Download and compile dVRK 2 Marker examples 6.1 DVRK Interakt\u00edv Marker Megfoghat\u00f3, mozgathat\u00f3 marker implement\u00e1l\u00e1sa a DVRK szimul\u00e1tor\u00e1hoz. 7. YouBot (Windows) YouBot controller GitHub 7.1. YouBot ROS integr\u00e1ci\u00f3 Basic: YouBot repo build-el\u00e9se, megismer\u00e9se Advanced: Szimul\u00e1lt robot mozgat\u00e1sa csukl\u00f3t\u00e9rben ROS k\u00f6rnyezetben Epic: Tesztel\u00e9s val\u00f3s roboton \u00e9s/vagy ny\u0171g\u00f6zz le! X. Saj\u00e1t t\u00e9ma Megegyez\u00e9s alapj\u00e1n. Hasznos linkek Gazebo install Setting up a robot simulation (Gazebo) Gazebo World Examples YouBot controller GitHub Download and compile dVRK 2 Marker examples Turtlesim Tutorial Koch G\u00f6rbe","title":"K\u00f6telez\u0151 program"},{"location":"projects/#kotelezo-program","text":"","title":"K\u00f6telez\u0151 Program"},{"location":"projects/#utemezes","text":"Okt. h\u00e9t D\u00e1tum Sz\u00e1monk\u00e9r\u00e9s 6. m\u00e1rc. 22 K\u00f6telez\u0151 programok ismertet\u00e9se. Projekt labor I. 12. m\u00e1j. 3 Projekt labor II. 13. m\u00e1j. 10 K\u00f6telez\u0151 programok bemutat\u00e1sa.","title":"\u00dctemez\u00e9s"},{"location":"projects/#nehezsegi-fokozatok-es-erdemjegyek","text":"A k\u00f6telez\u0151 programok h\u00e1rom neh\u00e9zs\u00e9gi fokozatban teljes\u00edthet\u0151k. A neh\u00e9zs\u00e9gi fok meghat\u00e1rozza a legjobb \u00e9rdemjegyet, amely a teljes\u00edt\u00e9s\u00e9\u00e9rt kaphat\u00f3! Neh\u00e9zs\u00e9gi fok Legjobb megszerezhet\u0151 \u00e9rdemjegy Basic 3 Advanced 4 Epic 5 Tip A feladatok \u00fagy vannak megadva, hogy \u00e9rdemes a Basic szinttel kezdeni, \u00e9s onnan fokozatosan \u00e9p\u00edtkezni az Epic szintig. A k\u00f6telez\u0151 programok a k\u00f6vetkez\u0151 szempontok szerint ker\u00fclnek \u00e9rt\u00e9kel\u00e9sre: Bizony\u00edtottan saj\u00e1t munka \u00c9rt\u00e9kelhet\u0151 eredm\u00e9nyeket produk\u00e1ljon Verzi\u00f3k\u00f6vet\u00e9s haszn\u00e1lata, felt\u00f6lt\u00e9s GitHub/GitLab/egy\u00e9b repoba Launch f\u00e1jlok Megold\u00e1s teljess\u00e9ge Megfelel\u0151 ROS kommunik\u00e1ci\u00f3 alkalmaz\u00e1sa Program c\u00e9lszer\u0171 ROS strukt\u00far\u00e1ja Implement\u00e1ci\u00f3 min\u0151s\u00e9ge K\u00f3d dokument\u00e1l\u00e1sa Tip ChatGPT \u00e9s egy\u00e9b MI eszk\u00f6z\u00f6k haszn\u00e1lata megengedett.","title":"Neh\u00e9zs\u00e9gi fokozatok \u00e9s \u00e9rdemjegyek"},{"location":"projects/#evkozi-jegy","text":"A f\u00e9l\u00e9v elfogad\u00e1s\u00e1nak felt\u00e9tele, hogy mind a k\u00e9t ZH, mind a k\u00f6telez\u0151 program \u00e9rt\u00e9kel\u00e9se legal\u00e1bb el\u00e9gs\u00e9ges. A k\u00e9t ZH k\u00f6z\u00fcl az egyik az utols\u00f3 \u00f3ra alkalm\u00e1val p\u00f3tolhat\u00f3. F\u00e9l\u00e9v v\u00e9gi jegy \\(Jegy = (ZH1 + ZH2 + 2 \\times K\u00f6tProg) / 4\\)","title":"\u00c9vk\u00f6zi jegy"},{"location":"projects/#kotelezo-program-temak","text":"","title":"K\u00f6telez\u0151 program t\u00e9m\u00e1k"},{"location":"projects/#1-mobil-robot","text":"","title":"1. Mobil robot"},{"location":"projects/#a-playground-robot","text":"Gazebo install Setting up a robot simulation (Gazebo)","title":"A. Playground Robot"},{"location":"projects/#b-turtlebot4","text":"TurtleBot4 Simulator Tutorial TurtleBot4 GUI Docs","title":"B. TurtleBot4"},{"location":"projects/#c-platypous-ros-1","text":"PlatypOUs GitHub","title":"C. PlatypOUs (ROS 1)"},{"location":"projects/#d-barmilyen-mobil-robot","text":"","title":"D. B\u00e1rmilyen mobil robot"},{"location":"projects/#11-mobil-robot-akadaly-elkerules","text":"Basic: Szimul\u00e1tor \u00e9leszt\u00e9se. ROS node/node-ok implement\u00e1l\u00e1sa szenzorok adatainak beolvas\u00e1s\u00e1ra \u00e9s a a robot mozgat\u00e1s\u00e1ra. Advanced: ROS rendszer implement\u00e1l\u00e1sa akad\u00e1ly felismer\u00e9s\u00e9re \u00e9s az akad\u00e1lyt kiker\u00fcl\u0151 trajekt\u00f3ria tervez\u00e9s\u00e9re \u00e9s megval\u00f3s\u00edt\u00e1s\u00e1ra szimul\u00e1lt k\u00f6rnyezetben b\u00e1rmely szenzor felhaszn\u00e1l\u00e1s\u00e1val. Epic: Ny\u0171g\u00f6zz le!","title":"1.1. Mobil robot akad\u00e1ly elker\u00fcl\u00e9s"},{"location":"projects/#12-mobil-robot-palyakovetes","text":"Basic: Szimul\u00e1tor \u00e9leszt\u00e9se. ROS node/node-ok implement\u00e1l\u00e1sa szenzorok adatainak beolvas\u00e1s\u00e1ra \u00e9s a a robot mozgat\u00e1s\u00e1ra. Advanced: ROS rendszer implement\u00e1l\u00e1sa p\u00e1lyak\u00f6vet\u00e9sre szimul\u00e1lt k\u00f6rnyezetben b\u00e1rmely szenzor felhaszn\u00e1l\u00e1s\u00e1val(pl. fal mellett halad\u00e1s adott t\u00e1vols\u00e1gra LIDAR seg\u00edts\u00e9g\u00e9vel). Epic: Ny\u0171g\u00f6zz le!","title":"1.2. Mobil robot p\u00e1lyak\u00f6vet\u00e9s"},{"location":"projects/#13-mobil-robot-objektum-kovetesvisual-servoing","text":"Basic: Szimul\u00e1tor \u00e9leszt\u00e9se. ROS node/node-ok implement\u00e1l\u00e1sa szenzorok adatainak beolvas\u00e1s\u00e1ra \u00e9s a a robot mozgat\u00e1s\u00e1ra. Advanced: ROS rendszer implement\u00e1l\u00e1sa objektum megkeres\u00e9s\u00e9re/felismer\u00e9s\u00e9re \u00e9s k\u00f6vet\u00e9s\u00e9re/megk\u00f6zel\u00edt\u00e9s\u00e9re szimul\u00e1lt k\u00f6rnyezetben b\u00e1rmely szenzor felhaszn\u00e1l\u00e1s\u00e1val (pl. visual servoing). Epic: Ny\u0171g\u00f6zz le!","title":"1.3. Mobil robot objektum k\u00f6vet\u00e9s/visual servoing"},{"location":"projects/#14-mobil-robot-action-library","text":"Basic: Szimul\u00e1tor \u00e9leszt\u00e9se. ROS node/node-ok implement\u00e1l\u00e1sa szenzorok adatainak beolvas\u00e1s\u00e1ra \u00e9s a a robot mozgat\u00e1s\u00e1ra. Advanced: Egyszer\u0171 m\u0171veleteket tartalmaz\u00f3, ROS action alap\u00fa k\u00f6nyvt\u00e1r \u00e9s ezeket v\u00e9grehajt\u00f3 rendszer implement\u00e1l\u00e1sa (pl. push object, move to object, turn around). Epic: Ny\u0171g\u00f6zz le!","title":"1.4. Mobil robot action library"},{"location":"projects/#2-quadcopter","text":"Gazebo install Setting up a robot simulation (Gazebo) ign gazebo -v 4 -r quadcopter.sdf Basic: Szimul\u00e1tor \u00e9leszt\u00e9se. ROS node/node-ok implement\u00e1l\u00e1sa szenzorok adatainak beolvas\u00e1s\u00e1ra \u00e9s a a robot mozgat\u00e1s\u00e1ra. Advanced: ROS rendszer implement\u00e1l\u00e1sa magass\u00e1g/sebess\u00e9g szab\u00e1lyoz\u00e1s\u00e1ra. Epic: Ny\u0171g\u00f6zz le!","title":"2. Quadcopter"},{"location":"projects/#3-szabadon-valasztott-gazebo-szimulacio","text":"Gazebo install Setting up a robot simulation (Gazebo) Gazebo World Examples Megegyez\u00e9s alapj\u00e1n.","title":"3. Szabadon v\u00e1lasztott Gazebo szimul\u00e1ci\u00f3"},{"location":"projects/#4-gazebo-szimulacio-osszeallitasa","text":"Gazebo install Setting up a robot simulation (Gazebo) Gazebo World Examples Megegyez\u00e9s alapj\u00e1n.","title":"4. Gazebo szimul\u00e1ci\u00f3 \u00f6ssze\u00e1ll\u00edt\u00e1sa"},{"location":"projects/#5-turtlesim","text":"Turtlesim Tutorial Koch G\u00f6rbe","title":"5. TurtleSim"},{"location":"projects/#51-turtlesim-fraktalszoveg","text":"Basic: Ar\u00e1nyos szab\u00e1lyoz\u00f3 implement\u00e1l\u00e1sa. Advanced: Frakt\u00e1l/sz\u00f6veg rajzol\u00e1sa. Epic: Ny\u0171g\u00f6zz le!","title":"5.1 Turtlesim Frakt\u00e1l/Sz\u00f6veg"},{"location":"projects/#6-dvrk","text":"Download and compile dVRK 2 Marker examples","title":"6. DVRK"},{"location":"projects/#61-dvrk-interaktiv-marker","text":"Megfoghat\u00f3, mozgathat\u00f3 marker implement\u00e1l\u00e1sa a DVRK szimul\u00e1tor\u00e1hoz.","title":"6.1 DVRK Interakt\u00edv Marker"},{"location":"projects/#7-youbot-windows","text":"YouBot controller GitHub","title":"7. YouBot (Windows)"},{"location":"projects/#71-youbot-ros-integracio","text":"Basic: YouBot repo build-el\u00e9se, megismer\u00e9se Advanced: Szimul\u00e1lt robot mozgat\u00e1sa csukl\u00f3t\u00e9rben ROS k\u00f6rnyezetben Epic: Tesztel\u00e9s val\u00f3s roboton \u00e9s/vagy ny\u0171g\u00f6zz le!","title":"7.1. YouBot ROS integr\u00e1ci\u00f3"},{"location":"projects/#x-sajat-tema","text":"Megegyez\u00e9s alapj\u00e1n.","title":"X. Saj\u00e1t t\u00e9ma"},{"location":"projects/#hasznos-linkek","text":"Gazebo install Setting up a robot simulation (Gazebo) Gazebo World Examples YouBot controller GitHub Download and compile dVRK 2 Marker examples Turtlesim Tutorial Koch G\u00f6rbe","title":"Hasznos linkek"}]}